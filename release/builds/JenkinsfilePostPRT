// Copyright (c) 2021, Oracle and/or its affiliates.
// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.

pipeline {
    options {
        skipDefaultCheckout true
        timestamps ()
    }

    agent {
       docker {
            image "${RELEASE_RUNNER_IMAGE}"
            args "${RELEASE_RUNNER_DOCKER_ARGS}"
            registryUrl "${RUNNER_DOCKER_REGISTRY_URL}"
            registryCredentialsId 'ocir-pull-and-push-account'
            label "internal"
        }
    }

    parameters {
        string (description: 'The release branch', name: 'RELEASE_BRANCH', defaultValue: 'NONE', trim: true)
        string (description: 'The release version (major.minor.patch format, e.g. 1.0.1)', name: 'RELEASE_VERSION', defaultValue: 'NONE', trim: true)
        string (description: 'The source commit for the release (required for full release)', name: 'RELEASE_COMMIT', defaultValue: 'NONE', trim: true )
        string (description: 'The full git commit hash from the source build', name: 'GIT_COMMIT_TO_USE', defaultValue: 'NONE', trim: true )
        booleanParam (description: 'Indicate whether this is a test run', name: 'TEST_RUN', defaultValue: true)
    }

    environment {
        OCR_CREDS = credentials('ocr-pull-and-push-account')
        NETRC_FILE = credentials('netrc')
        DOCKER_CREDS = credentials('github-packages-credentials-rw')
        DOCKER_REPO = 'ghcr.io'
        IS_PATCH_RELEASE = 'false'

        OBJECT_STORAGE_NS = credentials('oci-os-namespace')
        OBJECT_STORAGE_BUCKET="verrazzano-builds"
        OCI_OS_REGION="us-phoenix-1"
        OCI_CLI_AUTH="api_key"
        OCI_CLI_TENANCY = credentials('oci-tenancy')
        OCI_CLI_USER = credentials('oci-user-ocid')
        OCI_CLI_FINGERPRINT = credentials('oci-api-key-fingerprint')
        OCI_CLI_KEY_FILE = credentials('oci-api-key')

        RELEASE_BINARIES_DIR = "${WORKSPACE}/release/scripts/release_work"
        TIMESTAMP = sh(returnStdout: true, script: "date +%Y%m%d%H%M%S").trim()
    }

    stages {
        // Validate parameters, for example, RELEASE_BRANCH must start with release*
        stage('Clean workspace and checkout') {
            steps {
                sh """
                    echo "${NODE_LABELS}"
                """
                script {
                    if (params.GIT_COMMIT_TO_USE == "NONE") {
                        echo "Specific GIT commit was not specified, use current head"
                        def scmInfo = checkout scm
                        env.GIT_COMMIT = scmInfo.GIT_COMMIT
                        env.GIT_BRANCH = scmInfo.GIT_BRANCH
                    } else {
                        echo "SCM checkout of ${params.GIT_COMMIT_TO_USE}"
                        def scmInfo = checkout([
                            $class: 'GitSCM',
                            branches: [[name: params.GIT_COMMIT_TO_USE]],
                            doGenerateSubmoduleConfigurations: false,
                            extensions: [],
                            submoduleCfg: [],
                            userRemoteConfigs: [[url: env.SCM_VERRAZZANO_GIT_URL]]])
                        env.GIT_COMMIT = scmInfo.GIT_COMMIT
                        env.GIT_BRANCH = scmInfo.GIT_BRANCH
                        // If the commit we were handed is not what the SCM says we are using, fail
                        if (!env.GIT_COMMIT.equals(params.GIT_COMMIT_TO_USE)) {
                            echo "SCM didn't checkout the commit we expected. Expected: ${params.GIT_COMMIT_TO_USE}, Found: ${scmInfo.GIT_COMMIT}"
                            exit 1
                        }
                    }
                    echo "SCM checkout of ${env.GIT_BRANCH} at ${env.GIT_COMMIT}"
                }
                sh """
                    cp -f "${NETRC_FILE}" $HOME/.netrc
                    chmod 600 $HOME/.netrc
                """

                script {
                    def props = readProperties file: '.verrazzano-development-version'
                    VERRAZZANO_DEV_VERSION = props['verrazzano-development-version']
                    TIMESTAMP = sh(returnStdout: true, script: "date +%Y%m%d%H%M%S").trim()
                    SHORT_COMMIT_HASH = sh(returnStdout: true, script: "git rev-parse --short=8 ${params.RELEASE_COMMIT}").trim()
                }
            }
        }

        stage('Download Release Binaries') {
            steps {
                script {
                    sh """
                        mkdir -p ${RELEASE_BINARIES_DIR}
                        cd ${WORKSPACE}/release/scripts
                        ./get_release_artifacts.sh ${params.RELEASE_BRANCH} ${SHORT_COMMIT_HASH} ${RELEASE_BINARIES_DIR}
                    """
                }
            }
        }

        stage('Scan Release Binaries') {
            environment {
                SCANNER_ARCHIVE_LOCATION = credentials('scanner-archive-location')
                SCANNER_ARCHIVE_FILE = credentials('scanner-archive-file')
                VIRUS_DEFINITION_LOCATION = credentials('virus-definition-location')
                NO_PROXY_SUFFIX = credentials('cdn-no-proxy')
            }
           steps {
                script {
                    // The scan alone takes around 55 minutes, so setting a higher timeout
                    timeout(time: 90, unit: 'MINUTES') {
                        sh """
                            cd ${WORKSPACE}/release/scripts
                            ./scan_release_binaries.sh ${params.RELEASE_BRANCH} ${RELEASE_BINARIES_DIR} ${params.RELEASE_VERSION}
                        """
                   }
                }
            }
        }

        stage('Create Github Release') {
            environment {
                SCANNER_ARCHIVE_LOCATION = credentials('scanner-archive-location')
                SCANNER_ARCHIVE_FILE = credentials('scanner-archive-file')

                // The minimum required scopes for the token are: "repo", "read:org".
                GITHUB_ACCESS_TOKEN = credentials('github-api-token-release-process')
                NO_PROXY_SUFFIX = credentials('cdn-no-proxy')
            }
            steps {
                script {
                  sh """
                    echo "${env.GITHUB_ACCESS_TOKEN}" | gh auth login --with-token

                    cd ${WORKSPACE}/release/scripts
                    ./create_github_release.sh ${params.RELEASE_VERSION} ${params.RELEASE_COMMIT} ${RELEASE_BINARIES_DIR} ${TEST_RUN}
                  """
                }
            }
        }

        stage('Copy Results to Release') {
            steps {
                script {
                    sh """
                        if [ $TEST_RUN == true ] ; then
                          echo "TEST_RUN is set to true, NOT pushing scan artifacts to object storage, but confirming they exist to be pushed and commands to push them:"
                          echo ""
                          ls ${RELEASE_BINARIES_DIR}/scan_report.out
                          ls ${RELEASE_BINARIES_DIR}/scan_summary.out
                          echo "oci --region us-phoenix-1 os object put --force --namespace ${OBJECT_STORAGE_NS} -bn ${OBJECT_STORAGE_BUCKET} --name ${CLEAN_BRANCH_NAME}/verrazzano_${params.RELEASE_VERSION}-scan_report.out --file ${RELEASE_BINARIES_DIR}/scan_report.out"
                          echo "oci --region us-phoenix-1 os object put --force --namespace ${OBJECT_STORAGE_NS} -bn ${OBJECT_STORAGE_BUCKET} --name ${CLEAN_BRANCH_NAME}/verrazzano_${params.RELEASE_VERSION}-scan_summary.out --file ${RELEASE_BINARIES_DIR}/scan_summary.out"
                        else
                          oci --region us-phoenix-1 os object put --force --namespace ${OBJECT_STORAGE_NS} -bn ${OBJECT_STORAGE_BUCKET} --name ${CLEAN_BRANCH_NAME}/verrazzano_${params.RELEASE_VERSION}-scan_report.out --file ${RELEASE_BINARIES_DIR}/scan_report.out
                          oci --region us-phoenix-1 os object put --force --namespace ${OBJECT_STORAGE_NS} -bn ${OBJECT_STORAGE_BUCKET} --name ${CLEAN_BRANCH_NAME}/verrazzano_${params.RELEASE_VERSION}-scan_summary.out --file ${RELEASE_BINARIES_DIR}/scan_summary.out
                        fi
                    """
                }
            }
        }

    }
    post {
        always {
            archiveArtifacts artifacts: "**/scan_report.out,**/scan_summary.out,", allowEmptyArchive: true
        }
        cleanup {
            deleteDir()
        }
    }
}
