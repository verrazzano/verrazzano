// Copyright (c) 2023, Oracle and/or its affiliates.
// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.

pipeline {
    options {
        skipDefaultCheckout true
        timestamps ()
    }

    agent {
       docker {
            image "${RUNNER_DOCKER_IMAGE}"
            args "${RELEASE_RUNNER_DOCKER_ARGS}"
            registryUrl "${RUNNER_DOCKER_REGISTRY_URL}"
            registryCredentialsId 'ocir-pull-and-push-account'
            label "internal"
        }
    }
    parameters {
        string (description: 'The release version (major.minor.patch format, e.g. 1.0.1)', name: 'RELEASE_VERSION', defaultValue: 'NONE', trim: true)
        string name: 'IMAGES_OBJECT_STORE_FILE', description: 'The object store file from which to get the list of images to be published to OCR (if provided, IMAGES_TO_PUBLISH_JOB_NAME and IMAGES_TO_PUBLISH_BUILD are ignored)', defaultValue: 'NONE'
        booleanParam (description: 'Indicate whether this is a dry run - no images will be pulled or pushed', name: 'DRY_RUN', defaultValue: false)
        string (description: 'The full git commit hash from the source build', name: 'GIT_COMMIT_TO_USE', defaultValue: 'NONE', trim: true )
    }

    environment {
        OCR_CREDS = credentials('ocr-credentials-for-release')
        OCR_ADMIN_CREDS = credentials('ocr-credentials-for-release')
        GHCR_CREDS = credentials('github-packages-credentials-rw')

        NETRC_FILE = credentials('netrc')
        DOCKER_REPO = 'container-registry.oracle.com'
        RELEASE_VERSION = "${params.RELEASE_VERSION}"
    }

    stages {
        stage('Clean workspace and checkout') {
            steps {
                sh """
                    echo "${NODE_LABELS}"
                """
                script {
                    if (params.GIT_COMMIT_TO_USE == "NONE") {
                        echo "Specific GIT commit was not specified, use current head"
                        def scmInfo = checkout scm
                        env.GIT_COMMIT = scmInfo.GIT_COMMIT
                        env.GIT_BRANCH = scmInfo.GIT_BRANCH
                    } else {
                        echo "SCM checkout of ${params.GIT_COMMIT_TO_USE}"
                        def scmInfo = checkout([
                            $class: 'GitSCM',
                            branches: [[name: params.GIT_COMMIT_TO_USE]],
                            doGenerateSubmoduleConfigurations: false,
                            extensions: [],
                            submoduleCfg: [],
                            userRemoteConfigs: [[url: env.SCM_VERRAZZANO_GIT_URL]]])
                        env.GIT_COMMIT = scmInfo.GIT_COMMIT
                        env.GIT_BRANCH = scmInfo.GIT_BRANCH
                        // If the commit we were handed is not what the SCM says we are using, fail
                        if (!env.GIT_COMMIT.equals(params.GIT_COMMIT_TO_USE)) {
                            echo "SCM didn't checkout the commit we expected. Expected: ${params.GIT_COMMIT_TO_USE}, Found: ${scmInfo.GIT_COMMIT}"
                            exit 1
                        }
                    }
                    echo "SCM checkout of ${env.GIT_BRANCH} at ${env.GIT_COMMIT}"
                }
                sh """
                    cp -f "${NETRC_FILE}" $HOME/.netrc
                    chmod 600 $HOME/.netrc
                """

                script {
                    def props = readProperties file: '.verrazzano-development-version'
                    VERRAZZANO_DEV_VERSION = props['verrazzano-development-version']
                    TIMESTAMP = sh(returnStdout: true, script: "date +%Y%m%d%H%M%S").trim()
                    SHORT_COMMIT_HASH = sh(returnStdout: true, script: "git rev-parse --short=8 HEAD").trim()
                }
            }
        }

        stage('Get Images from Object Storage') {
            environment {
                OCI_OS_NAMESPACE = credentials('oci-os-namespace')
                OCI_OS_BUCKET="verrazzano-builds"
                OCI_CLI_AUTH="api_key"
                OCI_CLI_TENANCY = credentials('oci-tenancy')
                OCI_CLI_USER = credentials('oci-user-ocid')
                OCI_CLI_FINGERPRINT = credentials('oci-api-key-fingerprint')
                OCI_CLI_KEY_FILE = credentials('oci-api-key')
                OCI_CLI_REGION = "us-phoenix-1"
                OCI_REGION = "us-phoenix-1"
            }
            steps {
                 script {                
                    println("Downloading image list from object storage")
                    sh "oci --region ${OCI_REGION} os object get --namespace ${OCI_OS_NAMESPACE} -bn ${OCI_OS_BUCKET} --name ${IMAGES_OBJECT_STORE_FILE} --file verrazzano_images.txt"
                }
              }
            }
        stage('Compare Images from Object storage to be Published') {
            steps {
                script {
                    catchError(buildResult: 'FAILURE', stageResult: 'FAILURE'){
                        sh "${WORKSPACE}/release/scripts/validate_ocr_images.sh"
                    }
                }
            }
        }
        stage('Verify Github artifacts') {
            steps {
                script {
                    sh "${WORKSPACE}/release/scripts/verify_github_release.sh ${RELEASE_VERSION}"
                }
            }
        }
        
    }

}

