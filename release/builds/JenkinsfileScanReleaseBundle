// Copyright (c) 2022, 2023, Oracle and/or its affiliates.
// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.

pipeline {
    options {
        skipDefaultCheckout true
        timestamps ()
    }

    agent {
       docker {
            image "${RELEASE_RUNNER_IMAGE}"
            args "${RELEASE_RUNNER_DOCKER_ARGS}"
            registryUrl "${RUNNER_DOCKER_REGISTRY_URL}"
            registryCredentialsId 'ocir-pull-and-push-account'
            label "internal"
        }
    }

    parameters {
        string (description: 'The verrazzano development version (major.minor.patch format, e.g. 1.0.1)', name: 'VERRAZZANO_DEV_VERSION', defaultValue: 'NONE', trim: true)
        string (description: 'The git commit used to build the distributions being scanned', name: 'GIT_COMMIT_TO_USE', defaultValue: 'NONE', trim: true )
        booleanParam (description: 'Indicate whether this is a test run', name: 'TEST_RUN', defaultValue: true)
        booleanParam (description: 'Enable scanning for test run. Scanning is always done if not a test run, it is disabled for test runs unless this is enabled', name: 'ENABLE_TEST_SCAN', defaultValue: false)
    }

    environment {
        NETRC_FILE = credentials('netrc')

        OBJECT_STORAGE_NS = credentials('oci-os-namespace')
        OBJECT_STORAGE_BUCKET="$OCI_OS_BUCKET"
        OCI_REGION="us-phoenix-1"
        OCI_CLI_AUTH="api_key"
        OCI_CLI_TENANCY = credentials('oci-tenancy')
        OCI_CLI_USER = credentials('oci-user-ocid')
        OCI_CLI_FINGERPRINT = credentials('oci-api-key-fingerprint')
        OCI_CLI_KEY_FILE = credentials('oci-api-key')

        RELEASE_BINARIES_DIR = "${WORKSPACE}/release/scripts/release_work"
        TIMESTAMP = sh(returnStdout: true, script: "date +%Y%m%d%H%M%S").trim()

        RELEASE_VERSION = "${params.VERRAZZANO_DEV_VERSION}"
        VERRAZZANO_RELEASE_PREFIX = "verrazzano-${RELEASE_VERSION}"
        VERRAZZANO_LITE_BUNDLE = "${VERRAZZANO_RELEASE_PREFIX}-lite.zip"
        VERRAZZANO_FULL_BUNDLE = "${VERRAZZANO_RELEASE_PREFIX}.zip"

        VZ_LITE = "vz-lite"
        VZ_FULL = "vz-full"

        SCANNER_HOME = "${WORKSPACE}/scanner_home"
        SCAN_REPORT_BASE_DIR = "${WORKSPACE}/scan_report_dir"
    }

    stages {
        stage('Clean workspace and checkout') {
            steps {
                sh """
                    echo "${NODE_LABELS}"
                """
                script {
                    def scmInfo = checkout scm
                    env.GIT_COMMIT = scmInfo.GIT_COMMIT
                    env.GIT_BRANCH = scmInfo.GIT_BRANCH
                    echo "SCM checkout of ${env.GIT_BRANCH} at ${env.GIT_COMMIT}"
                }
                sh """
                    cp -f "${NETRC_FILE}" $HOME/.netrc
                    chmod 600 $HOME/.netrc
                """

                script {
                    def props = readProperties file: '.verrazzano-development-version'
                    VERRAZZANO_DEV_VERSION = props['verrazzano-development-version']
                    TIMESTAMP = sh(returnStdout: true, script: "date +%Y%m%d%H%M%S").trim()
                    SHORT_COMMIT_HASH = sh(returnStdout: true, script: "git rev-parse --short=8 ${params.GIT_COMMIT_TO_USE}").trim()
                }
            }
        }

        stage('Download Distributions') {
            steps {
                script {
                    sh """
                        mkdir -p ${RELEASE_BINARIES_DIR}
                        cd ${WORKSPACE}/release/scripts
                        ./get_release_artifacts.sh ${env.BRANCH_NAME} ${SHORT_COMMIT_HASH} ${VERRAZZANO_LITE_BUNDLE} ${RELEASE_BINARIES_DIR}/${VZ_LITE}
                        ./get_release_artifacts.sh ${env.BRANCH_NAME} ${SHORT_COMMIT_HASH} ${VERRAZZANO_FULL_BUNDLE} ${RELEASE_BINARIES_DIR}/${VZ_FULL}
                    """
                }
            }
        }

        stage('Scan Distribution Binaries') {
            environment {
                SCANNER_ARCHIVE_LOCATION = credentials('scanner-archive-location')
                SCANNER_ARCHIVE_FILE = credentials('scanner-archive-file')
                VIRUS_DEFINITION_LOCATION = credentials('virus-definition-location')
                NO_PROXY_SUFFIX = credentials('cdn-no-proxy')
            }
            when {
               allOf {
                   not { buildingTag() }
                   expression {return params.TEST_RUN == false || params.ENABLE_TEST_SCAN == true }
               }
            }
            steps {
                script {
                    // The scan takes more than 3 hours for the full bundle, so setting a higher timeout
                    timeout(time: 300, unit: 'MINUTES') {
                        sh """
                            cd ${WORKSPACE}/release/scripts

                            # Scan Verrazzano lite distribution
                            ./scan_release_binaries.sh ${RELEASE_BINARIES_DIR}/${VZ_LITE} ${SCANNER_HOME} ${SCAN_REPORT_BASE_DIR}/${VZ_LITE} "Lite"

                            # Scan Verrazzano full distribution
                            ./scan_release_binaries.sh ${RELEASE_BINARIES_DIR}/${VZ_FULL} ${SCANNER_HOME} ${SCAN_REPORT_BASE_DIR}/${VZ_FULL} "Full" "true"
                        """
                   }
                }
            }
        }

        stage('Copy Results to Object Stores') {
            steps {
                script {
                    sh """
                        if [ $params.TEST_RUN == true ] ; then
                          if [ $params.ENABLE_TEST_SCAN == true ] ; then
                            echo "TEST_RUN is set to true, NOT pushing scan artifacts to object storage, but confirming they exist to be pushed"
                            echo ""
                            ls ${SCAN_REPORT_BASE_DIR}/${VZ_LITE}/scan_report.out
                            ls ${SCAN_REPORT_BASE_DIR}/${VZ_LITE}/scan_summary.out
                            ls ${SCAN_REPORT_BASE_DIR}/${VZ_FULL}/scan_report.out
                            ls ${SCAN_REPORT_BASE_DIR}/${VZ_FULL}/scan_summary.out
                          else
                            echo "TEST_RUN is set to true, ENABLE_TEST_SCAN is set to false. NOT pushing anything to object storage, and didn't scan anything"
                          fi
                        else
                          # We only store in the per commit ephemeral location, the release process will get the scan results from the ephemeral location only since these are asynchronously updated separately.
                          # This avoid complexity here trying to detect the last periodic state, and trying to copy the results into there (and avoids race conditions)
                          oci --region ${OCI_REGION} os object put --force --namespace ${OBJECT_STORAGE_NS} -bn ${OCI_OS_COMMIT_BUCKET} --name ephemeral/${env.BRANCH_NAME}/${SHORT_COMMIT_HASH}/verrazzano_${params.VERRAZZANO_DEV_VERSION}-scan_report_vz_lite.out --file ${SCAN_REPORT_BASE_DIR}/${VZ_LITE}/scan_report.out
                          oci --region ${OCI_REGION} os object put --force --namespace ${OBJECT_STORAGE_NS} -bn ${OCI_OS_COMMIT_BUCKET} --name ephemeral/${env.BRANCH_NAME}/${SHORT_COMMIT_HASH}/verrazzano_${params.VERRAZZANO_DEV_VERSION}-scan_summary_vz_lite.out --file ${SCAN_REPORT_BASE_DIR}/${VZ_LITE}/scan_summary.out
                          oci --region ${OCI_REGION} os object put --force --namespace ${OBJECT_STORAGE_NS} -bn ${OCI_OS_COMMIT_BUCKET} --name ephemeral/${env.BRANCH_NAME}/${SHORT_COMMIT_HASH}/verrazzano_${params.VERRAZZANO_DEV_VERSION}-scan_report_vz_full.out --file ${SCAN_REPORT_BASE_DIR}/${VZ_FULL}/scan_report.out
                          oci --region ${OCI_REGION} os object put --force --namespace ${OBJECT_STORAGE_NS} -bn ${OCI_OS_COMMIT_BUCKET} --name ephemeral/${env.BRANCH_NAME}/${SHORT_COMMIT_HASH}/verrazzano_${params.VERRAZZANO_DEV_VERSION}-scan_summary_vz_full.out --file ${SCAN_REPORT_BASE_DIR}/${VZ_FULL}/scan_summary.out
                        fi
                    """
                }
            }
        }


    }
    post {
        always {
            archiveArtifacts artifacts: "**/scan_report*.out,**/scan_summary*.out,", allowEmptyArchive: true
        }
        cleanup {
            deleteDir()
        }
    }
}
