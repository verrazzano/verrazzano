// Copyright (c) 2021, 2022, Oracle and/or its affiliates.
// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.

def DOCKER_IMAGE_TAG
def releaseBuild
def RELEASE_JOB_NAME
def RELEASE_BRANCH_COMMIT
def IS_PATCH_RELEASE = false
def VERRAZZANO_DEV_VERSION

pipeline {
    options {
        skipDefaultCheckout true
        copyArtifactPermission('*');
        timestamps ()
    }

    agent {
       docker {
            image "${RELEASE_RUNNER_IMAGE}"
            args "${RELEASE_RUNNER_DOCKER_ARGS}"
            registryUrl "${RUNNER_DOCKER_REGISTRY_URL}"
            registryCredentialsId 'ocir-pull-and-push-account'
            label "internal"
        }
    }

    parameters {
        string (description: 'The source commit for the release (required for full release)', name: 'COMMIT_TO_USE', defaultValue: 'NONE', trim: true )
        booleanParam (description: 'Create a release candidate EVEN if pre-release validations fail', name: 'IGNORE_PRE_RELEASE_VALIDATION_FAILURES', defaultValue: false)
        string (name: 'VERRAZZANO_HELPER_BRANCH',
                        defaultValue: 'master',
                        description: 'verrazzano-helper branch. master is used for 1.3+, release-1.2 is used for 1.2 and earlier, user branch name is used when testing verrazzano-helper changes',
                        trim: true)
    }

    environment {
        OCR_CREDS = credentials('ocr-pull-and-push-account')
        NETRC_FILE = credentials('netrc')
        DOCKER_CREDS = credentials('github-packages-credentials-rw')
        DOCKER_REPO = 'ghcr.io'
        GITHUB_CREDENTIALS = credentials('github_rw')
        CLEAN_BRANCH_NAME = "${env.BRANCH_NAME.replace("/", "%2F")}"
        TIMESTAMP = sh(returnStdout: true, script: "date +%Y%m%d%H%M%S").trim()
        PERIODIC_JOB_PROJECT_NAME = 'verrazzano-periodic-triggered-tests'
        OBJECT_STORAGE_NS = credentials('oci-os-namespace')
        OCI_OS_NAMESPACE = credentials('oci-os-namespace')
        OCI_CLI_AUTH="api_key"
        OCI_CLI_TENANCY = credentials('oci-tenancy')
        OCI_CLI_USER = credentials('oci-user-ocid')
        OCI_CLI_FINGERPRINT = credentials('oci-api-key-fingerprint')
        OCI_CLI_KEY_FILE = credentials('oci-api-key')
        OCI_CLI_REGION = "us-phoenix-1"
        OCI_REGION = "${env.OCI_CLI_REGION}"
        OCI_OS_SHARED_BUCKET="build-shared-files"
    }

    stages {
        stage('Clean workspace and checkout') {
            steps {
                sh """
                    echo "${NODE_LABELS}"
                """
                script {
                    if (params.COMMIT_TO_USE == "NONE") {
                        echo "Specific GIT commit was not specified, use current head"
                        def scmInfo = checkout scm
                        env.GIT_COMMIT = scmInfo.GIT_COMMIT
                        env.GIT_BRANCH = scmInfo.GIT_BRANCH
                    } else {
                        echo "SCM checkout of ${params.COMMIT_TO_USE}"
                        def scmInfo = checkout([
                            $class: 'GitSCM',
                            branches: [[name: params.COMMIT_TO_USE]],
                            doGenerateSubmoduleConfigurations: false,
                            extensions: [],
                            submoduleCfg: [],
                            userRemoteConfigs: [[url: env.SCM_VERRAZZANO_GIT_URL]]])
                        env.GIT_COMMIT = scmInfo.GIT_COMMIT
                        env.GIT_BRANCH = scmInfo.GIT_BRANCH
                        // If the commit we were handed is not what the SCM says we are using, fail
                        if (!env.GIT_COMMIT.equals(params.COMMIT_TO_USE)) {
                            echo "SCM didn't checkout the commit we expected. Expected: ${params.COMMIT_TO_USE}, Found: ${env.GIT_COMMIT}"
                            sh "exit 1"
                        }
                    }
                    // setup credential retrieval for possible release branch push
                    sh """
                        git config credential.https://github.com.username ${GITHUB_CREDENTIALS_USR}
                        git config credential.helper '/bin/bash ${WORKSPACE}/release/scripts/credential_helper.sh'
                    """
                    echo "SCM checkout of ${env.GIT_BRANCH} at ${env.GIT_COMMIT}"
                    RELEASE_BRANCH_COMMIT = env.GIT_COMMIT
                }

                script {
                    def props = readProperties file: '.verrazzano-development-version'
                    VERRAZZANO_DEV_VERSION = props['verrazzano-development-version']
                    TIMESTAMP = sh(returnStdout: true, script: "date +%Y%m%d%H%M%S").trim()
                    SHORT_COMMIT_HASH = sh(returnStdout: true, script: "git rev-parse --short=8 HEAD").trim()
                    // update the description with some meaningful info
                    currentBuild.description = SHORT_COMMIT_HASH + " : " + env.GIT_COMMIT + " : " + params.COMMIT_TO_USE
                }
                script {
                    sh """
                        echo "Downloading verrazzano-helper from object storage"
                        oci --region us-phoenix-1 os object get --namespace ${OCI_OS_NAMESPACE} -bn ${OCI_OS_SHARED_BUCKET} --name ${params.VERRAZZANO_HELPER_BRANCH}/verrazzano-helper --file ${WORKSPACE}/verrazzano-helper
                        chmod uog+x ${WORKSPACE}/verrazzano-helper
                    """
                }
            }
        }

        stage('Release Candidate Validation Checks') {
            environment {
                IGNORE_FAILURES = "false"
                TICKET_SERVICE_USERNAME = credentials('ticket-service-username')
                TICKET_SERVICE_PASSWORD = credentials('ticket-service-password')
                OCI_OS_BUCKET="verrazzano-builds"
                OCI_OS_COMMIT_BUCKET="verrazzano-builds-by-commit"
                OCI_CLI_AUTH="api_key"
                OCI_CLI_TENANCY = credentials('oci-tenancy')
                OCI_CLI_USER = credentials('oci-user-ocid')
                OCI_CLI_FINGERPRINT = credentials('oci-api-key-fingerprint')
                OCI_CLI_KEY_FILE = credentials('oci-api-key')
                OCI_CLI_REGION = "us-phoenix-1"
                OCI_REGION = "${env.OCI_CLI_REGION}"
                RELEASE_VERSION = "${params.RELEASE_VERSION}"
                VERRAZZANO_RELEASE_PREFIX = "verrazzano-${VERRAZZANO_DEV_VERSION}"
                VERRAZZANO_LITE_BUNDLE = "${VERRAZZANO_RELEASE_PREFIX}-lite.zip"
                VERRAZZANO_FULL_BUNDLE = "${VERRAZZANO_RELEASE_PREFIX}.zip"
                VZ_LITE = "vz-lite"
                VZ_FULL = "vz-full"
            }
            steps {
                script {
                    sh """
                        cd ${WORKSPACE}
                        echo "Ensuring release artifacts exist for the specified commit id."
                        echo "The commit here should correspond to the commit id from a successful periodic test run which produced artifacts which can be released"
                        ./release/scripts/get_release_artifacts.sh ${CLEAN_BRANCH_NAME} ${SHORT_COMMIT_HASH} ${VERRAZZANO_FULL_BUNDLE} ${VZ_FULL} "VERIFY-ONLY"
                        ./release/scripts/get_release_artifacts.sh ${CLEAN_BRANCH_NAME} ${SHORT_COMMIT_HASH} ${VERRAZZANO_LITE_BUNDLE} ${VZ_LITE} "VERIFY-ONLY"
                    """

                    sh """
                        set +e
                        cd ${WORKSPACE}
                        echo "Performing pre-release validation checks for target version ${VERRAZZANO_DEV_VERSION}, ignore failures is ${params.IGNORE_PRE_RELEASE_VALIDATION_FAILURES}"
                        export IGNORE_FAILURES=${params.IGNORE_PRE_RELEASE_VALIDATION_FAILURES}
                        ./release/scripts/prerelease_validation.sh $VERRAZZANO_DEV_VERSION > $WORKSPACE/prerelease_validation.out
                        if [ \$? -eq 0 ]; then
                            echo "Passed pre-release checks for ${VERRAZZANO_DEV_VERSION}, promoting this to the latest releasable candidate"
                            echo "git-commit=${env.GIT_COMMIT}" > $WORKSPACE/last-${VERRAZZANO_DEV_VERSION}-releasable-candidate-commit.txt
                            oci --region us-phoenix-1 os object put --force --namespace ${OCI_OS_NAMESPACE} -bn ${OCI_OS_BUCKET} --name ${CLEAN_BRANCH_NAME}/last-$VERRAZZANO_DEV_VERSION-releasable-candidate-commit.txt --file $WORKSPACE/last-${VERRAZZANO_DEV_VERSION}-releasable-candidate-commit.txt
                            echo "RELEASE CANDIDATE" > release_status.out
                        else
                            echo "Failed pre-release checks for ${VERRAZZANO_DEV_VERSION}"
                            echo "NOT RELEASABLE" > release_status.out
                        fi
                        oci --region us-phoenix-1 os object put --force --namespace ${OCI_OS_NAMESPACE} -bn ${OCI_OS_BUCKET} --name ${CLEAN_BRANCH_NAME}/current-dev-version.txt --file $WORKSPACE/.verrazzano-development-version
                        set -e
                    """
                    def releaseStatus = readFile file: "release_status.out"
                    currentBuild.displayName = "${currentBuild.displayName} : ${releaseStatus}"
                    if (currentBuild.displayName.contains("NOT RELEASABLE")) {
                        currentBuild.result = "FAILED"
                    }
                }
            }
        }
    }
    post {
        always {
            script {
                writeUpstreamBuildInfo(currentBuild)
                sh "echo ${env.GIT_COMMIT} > ${WORKSPACE}/git_commit.out"
            }
            archiveArtifacts artifacts: '**/prerelease_validation.out,**/release_status.out,**/upstream_periodic_test_build_number.out,**/git_commit.out', allowEmptyArchive: true
        }
    }
}

def writeUpstreamBuildInfo(currBuild) {
    println("upstream builds: ${currBuild.upstreamBuilds}")
    currBuild.upstreamBuilds.each {
        println("upstream project name: ${it.projectName}");
        println("upstream build full project name: ${it.fullProjectName} , comparing to ${env.PERIODIC_JOB_PROJECT_NAME}/${CLEAN_BRANCH_NAME}, are they equal: " +
                it.fullProjectName.equals("${env.PERIODIC_JOB_PROJECT_NAME}/${CLEAN_BRANCH_NAME}") + " are they equal 2? " +
                (it.fullProjectName == "${env.PERIODIC_JOB_PROJECT_NAME}/${CLEAN_BRANCH_NAME}"))
        println("upstream build number: ${it.number}")
    }
    upstreamPeriodicBuild = currBuild.upstreamBuilds.find { it.fullProjectName == "${env.PERIODIC_JOB_PROJECT_NAME}/${CLEAN_BRANCH_NAME}" }
    println("found upstream periodic build ${upstreamPeriodicBuild}")
    if (upstreamPeriodicBuild != null) {
        sh "echo ${upstreamPeriodicBuild.number} > ${WORKSPACE}/upstream_periodic_test_build_number.out"
    }
}
