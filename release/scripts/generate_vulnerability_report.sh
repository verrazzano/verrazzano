#!/usr/bin/env bash
#
# Copyright (c) 2021, 2022, Oracle and/or its affiliates.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.
#

#!/usr/bin/env bash

#
# Data
#

# CVEs

declare CVE_LIST=" "
declare -i CVE_CNT

declare -i CVE_CNT_CRITICAL
declare -i CVE_CNT_HIGH_CNT
declare -i CVE_CNT_OTHER

declare -A CVE_NAMES
declare -A CVE_SEVERITIES
declare -A CVE_DESCRIPTIONS
declare -A -i CVE_IMAGE_CNTS
declare -A CVE_IMAGE_LISTS

# Images
declare IMG_LIST=" "
declare -i IMG_CNT

declare -A IMG_NAMES
declare -A -i IMG_CRITICAL_CVE_CNTS
declare -A -i IMG_HIGH_CVE_CNTS
declare -A -i IMG_OTHER_CVE_CNTS
declare -A IMG_CVE_LISTS

# Data files
declare scan_folder=
declare scan_name=
declare scan_datetime=
declare scan_buildnum=
declare file_prefix="v8o-build-server_scanned-images_verrazzano_"
declare suffix_grype="-grype"
declare suffix_trivy="-trivy"
declare suffix_ocir="-ocir"
declare file_suffix_csvdetails="-details.csv"
declare file_suffix_jsondetails="-details.json"
declare file_suffix_report="-report.out"
declare consolidated="consolidated.csv"

#
# Functions
#

function get_ocir_image_list () {
    ls "${scan_folder}" |
        grep "\-ocir-details.csv" | \
        sed -e "s/${file_prefix}//" \
            -e "s/-ocir-details.csv//" | sort -u
    return 0
}

function get_grype_image_list () {
    ls "${scan_folder}" |
        grep "\-grype-details.csv" | \
        sed -e "s/${file_prefix}//" \
            -e "s/-grype-details.csv//" | sort -u
    return 0
}

function get_trivy_image_list () {
    ls "${scan_folder}" |
        grep "\-trivy-details.csv" | \
        sed -e "s/${file_prefix}//" \
            -e "s/-trivy-details.csv//" | sort -u
    return 0
}

function get_file_path () {
    local _image="$1"
    local _scanner="$2"
    local _prefix="$3"
    local _suffix="$4"
    echo "${scan_folder}/${_prefix}${_image}${_scanner}${_suffix}"
}

function init_cve () {
    if [[ ${CVE_NAMES[${1}]} != "${1}" ]] ; then
        CVE_NAMES[${1}]="${1}"
        CVE_SEVERITIES[${1}]="${2}"
        CVE_DESCRIPTIONS[${1}]="${3}"
        (( CVE_CNT++ ))
        CVE_LIST="${CVE_LIST}${1} "
    fi
    return 0
}

function init_image () {
    if [[ ${IMG_NAMES[${1}]} != "${1}" ]] ; then
        IMG_NAMES[${1}]="${1}"
        (( IMG_CNT++ ))
        IMG_LIST="${IMG_LIST}${1} "
    fi
    return 0
}

# this function depends on there being whitespace
# at both the beginning and the end of the list
# (and between each item in the list).
function item_in_list () {
    local _item="$1"
    local _list="$2"
    case "$_list" in
    *" ${_item} "*) return 0 ;;
    esac
    return 1
}

function add_image_to_cve () {
    local _cve="$1"
    local _image="$2"
    if ! item_in_list "${_image}" "${CVE_IMAGE_LISTS[${_cve}]}" ; then
        if [[ -n "${CVE_IMAGE_LISTS[${_cve}]}" ]] ; then
            CVE_IMAGE_LISTS[${_cve}]="${CVE_IMAGE_LISTS[${_cve}]}${_image} "
        else
            CVE_IMAGE_LISTS[${_cve}]=" ${_image} "
        fi
    fi
}

function add_cve_to_image () {
    local _image="$1"
    local _cve="$2"
    if ! item_in_list "${_cve}" "${IMG_CVE_LISTS[${_image}]}" ; then
        if [[ -n "${IMG_CVE_LISTS[${_image}]}" ]] ; then
            IMG_CVE_LISTS[${_image}]="${IMG_CVE_LISTS[${_image}]}${_cve} "
        else
            IMG_CVE_LISTS[${_image}]=" ${_cve} "
        fi
    fi
}

function process_record () {
    local _image="$1"
    local _sev="$(echo ${2} | awk '{print toupper($0)}')"
    local _cve="$3"
    local _scanner="$(echo $4 | sed s/-//g | awk '{print toupper($0)}')"

    shift 4
    local _cvedesc="desc"

    init_image "${_image}"
    init_cve "${_cve}" "${_sev}" "${_cvedesc}"

    add_image_to_cve "${_cve}" "${_image}"
    add_cve_to_image "${_image}" "${_cve}"

    # Push the record into the CSV for the DB
    echo "${scan_commit},${scan_branch},${scan_name},${scan_datetime},${scan_buildnum},${_scanner},${_cve},${_sev},${_image}" >> ${scan_folder}/${consolidated}

    case "${_sev}" in
    CRITICAL)   (( CVE_CNT_CRITICAL++ ))
                (( IMG_CRITICAL_CVE_CNTS[${_image}]++ ))
                ;;
    HIGH)       (( CVE_CNT_HIGH_CNT++ ))
                (( IMG_HIGH_CVE_CNTS[${_image}]++ ))
                ;;
    *)          (( CVE_CNT_OTHER++ ))
                (( IMG_OTHER_CVE_CNTS[${_image}]++ ))
                ;;
    esac
    return 0
}

function process_csv_details_file () {
    local _image="$1"
    local _prefix="$2"
    local _scannersuffix="$3"
    local _csvdetails=$(get_file_path "${_image}" "${_scannersuffix}" "${_prefix}" "${file_suffix_csvdetails}")
    local _line=
    while read _line
    do
        oIFS="${IFS}"
        IFS=","
        set -- $_line
        IFS="${oIFS}"
        process_record "${_image}" $(echo $1 $2 ${_scannersuffix} | sed 's;";;g')
    done < <(cat "${_csvdetails}")
}

function output_summary_data () {
    echo "CRITICAL CVEs:          ${CVE_CNT_CRITICAL}"
    echo "HIGH CVEs:              ${CVE_CNT_HIGH_CNT}"
    echo "OTHER CVEs:             ${CVE_CNT_OTHER}"
    local -i _foo
    (( _foo=CVE_CNT_CRITICAL+CVE_CNT_HIGH_CNT ))
    echo "TOTAL HIGH/CRITICAL:    $_foo"
    local -i _bar
    (( _bar=CVE_CNT_CRITICAL+CVE_CNT_HIGH_CNT+CVE_CNT_OTHER ))
    echo "TOTAL VULNERABILITIES:  $_bar"
}

function output_cve_data () {
    local _sev="$1"
    local _list=$(echo ${CVE_LIST} | tr ' ' '\n' | sort -u | grep -v "^$")
    local _cve

    echo "------------------------------------------------------------------------------"
    for _cve in $_list
    do
        if [[ ${CVE_SEVERITIES[${_cve}]} == "${_sev}" ]] ; then
            echo "------------------------------------------------------------------------------"
            echo "CVE: ${CVE_NAMES[${_cve}]}    SEVERITY: ${CVE_SEVERITIES[${_cve}]}"
            echo ${CVE_IMAGE_LISTS[${_cve}]} | tr ' ' '\n' | sort -u | grep -v "^$"
            echo "------------------------------------------------------------------------------"
        fi
    done
    echo "------------------------------------------------------------------------------"
}

function output_image_data () {
    local _sev="$1"
    local _list=$(echo ${IMG_LIST} | tr ' ' '\n' | sort -u | grep -v "^$")
    local _img

    echo "------------------------------------------------------------------------------"
    for _img in $_list
    do
        echo "------------------------------------------------------------------------------"
        echo "IMG: ${IMG_NAMES[${_img}]}    CRITICAL: ${IMG_CRITICAL_CVE_CNTS[${_img}]}  HIGH:  ${IMG_HIGH_CVE_CNTS[${_img}]}  OTHER:  ${IMG_OTHER_CVE_CNTS[${_img}]}"
        echo ${IMG_CVE_LISTS[${_img}]} | tr ' ' '\n' | sort -u | grep -v "^$"
        echo "------------------------------------------------------------------------------"
    done
    echo "------------------------------------------------------------------------------"
}

function process_files() {
    local _img
    for _img in $(get_ocir_image_list)
    do
        process_csv_details_file "${_img}" "" "${suffix_ocir}"
    done

    for _img in $(get_grype_image_list)
    do
        process_csv_details_file "${_img}" "" "${suffix_grype}"
    done

    for _img in $(get_trivy_image_list)
    do
        process_csv_details_file "${_img}" "" "${suffix_trivy}"
    done
}

function generate_tables () {
    output_summary_data > ${scan_folder}/consolidated-report.out
    echo >> ${scan_folder}/consolidated-report.out
    output_cve_data CRITICAL >> ${scan_folder}/consolidated-report.out
    output_cve_data HIGH >> ${scan_folder}/consolidated-report.out
    echo >> ${scan_folder}/consolidated-report.out
    output_image_data >> ${scan_folder}/consolidated-report.out
}

#
# Main
#

declare USAGE="USAGE: $0 <scan_files_folder> <scan_commit> <scan_branch> <scan_name> <scan_datetime> <scan_buildnum>"

if [[ $# != 6 || ! -d $1 || -z $2 || -z $3 || -z $4 || -z $5 || -z $6 ]] ; then
    echo "$USAGE"
    exit 1
fi
scan_folder="$1"
scan_commit="$2"
scan_branch="$3"
scan_name="$4"
scan_datetime="$5"
scan_buildnum="$6"

process_files

generate_tables

exit 0
