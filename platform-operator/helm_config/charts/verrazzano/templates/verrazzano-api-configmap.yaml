# Copyright (c) 2021, Oracle and/or its affiliates.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: api-nginx-conf
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ .Values.api.name }}
data:
{{- with .Values.api.proxy }}
  conf.lua: |
    local ingressHost = ngx.req.get_headers()["x-forwarded-host"]
    if not(ingressHost) then
      ingressHost = ngx.req.get_headers()["host"]
    end
    local ingressUri = 'https://'..ingressHost
    local callbackPath = "{{ .OidcCallbackPath }}"
    local logoutCallbackPath = "{{ .OidcLogoutCallbackPath }}"

    local auth = require("auth").config({
        callbackUri = ingressUri..callbackPath,
        logoutCallbackUri = ingressUri..logoutCallbackPath
    })

    -- TODO: is this needed here? Is it better done via/at ingress?
    -- This was previously enabled only for oauth-proxy, but there is similar
    -- code in nginx.conf that was executed only for api-proxy but now executes
    -- for both.
    -- TODO: Rationalize OPTIONS method processing: do this only for OPTIONS requests (not all),
    -- and do it all in one place (here or nginx.conf) for both api-proxy and oauth-proxy traffic
    ngx.header["Access-Control-Allow-Headers"] = "authorization"

    if ngx.req.get_method() == "OPTIONS" then
        ngx.status = 200
        ngx.exit(ngx.HTTP_OK)
    end

    -- determine backend and set backend parameters
    
    local backend = auth.getBackendNameFromIngressHost(ingressHost)
    local backendUrl = auth.getBackendServerUrlFromName(backend)

    auth.info("Processing request for backend '"..ingressHost.."'")

    local authHeader = ngx.req.get_headers()["authorization"]
    local token = nil
    if authHeader then
        if auth.hasCredentialType(authHeader, 'Bearer') then
            token = auth.handleBearerToken(authHeader)
        elseif auth.hasCredentialType(authHeader, 'Basic') then
            token = auth.handleBasicAuth(authHeader)
        end
        if not token then
            auth.info("No recognized credentials in authorization header")
        end
    else
        auth.info("No authorization header found")
        if auth.requestUriMatches(ngx.var.request_uri, callbackPath) then
            -- we initiated authentication via pkce, and OP is delivering the code
            -- will redirect to target url, where token will be found in cookie
            auth.oidcHandleCallback()
        elseif auth.requestUriMatches(ngx.var.request_uri, logoutCallbackPath) then
            -- logout was triggered, and OP (always?) is calling our logout URL
            auth.oidcHandleLogoutCallback()
        end
        -- no token yet, and the request is not progressing an OIDC flow.
        -- check if caller has an existing session with a valid token.
        token = auth.getTokenFromSession()

        -- still no token? redirect to OP to authenticate user
        if not token then
            -- no token, redirect to OP to authenticate
            auth.oidcAuthenticate()
        end
    end

    if not token then
        auth.unauthorized("Not authenticated")
    end

    -- token will be an id token except when console calls api proxy, then it's an access token
    if not auth.isAuthorized(token) then
        auth.forbidden("Not authorized")
    end

    if backend == 'verrazzano' then
        local args = ngx.req.get_uri_args()
        if args.cluster then
            -- returns remote cluster server URL
            backendUrl = auth.handleExternalAPICall(token)
        else
            auth.handleLocalAPICall(token)
        end
    else
        if auth.hasCredentialType(authHeader, 'Bearer') then
            -- clear the auth header if it's a bearer token
            ngx.req.clear_header("Authorization")
        end
        -- set the oidc_user
        ngx.var.oidc_user = auth.usernameFromIdToken(token)
        auth.info("Authorized: oidc_user is "..ngx.var.oidc_user)
    end

    auth.info("Setting backend_server_url to '"..backendUrl.."'")
    ngx.var.backend_server_url = backendUrl
  auth.lua: |
    local me = {}
    local random = require("resty.random")
    local base64 = require("ngx.base64")
    local cjson = require "cjson"
    local jwt = require "resty.jwt"
    local validators = require "resty.jwt-validators"

    local oidcRealm = "{{ .OidcRealm }}"
    local oidcClient = "{{ .PKCEClientID }}"
    local oidcDirectAccessClient = "{{ .PGClientID }}"
    local requiredRole = "{{ .RequiredRealmRole }}"

    local authStateTtlInSec = tonumber("{{ .AuthnStateTTL }}")

    local oidcProviderHost = "{{ .OidcProviderHost }}"
    local oidcProviderHostInCluster = "{{ .OidcProviderHostInCluster }}"

    local oidcProviderUri = nil
    local oidcProviderInClusterUri = nil
    local oidcIssuerUri = nil
    local oidcIssuerUriLocal = nil

    function me.config(opts)
        for key, val in pairs(opts) do
            me[key] = val
        end
        if not cookiekey then
            -- this is a global variable, initialize it exactly once
            cookiekey = me.randomBase64(32)
        end
        local aes = require "resty.aes"
        me.aes256 = aes:new(cookiekey, nil, aes.cipher(256))
        me.initOidcProviderUris()
        return me
    end

    function me.initOidcProviderUris()
        oidcProviderUri = 'https://'..oidcProviderHost..'/auth/realms/'..oidcRealm
        if oidcProviderHostInCluster and oidcProviderHostInCluster ~= "" then
            oidcProviderInClusterUri = 'http://'..oidcProviderHostInCluster..'/auth/realms/'..oidcRealm
        end

        local keycloakURL = me.read_file("/api-config/keycloak-url")
        if keycloakURL and keycloakURL ~= "" then
            me.info("keycloak-url specified in multi-cluster secret, will not use in-cluster oidc provider host.")
            oidcProviderUri = keycloakURL..'/auth/realms/'..oidcRealm
            oidcProviderInClusterUri = nil
        end

        oidcIssuerUri = oidcProviderUri
        oidcIssuerUriLocal = oidcProviderInClusterUri
    end

    function me.log(logLevel, msg, name, value)
        local logObj = {message = msg}
        if name then
            logObj[name] = value
        end
        ngx.log(logLevel,  cjson.encode(logObj))
    end

    function me.logJson(logLevel, msg, err)
        if err then
            me.log(logLevel, msg, 'error', err)
        else
            me.log(logLevel, msg)
        end
    end

    function me.info(msg, obj)
        if obj then
            me.log(ngx.INFO, msg, 'object', obj)
        else
            me.log(ngx.INFO, msg)
        end
    end

    function me.queryParams(req_uri)
         local i = req_uri:find("?")
         if not i then
             i = 0
         else
             i = i + 1
         end
         return ngx.decode_args(req_uri:sub(i), 0)
    end

    function me.query(req_uri, name)
        local i = req_uri:find("&"..name.."=")
        if not i then
        i = req_uri:find("?"..name.."=")
        end
        if not i then
            return nil
        else
            local begin = i+2+name:len()
            local endin = req_uri:find("&", begin)
            if not endin then
                return req_uri:sub(begin)
            end
            return req_uri:sub(begin, endin-1)
        end
    end

    function me.unauthorized(msg, err)
        me.deleteCookie("authn")
        me.logJson(ngx.ERR, msg, err)
        ngx.status = ngx.HTTP_UNAUTHORIZED
        ngx.say("401 Unauthorized")
        ngx.exit(ngx.HTTP_UNAUTHORIZED)
    end

    function me.forbidden(msg, err)
        me.logJson(ngx.ERR, msg, err)
        ngx.status = ngx.HTTP_FORBIDDEN
        ngx.say("403 Forbidden")
        ngx.exit(ngx.HTTP_FORBIDDEN)
    end

    function me.not_found(msg, err)
        me.logJson(ngx.ERR, msg, err)
        ngx.status = ngx.HTTP_NOT_FOUND
        ngx.say("404 Not Found")
        ngx.exit(ngx.HTTP_NOT_FOUND)
    end

    function me.logout()
        local redirectArgs = ngx.encode_args({
            redirect_uri = me.logoutCallbackUri
        })
        local redirectURL = me.oidcProviderUri.."/protocol/openid-connect/logout?"..redirectArgs
        ngx.redirect(redirectURL)
    end

    function me.randomBase64(size)
        local randBytes = random.bytes(size)
        local encoded = base64.encode_base64url(randBytes)
        return string.sub(encoded, 1, size)
    end

    function me.read_file(path)
        local file = io.open(path, "rb")
        if not file then return nil end
        local content = file:read "*a"
        file:close()
        return content
    end

    function me.write_file(path, data)
      local file = io.open(path, "a+")
      if not file then return nil end
      file:write(data)
      file:close()
    end

    function me.hasCredentialType(authHeader, credentialType)
        if authHeader then
            local start, _ = authHeader:find(credentialType)
            if start then
                return true
            end
        end
        return false
    end

    function me.requestUriMatches(requestUri, matchPath)
        if requestUri then
            if requestUri == matchPath then
                return true
            end
            local start, _ = requestUri:find(matchPath..'?')
            if start == 1 then
                return true
            end
        end
        return false
    end

    function me.getFirstPathArgument()
        local first_path_argument = ''
        local uri = ngx.var.uri
        if uri then
            me.info("Request uri " .. uri)
            local start, last = uri:find("%/")
            if start then
                -- me.info("find returned start '"..start.."'")
                uri = uri:sub(start+1)
                -- me.info("path after removing slash " .. uri)
                start, last = uri:find("%/")
                if start then
                    -- me.info("find returned start '"..start.."'")
                    if start == 1 then
                        first_path_argument = ''
                    else
                        first_path_argument = uri:sub(1, start-1)
                    end
                else
                    first_path_argument = uri
                end
            else
                first_path_argument = uri
            end
        end
        me.info("First path argument " .. first_path_argument)
        return first_path_argument
    end

    function me.setUriAfterRemovingApiVersion()
        -- Strip api_version from the uri
        uri = ngx.re.sub(ngx.uri.request_uri, "^/20210501/(.*)", "/$1", "o")
        ngx.req.set_uri(uri)
        me.info("ngx.var.uri "..ngx.var.uri)
    end

    function me.getBackendNameFromIngressHost(ingressHost)
        local backend_name = 'unknown'
        if ingressHost then
            me.info("ingressHost is '"..ingressHost.."'")
            -- Strip domain and/or port
            _, _, backend_name = ingressHost:find("([^.:]+)")
            -- Strip the auth proxy prefix from the extracted backend name if present
            local authproxy_prefix = 'verrazzano-authproxy-'
            if string.sub(backend_name, 1, #authproxy_prefix) == authproxy_prefix then
              backend_name = string.sub(backend_name, #authproxy_prefix+1, -1)
            end
        end
        if backend_name == "verrazzano" then
            local first_path_argument = me.getFirstPathArgument()
            if first_path_argument == "20210501" then
                backend_name = "verrazzano"
            else
                backend_name = "console"
            end
        end
        me.info("returning backend_name '"..backend_name.."'")
        return backend_name
    end

    function me.makeConsoleBackendUrl(port)
        return 'http://verrazzano-console.verrazzano-system.svc.cluster.local'..':'..port
    end

    function me.makeVmiBackendUrl(backend, port)
        return 'http://vmi-system-'..backend..'.verrazzano-system.svc.cluster.local'..':'..port
    end

    function me.getBackendServerUrlFromName(backend)
        local serverUrl = nil
        if backend == 'verrazzano' then
            -- assume we're going to the local server; if not, we'll fix up the url when we handle the remote call
            -- Route request to k8s API
            serverUrl = me.getLocalKubernetesApiUrl()
            -- Remove  api version from request_uri
            me.setUriAfterRemovingApiVersion()
        elseif backend == 'console' then
            -- Route request to console
            serverUrl = me.makeConsoleBackendUrl('8000')
        elseif backend == 'grafana' then
            serverUrl = me.makeVmiBackendUrl(backend, '3000')
        elseif backend == 'prometheus' then
            serverUrl = me.makeVmiBackendUrl(backend, '9090')
        elseif backend == 'kibana' then
            serverUrl = me.makeVmiBackendUrl(backend, '5601')
        elseif backend == 'elasticsearch' then
            serverUrl = me.makeVmiBackendUrl('es-ingest', '9200')
        else
            -- Would a 500 error be more appropriate here?
            me.not_found("Invalid backend name '"..backend.."'")
        end
        return serverUrl
    end

    -- console sends access token by itself (originally obtained via pkce client)
    function me.handleBearerToken(authHeader)
        local found, index = authHeader:find('Bearer')
        if found then
            local token = string.sub(authHeader, index+2)
            if token then
                me.info("Found bearer token in authorization header")
                me.oidcValidateBearerToken(token)
                return token
            else
                me.unauthorized("Missing token in authorization header")
            end
        end
        return nil
    end

    local basicCache = {}

    -- should only be called if some vz process is trying to access vmi using basic auth
    -- tokens are cached locally
    function me.handleBasicAuth(authHeader)
        -- me.info("Checking for basic auth credentials")
        local found, index = authHeader:find('Basic')
        if not found then
            me.info("No basic auth credentials found")
            return nil
        end
        local basicCred = string.sub(authHeader, index+2)
        if not basicCred then
            me.unauthorized("Invalid BasicAuth authorization header")
        end
        me.info("Found basic auth credentials in authorization header")
        local now = ngx.time()
        local basicAuth = basicCache[basicCred]
        if basicAuth and (now < basicAuth.expiry) then
            me.info("Returning cached token")
            return basicAuth.id_token
        end
        local decode, err = ngx.decode_base64(basicCred)
        if err then
            me.unauthorized("Unable to decode BasicAuth authorization header")
        end
        local found = decode:find(':')
        if not found then
            me.unauthorized("Invalid BasicAuth authorization header")
        end
        local u = decode:sub(1, found-1)
        local p = decode:sub(found+1)
        local tokenRes = me.oidcGetTokenWithBasicAuth(u, p)
        if not tokenRes then
            me.unauthorized("Could not get token")
        end
        me.oidcValidateIDTokenPG(tokenRes.id_token)
        local expires_in = tonumber(tokenRes.expires_in)
        for key, val in pairs(basicCache) do
            if val.expiry and now > val.expiry then
                basicCache[key] = nil
            end
        end
        basicCache[basicCred] = {
            -- access_token = tokenRes.access_token,
            id_token = tokenRes.id_token,
            expiry = now + expires_in
        }
        return tokenRes.id_token
    end

    function me.getOidcProviderUri()
        if oidcProviderUri and oidcProviderUri ~= "" then
            return oidcProviderUri
        else
            return oidcProviderInClusterUri
        end
    end

    function me.getLocalOidcProviderUri()
        if oidcProviderInClusterUri and oidcProviderInClusterUri ~= "" then
            return oidcProviderInClusterUri
        else
            return oidcProviderUri
        end
    end

    function me.getOidcTokenUri()
        return me.getLocalOidcProviderUri().."/protocol/openid-connect/token"
    end

    function me.getOidcCertsUri()
        return me.getLocalOidcProviderUri()..'/protocol/openid-connect/certs'
    end

    function me.getOidcAuthUri()
        return me.getOidcProviderUri()..'/protocol/openid-connect/auth'
    end

    function me.oidcAuthenticate()
        me.info("Authenticating user")
        local sha256 = (require 'resty.sha256'):new()
        -- code verifier must be between 43 and 128 characters
        local codeVerifier = me.randomBase64(56)
        sha256:update(codeVerifier)
        local codeChallenge = base64.encode_base64url(sha256:final())
        local state = me.randomBase64(32)
        local nonce = me.randomBase64(32)
        local stateData = {
            state = state,
            request_uri = ngx.var.request_uri,
            code_verifier = codeVerifier,
            code_challenge = codeChallenge,
            nonce = nonce
        }
        local redirectArgs = ngx.encode_args({
            client_id = oidcClient,
            response_type = 'code',
            scope = 'openid',
            code_challenge_method = 'S256',
            code_challenge = codeChallenge,
            state = state,
            nonce = nonce,
            redirect_uri = me.callbackUri
        })
        local redirectURL = me.getOidcAuthUri()..'?'..redirectArgs
        me.setCookie("state", stateData, authStateTtlInSec)
        ngx.header["Cache-Control"] = "no-cache, no-store, max-age=0"
        ngx.redirect(redirectURL)
    end

    function me.oidcHandleCallback()
        me.info("Handle authentication callback")
        local queryParams = me.queryParams(ngx.var.request_uri)
        local state = queryParams.state
        local code = queryParams.code
        local nonce = queryParams.nonce
        local cookie = me.readCookie("state")
        if not cookie then
            me.unauthorized("Missing state cookie")
        end
        me.deleteCookie("state")
        local stateCk = cookie.state
        -- local nonceCk = cookie.nonce
        local request_uri = cookie.request_uri

        if (state == nil) or (stateCk == nil) then
            me.unauthorized("Missing callback state")
        else
            if state ~= stateCk then
                me.unauthorized("Invalid callback state")
            end
            if not cookie.code_verifier then
                me.unauthorized("Invalid code_verifier")
            end
            local tokenRes = me.oidcGetTokenWithCode(code, cookie.code_verifier, me.callbackUri)
            if tokenRes then
                me.oidcValidateIDTokenPKCE(tokenRes.id_token)
                me.tokenToCookie(tokenRes)
                ngx.redirect(request_uri)
            end
            me.unauthorized("Failed to obtain token with code")
        end
    end

    function me.oidcHandleLogoutCallback()
        me.deleteCookie("authn")
        me.unauthorized("User logged out")
    end

    function me.oidcTokenRequest(formArgs)
        me.info("Requesting token from OP")
        local tokenUri = me.getOidcTokenUri()
        local http = require "resty.http"
        local httpc = http.new()
        local res, err = httpc:request_uri(tokenUri, {
            method = "POST",
            body = ngx.encode_args(formArgs),
            headers = {
                ["Content-Type"] = "application/x-www-form-urlencoded",
            }
        })
        -- ,keepalive_timeout = 60000,
        -- keepalive_pool = 10
        local tokenRes = cjson.decode(res.body)
        if tokenRes.error or tokenRes.error_description then
            me.info("Error requesting token")
            me.unauthorized(tokenRes.error_description)
        end
        return tokenRes
    end

    function me.oidcGetTokenWithBasicAuth(u, p)
        return me.oidcTokenRequest({
                        grant_type = 'password',
                        scope = 'openid',
                        client_id = oidcDirectAccessClient,
                        password = p,
                        username = u
                    })
    end

    function me.oidcGetTokenWithCode(code, verifier, callbackUri)
        return me.oidcTokenRequest({
                        grant_type = 'authorization_code',
                        client_id = oidcClient,
                        code = code,
                        code_verifier = verifier,
                        redirect_uri = callbackUri
                    })
    end

    function me.oidcRefreshToken(rft, callbackUri)
        return me.oidcTokenRequest({
                        grant_type = 'refresh_token',
                        client_id = oidcClient,
                        refresh_token = rft,
                        redirect_uri = callbackUri
                    })
    end

    function me.oidcValidateBearerToken(token)
        -- console sends access tokens obtained via PKCE client
        -- test code sends ID tokens obtained from the PG client
        -- need to accept either type in Authorization header (for now)
        local claim_spec = {
            typ = validators.equals_any_of({ "Bearer", "ID" }),
            iss = validators.equals( oidcIssuerUri ),
            azp = validators.equals_any_of({ oidcClient, oidcDirectAccessClient })
        }
        me.oidcValidateTokenWithClaims(token, claim_spec)
    end

    function me.oidcValidateIDTokenPKCE(token)
        me.oidcValidateToken(token, "ID", oidcIssuerUri, oidcClient)
    end

    function me.oidcValidateIDTokenPG(token)
        if not oidcIssuerUriLocal then
            me.oidcValidateToken(token, "ID", oidcIssuerUri, oidcDirectAccessClient)
        else
            me.oidcValidateToken(token, "ID", oidcIssuerUriLocal, oidcDirectAccessClient)
        end
    end

    function me.oidcValidateToken(token, expectedType, expectedIssuer, clientName)
        if not token or token == "" then
            me.unauthorized("Nil or empty token")
        end
        if not expectedType then
            me.unauthorized("Nil or empty expectedType")
        end
        if not expectedIssuer then
            me.unauthorized("Nil or empty expectedIssuer")
        end
        if not clientName then
            me.unauthorized("Nil or empty clientName")
        end
        local claim_spec = {
            typ = validators.equals( expectedType ),
            iss = validators.equals( expectedIssuer ),
            azp = validators.equals( clientName )
        }
        me.oidcValidateTokenWithClaims(token, claim_spec)
    end

    function me.oidcValidateTokenWithClaims(token, claim_spec)
        me.info("Validating JWT token")
        local default_claim_spec = {
            iat = validators.is_not_before(),
            exp = validators.is_not_expired(),
            aud = validators.required()
        }
        -- passing verify a function to retrieve key didn't seem to work, so doing load then verify
        local jwt_obj = jwt:load_jwt(token)
        if (not jwt_obj) or (not jwt_obj.header) or (not jwt_obj.header.kid) then
            me.unauthorized("Failed to load token or no kid")
        end
        local publicKey = me.publicKey(jwt_obj.header.kid)
        if not publicKey then
            me.unauthorized("No public key found")
        end
        -- me.info("TOKEN: iss is "..jwt_obj.payload.iss)
        -- me.info("TOKEN: oidcIssuerUri is"..oidcIssuerUri)
        local verified = jwt:verify_jwt_obj(publicKey, jwt_obj, default_claim_spec, claim_spec)
        if not verified or (tostring(jwt_obj.valid) == "false" or tostring(jwt_obj.verified) == "false") then
            me.unauthorized("Failed to validate token", jwt_obj.reason)
        end
    end

    function me.isAuthorized(idToken)
        me.info("Checking for required role '"..requiredRole.."'")
        local id_token = jwt:load_jwt(idToken)
        if id_token and id_token.payload and id_token.payload.realm_access and id_token.payload.realm_access.roles then
            for _, role in ipairs(id_token.payload.realm_access.roles) do
                if role == requiredRole then
                    return true
                end
            end
        end
        return false
    end

    function me.usernameFromIdToken(idToken)
        -- me.info("usernameFromIdToken: fetching preferred_username")
        local id_token = jwt:load_jwt(idToken)
        if id_token and id_token.payload and id_token.payload.preferred_username then
            return id_token.payload.preferred_username
        end
        me.unauthorized("usernameFromIdToken: preferred_username not found")
    end

    -- returns id token, token is refreshed first, if necessary.
    -- nil token returned if no session or the refresh token has expired
    function me.getTokenFromSession()
        me.info("Check for existing session")
        local ck = me.readCookie("authn")
        if ck then
            local rft = ck.rt
            local now = ngx.time()
            local expiry = tonumber(ck.expiry)
            local refresh_expiry = tonumber(ck.refresh_expiry)
            if now < expiry then
                return ck.it
            else
                if now < refresh_expiry then
                    local tokenRes = me.oidcRefreshToken(rft, me.callbackUri)
                    if tokenRes then
                        me.oidcValidateIDTokenPKCE(tokenRes.id_token)
                        me.tokenToCookie(tokenRes)
                        me.info("token refreshed",  tokenRes)
                        return tokenRes.idt
                    end
                end
            end
        end
        -- no valid token found, delete cookie
        me.deleteCookie("authn")
        return nil
    end

    function me.tokenToCookie(tokenRes)
        -- Do we need access_token? too big > 4k
        local cookiePairs = {
            rt = tokenRes.refresh_token,
            -- at = tokenRes.access_token,
            it = tokenRes.id_token
        }
        local id_token = jwt:load_jwt(tokenRes.id_token)
        local expires_in = tonumber(tokenRes.expires_in)
        local refresh_expires_in = tonumber(tokenRes.refresh_expires_in)
        local now = ngx.time()
        local issued_at = now
        if id_token and id_token.payload then
            if id_token.payload.iat then
                issued_at = tonumber(id_token.payload.iat)
            else
                if id_token.payload.auth_time then
                    issued_at = tonumber(id_token.payload.auth_time)
                end
            end
            -- if id_token.payload.email then
            --     cookiePairs.email = id_token.payload.email
            -- end
        end
        local skew = now - issued_at
        -- Expire 30 secs before actual time
        local expiryBuffer = 30
        cookiePairs.expiry = now + expires_in - skew - expiryBuffer
        cookiePairs.refresh_expiry = now + refresh_expires_in - skew - expiryBuffer
        me.setCookie("authn", cookiePairs, tonumber(tokenRes.refresh_expires_in)-expiryBuffer)
    end

    function me.setCookie(ckName, cookiePairs, expiresInSec)
        local expires = ngx.cookie_time(ngx.time() + expiresInSec)
        local attributes = "; Path=/; Secure; HttpOnly; Expires="..expires
        local encrypted = me.aes256:encrypt(cjson.encode(cookiePairs))
        local cookie = base64.encode_base64url(encrypted)
        ngx.header["Set-Cookie"] = ckName..'='..cookie..attributes
    end

    function me.deleteCookie(ckName)
        ngx.header["Set-Cookie"] = ckName..'=; Path=/; Secure; HttpOnly; Expires=Thu, 01 Jan 1970 00:00:00 UTC;'
    end

    function me.readCookie(ckName)
        if not ckName then
            return nil
        end
        local cookie, err = require("resty.cookie"):new()
        local ck = cookie:get(ckName)
        if not ck then
            me.info("Cookie not found")
            return nil
        end
        local decoded = base64.decode_base64url(ck)
        if not decoded then
            me.info("Cookie not decoded")
            return nil
        end
        local json = me.aes256:decrypt(decoded)
        if not json then
            me.info("Cookie not decrypted")
            return nil
        end
        return cjson.decode(json)
    end

    local certs = {}

    function me.realmCerts(kid)
        local pk = certs[kid]
        if pk then
            return pk
        end
        local http = require "resty.http"
        local httpc = http.new()
        local certsUri = me.getOidcCertsUri()
        local res, err = httpc:request_uri(certsUri)
        if err then
            me.logJson(ngx.WARN, "Could not retrieve certs", err)
            return nil
        end
        local data = cjson.decode(res.body)
        if not (data.keys) then
            me.info("No keys found")
            return nil
        end
        for i, key in pairs(data.keys) do
            if key.kid and key.x5c then
                certs[key.kid] = key.x5c
            end
        end
        return certs[kid]
    end

    function me.publicKey(kid)
        local x5c = me.realmCerts(kid)
        if (not x5c) or (#x5c == 0) then
            return nil
        end
        return "-----BEGIN CERTIFICATE-----\n"..x5c[1].."\n-----END CERTIFICATE-----"
    end

    -- api-proxy - methods for handling multi-cluster k8s API requests

    local vzApiHost = os.getenv("VZ_API_HOST")
    local vzApiVersion = os.getenv("VZ_API_VERSION")

    function me.getServiceAccountToken()
      me.logJson(ngx.INFO, "Read service account token.")
      local serviceAccountToken = me.read_file("/run/secrets/kubernetes.io/serviceaccount/token")
      if not (serviceAccountToken) then
        me.unauthorized("No service account token present in pod.")
      end
      return serviceAccountToken
    end

    function me.getLocalKubernetesApiUrl()
      local host = os.getenv("KUBERNETES_SERVICE_HOST")
      local port = os.getenv("KUBERNETES_SERVICE_PORT")
      local serverUrl = "https://" .. host .. ":" .. port
      return serverUrl
    end

    function me.getK8SResource(resourcePath)
      local http = require "resty.http"
      local httpc = http.new()
      local res, err = httpc:request_uri("https://" .. vzApiHost .. "/" .. vzApiVersion .. resourcePath,{
          headers = {
              ["Authorization"] = ngx.req.get_headers()["authorization"],
          },
      })
      if err then
        me.unauthorized("Error accessing vz api", err)
      end
      if not(res) or not (res.body) then
        me.unauthorized("Unable to get k8s resource.")
      end
      local cjson = require "cjson"
      return cjson.decode(res.body)
    end

    function me.getVMC(cluster)
      return me.getK8SResource("/apis/clusters.verrazzano.io/v1alpha1/namespaces/verrazzano-mc/verrazzanomanagedclusters/" .. cluster)
    end

    function me.getSecret(secret)
      return me.getK8SResource("/api/v1/namespaces/verrazzano-mc/secrets/" .. secret)
    end

    function me.handleLocalAPICall(token)
        me.logJson(ngx.INFO, "Read service account token and set auth header.")
        local serviceAccountToken = me.getServiceAccountToken()
        ngx.req.set_header("Authorization", "Bearer " .. serviceAccountToken)
        me.logJson(ngx.INFO, "Set groups and users")
        local jwt_obj = jwt:load_jwt(token)
        if ( jwt_obj.payload and jwt_obj.payload.groups) then
            me.logJson(ngx.INFO, ("Adding groups " .. cjson.encode(jwt_obj.payload.groups)))
            ngx.req.set_header("Impersonate-Group", jwt_obj.payload.groups)
        end
        if ( jwt_obj.payload and jwt_obj.payload.sub) then
            me.logJson(ngx.INFO, ("Adding sub " .. jwt_obj.payload.sub))
            ngx.req.set_header("Impersonate-User", jwt_obj.payload.sub)
        end
    end

    function me.handleExternalAPICall(token)
        local args = ngx.req.get_uri_args()
        me.logJson(ngx.INFO, "Read vmc resource for " .. args.cluster)
        local vmc = me.getVMC(args.cluster)
        if not(vmc) or not(vmc.status) or not(vmc.status.apiUrl) then
            me.unauthorized("Unable to fetch vmc api url for vmc " .. args.cluster)
        end

        ngx.req.set_uri_args(args)
        local serverUrl = vmc.status.apiUrl .. "/" .. vzApiVersion .. ngx.var.uri

        -- propagate the user's token as a bearer token, remote cluster won't have access to the session.
        ngx.req.set_header("Authorization", "Bearer "..token)

        -- To access managed cluster api server on self signed certificates, the admin cluster api server needs ca certificates for the managed cluster.
        -- A secret is created in admin cluster during multi cluster setup that contains the ca certificate.
        -- Here we read the name of that secret from vmc spec and retrieve the secret from cluster and read the cacrt field.
        -- The value of cacrt field is decoded to get the ca certificate and is appended to file being pointed to by the proxy_ssl_trusted_certificate variable.

        if not(vmc.spec) or not(vmc.spec.caSecret) then
            me.logJson(ngx.INFO, "ca secret name not present on vmc resource, assuming well known CA certificate exists for managed cluster " .. args.cluster)
            do return end
        end

        local secret = me.getSecret(vmc.spec.caSecret)
        if not(secret) or not(secret.data) or not(secret.data["cacrt"]) or secret.data["cacrt"] == "" then
            me.logJson(ngx.INFO, "Unable to fetch ca secret for vmc, assuming well known CA certificate exists for managed cluster " .. args.cluster)
            do return end
        end

        local decodedSecret = ngx.decode_base64(secret.data["cacrt"])
        if not(decodedSecret) then
            me.unauthorized("Unable to decode ca secret for vmc to access api server of managed cluster " .. args.cluster)
        end

        args.cluster = nil
        local startIndex, _ = string.find(decodedSecret, "-----BEGIN CERTIFICATE-----")
        local _, endIndex = string.find(decodedSecret, "-----END CERTIFICATE-----")
        if startIndex >= 1 and endIndex > startIndex then
            me.write_file("/etc/nginx/upstream.pem", string.sub(decodedSecret, startIndex, endIndex))
        end

        return serverUrl
    end

    return me
  nginx.conf: |
    #user  nobody;
    worker_processes  1;

    error_log  logs/error.log info;
    pid        logs/nginx.pid;

    env KUBERNETES_SERVICE_HOST;
    env KUBERNETES_SERVICE_PORT;
    env VZ_API_HOST;
    env VZ_API_VERSION;

    events {
        worker_connections  1024;
    }

    http {
        include       mime.types;
        default_type  application/octet-stream;

        #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
        #                  '$status $body_bytes_sent "$http_referer" '
        #                  '"$http_user_agent" "$http_x_forwarded_for"';

        sendfile        on;
        #tcp_nopush     on;

        # Posts from Fluentd can require more than the default 1m max body size
        client_max_body_size 65m;

        #keepalive_timeout  0;
        keepalive_timeout  65;

        #gzip  on;

        lua_package_path '/usr/local/share/lua/5.1/?.lua;;';
        lua_package_cpath '/usr/local/lib/lua/5.1/?.so;;';
        resolver _NAMESERVER_;

        # cache for discovery metadata documents
        lua_shared_dict discovery 1m;
        #  cache for JWKs
        lua_shared_dict jwks 1m;

        #access_log  logs/host.access.log  main;
        server_tokens off;

        #charset koi8-r;
        expires           0;
        #add_header        Cache-Control private;
        add_header        Cache-Control no-store always;

        root     /opt/nginx/html;

        proxy_http_version 1.1;

        # verrazzano api and console
        server {
            listen       8775;
            server_name  verrazzano-proxy;

            # api
            location / {
                lua_ssl_verify_depth 2;
                lua_ssl_trusted_certificate /etc/nginx/upstream.pem;
                # oauth-proxy ssl certs location: lua_ssl_trusted_certificate /etc/nginx/all-ca-certs.pem;

                set $oidc_user "";
                set $backend_server_url "";
                rewrite_by_lua_file /etc/nginx/conf.lua;
                proxy_set_header X-WEBAUTH-USER $oidc_user;
                proxy_pass $backend_server_url;
                proxy_ssl_trusted_certificate /etc/nginx/upstream.pem;
                # this should only happen for origin requests - move to conf.lua?
                header_filter_by_lua_block {
                    local h, _ = ngx.req.get_headers()["origin"]
                    if h and h ~= "*" and  h ~= "null" then
                        ngx.header["Access-Control-Allow-Origin"] = h
                    end
                    ngx.header["Access-Control-Allow-Headers"] = "authorization, content-type"
                }
            }
        }
    }
  startup.sh: |
    #!/bin/bash
    startupDir=$(dirname $0)
    cd $startupDir
    cp $startupDir/nginx.conf /etc/nginx/nginx.conf
    cp $startupDir/auth.lua /etc/nginx/auth.lua
    cp $startupDir/conf.lua /etc/nginx/conf.lua
    nameserver=$(grep -i nameserver /etc/resolv.conf | awk '{split($0,line," "); print line[2]}')
    sed -i -e "s|_NAMESERVER_|${nameserver}|g" /etc/nginx/nginx.conf

    mkdir -p /etc/nginx/logs
    touch /etc/nginx/logs/error.log

    export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH

    # api-proxy
    cat /etc/ssl/certs/ca-bundle.crt > /etc/nginx/upstream.pem

    # oidc-proxy
    # Create a pem file that contains all well known ca certs plus
    # the ca-bundle from the managed cluster registration secret.
    # It is valid for ca-bundle to be empty.
    cat /etc/ssl/certs/ca-bundle.crt > /etc/nginx/all-ca-certs.pem
    cat /secret/ca-bundle >> /etc/nginx/all-ca-certs.pem

    /usr/local/nginx/sbin/nginx -c /etc/nginx/nginx.conf -p /etc/nginx -t
    /usr/local/nginx/sbin/nginx -c /etc/nginx/nginx.conf -p /etc/nginx

    while [ $? -ne 0 ]; do
        sleep 20
        echo "retry nginx startup ..."
        /usr/local/nginx/sbin/nginx -c /etc/nginx/nginx.conf -p /etc/nginx
    done

    sh -c "$startupDir/reload.sh &"

    tail -f /etc/nginx/logs/error.log
  reload.sh: |
    #!/bin/bash

    adminCABundleMD5=""
    defaultCABundleMD5=""
    upstreamCACertFile="/etc/nginx/upstream.pem"
    localClusterCACertFile="/api-config/default-ca-bundle"
    adminClusterCACertFile="/api-config/admin-ca-bundle"
    defaultCACertFile="/etc/ssl/certs/ca-bundle.crt"
    tmpUpstreamCACertFile="/tmp/upstream.pem"
    maxSizeTrustedCertsFileDefault=$(echo $((10*1024*1024)))
    if [[ ! -z "${MAX_SIZE_TRUSTED_CERTS_FILE}" ]]; then
        maxSizeTrustedCertsFileDefault=${MAX_SIZE_TRUSTED_CERTS_FILE}
    fi

    function reload() {
        nginx -t -p /etc/nginx
        if [ $? -eq 0 ]
        then
            echo "Detected Nginx Configuration Change"
            echo "Executing: nginx -s reload -p /etc/nginx"
            nginx -s reload -p /etc/nginx
        fi
    }

    function reset_md5() {
        adminCABundleMD5=""
        defaultCABundleMD5=""
    }

    function local_cert_config() {
        if [[ -s $localClusterCACertFile ]]; then
            md5Hash=$(md5sum "$localClusterCACertFile")
            if [ "$defaultCABundleMD5" != "$md5Hash" ] ; then
                echo "Adding local CA cert to $upstreamCACertFile"
                cat $upstreamCACertFile > $tmpUpstreamCACertFile
                cat $localClusterCACertFile > $upstreamCACertFile
                cat $tmpUpstreamCACertFile >> $upstreamCACertFile
                rm -rf $tmpUpstreamCACertFile
                defaultCABundleMD5="$md5Hash"
                reload
            fi
        fi
    }

    function admin_cluster_cert_config() {
        if [[ -s $adminClusterCACertFile ]]; then
            md5Hash=$(md5sum "$adminClusterCACertFile")
            if [ "$adminCABundleMD5" != "$md5Hash" ] ; then
                echo "Adding admin cluster CA cert to $upstreamCACertFile"
                cat $upstreamCACertFile > $tmpUpstreamCACertFile
                cat $adminClusterCACertFile > $upstreamCACertFile
                cat $tmpUpstreamCACertFile >> $upstreamCACertFile
                rm -rf $tmpUpstreamCACertFile
                adminCABundleMD5="$md5Hash"
                reload
            fi
        else
            if [ "$adminCABundleMD5" != "" ] ; then
                reset_md5
                local_cert_config
            fi
        fi
    }

    function default_cert_config() {
        cat $defaultCACertFile > $upstreamCACertFile
    }

    while true
    do
        trustedCertsFileSize=$(wc -c < $upstreamCACertFile)
        if [ $trustedCertsFileSize -ge $maxSizeTrustedCertsFileDefault ] ; then
            echo "$upstreamCACertFile file size greater than  $maxSizeTrustedCertsFileDefault, resetting.."
            reset_md5
            default_cert_config
        fi

        local_cert_config
        admin_cluster_cert_config
        sleep .1
    done
{{ end }}
