// Copyright (c) 2021, Oracle and/or its affiliates.
// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/verrazzano/verrazzano/platform-operator/controllers/clusters (interfaces: RequestSender)

// Package mocks is a generated GoMock package.
package mocks

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRequestSender is a mock of RequestSender interface.
type MockRequestSender struct {
	ctrl     *gomock.Controller
	recorder *MockRequestSenderMockRecorder
}

// MockRequestSenderMockRecorder is the mock recorder for MockRequestSender.
type MockRequestSenderMockRecorder struct {
	mock *MockRequestSender
}

// NewMockRequestSender creates a new mock instance.
func NewMockRequestSender(ctrl *gomock.Controller) *MockRequestSender {
	mock := &MockRequestSender{ctrl: ctrl}
	mock.recorder = &MockRequestSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRequestSender) EXPECT() *MockRequestSenderMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockRequestSender) Do(arg0 *http.Client, arg1 *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", arg0, arg1)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockRequestSenderMockRecorder) Do(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockRequestSender)(nil).Do), arg0, arg1)
}
