// Copyright (c) 2021, Oracle and/or its affiliates.
// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.

// Code generated by MockGen. DO NOT EDIT.
// Source: controllers/verrazzano/component/spi/component.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	v1alpha1 "github.com/verrazzano/verrazzano/platform-operator/apis/verrazzano/v1alpha1"
	spi "github.com/verrazzano/verrazzano/platform-operator/controllers/verrazzano/component/spi"
	zap "go.uber.org/zap"
	types "k8s.io/apimachinery/pkg/types"
	reflect "reflect"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockComponentContext is a mock of ComponentContext interface
type MockComponentContext struct {
	ctrl     *gomock.Controller
	recorder *MockComponentContextMockRecorder
}

// MockComponentContextMockRecorder is the mock recorder for MockComponentContext
type MockComponentContextMockRecorder struct {
	mock *MockComponentContext
}

// NewMockComponentContext creates a new mock instance
func NewMockComponentContext(ctrl *gomock.Controller) *MockComponentContext {
	mock := &MockComponentContext{ctrl: ctrl}
	mock.recorder = &MockComponentContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockComponentContext) EXPECT() *MockComponentContextMockRecorder {
	return m.recorder
}

// Log mocks base method
func (m *MockComponentContext) Log() *zap.SugaredLogger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Log")
	ret0, _ := ret[0].(*zap.SugaredLogger)
	return ret0
}

// Log indicates an expected call of Log
func (mr *MockComponentContextMockRecorder) Log() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Log", reflect.TypeOf((*MockComponentContext)(nil).Log))
}

// Client mocks base method
func (m *MockComponentContext) Client() client.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Client")
	ret0, _ := ret[0].(client.Client)
	return ret0
}

// Client indicates an expected call of Client
func (mr *MockComponentContextMockRecorder) Client() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Client", reflect.TypeOf((*MockComponentContext)(nil).Client))
}

// ActualCR mocks base method
func (m *MockComponentContext) ActualCR() *v1alpha1.Verrazzano {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActualCR")
	ret0, _ := ret[0].(*v1alpha1.Verrazzano)
	return ret0
}

// ActualCR indicates an expected call of ActualCR
func (mr *MockComponentContextMockRecorder) ActualCR() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActualCR", reflect.TypeOf((*MockComponentContext)(nil).ActualCR))
}

// EffectiveCR mocks base method
func (m *MockComponentContext) EffectiveCR() *v1alpha1.Verrazzano {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EffectiveCR")
	ret0, _ := ret[0].(*v1alpha1.Verrazzano)
	return ret0
}

// EffectiveCR indicates an expected call of EffectiveCR
func (mr *MockComponentContextMockRecorder) EffectiveCR() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EffectiveCR", reflect.TypeOf((*MockComponentContext)(nil).EffectiveCR))
}

// IsDryRun mocks base method
func (m *MockComponentContext) IsDryRun() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDryRun")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsDryRun indicates an expected call of IsDryRun
func (mr *MockComponentContextMockRecorder) IsDryRun() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDryRun", reflect.TypeOf((*MockComponentContext)(nil).IsDryRun))
}

// Copy mocks base method
func (m *MockComponentContext) Copy() spi.ComponentContext {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Copy")
	ret0, _ := ret[0].(spi.ComponentContext)
	return ret0
}

// Copy indicates an expected call of Copy
func (mr *MockComponentContextMockRecorder) Copy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Copy", reflect.TypeOf((*MockComponentContext)(nil).Copy))
}

// For mocks base method
func (m *MockComponentContext) For(comp string) spi.ComponentContext {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "For", comp)
	ret0, _ := ret[0].(spi.ComponentContext)
	return ret0
}

// For indicates an expected call of For
func (mr *MockComponentContextMockRecorder) For(comp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "For", reflect.TypeOf((*MockComponentContext)(nil).For), comp)
}

// Operation mocks base method
func (m *MockComponentContext) Operation(op string) spi.ComponentContext {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Operation", op)
	ret0, _ := ret[0].(spi.ComponentContext)
	return ret0
}

// Operation indicates an expected call of Operation
func (mr *MockComponentContextMockRecorder) Operation(op interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Operation", reflect.TypeOf((*MockComponentContext)(nil).Operation), op)
}

// GetOperation mocks base method
func (m *MockComponentContext) GetOperation() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperation")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetOperation indicates an expected call of GetOperation
func (mr *MockComponentContextMockRecorder) GetOperation() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperation", reflect.TypeOf((*MockComponentContext)(nil).GetOperation))
}

// GetComponent mocks base method
func (m *MockComponentContext) GetComponent() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComponent")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetComponent indicates an expected call of GetComponent
func (mr *MockComponentContextMockRecorder) GetComponent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComponent", reflect.TypeOf((*MockComponentContext)(nil).GetComponent))
}

// MockComponentInfo is a mock of ComponentInfo interface
type MockComponentInfo struct {
	ctrl     *gomock.Controller
	recorder *MockComponentInfoMockRecorder
}

// MockComponentInfoMockRecorder is the mock recorder for MockComponentInfo
type MockComponentInfoMockRecorder struct {
	mock *MockComponentInfo
}

// NewMockComponentInfo creates a new mock instance
func NewMockComponentInfo(ctrl *gomock.Controller) *MockComponentInfo {
	mock := &MockComponentInfo{ctrl: ctrl}
	mock.recorder = &MockComponentInfoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockComponentInfo) EXPECT() *MockComponentInfoMockRecorder {
	return m.recorder
}

// Name mocks base method
func (m *MockComponentInfo) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (mr *MockComponentInfoMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockComponentInfo)(nil).Name))
}

// GetDependencies mocks base method
func (m *MockComponentInfo) GetDependencies() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDependencies")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetDependencies indicates an expected call of GetDependencies
func (mr *MockComponentInfoMockRecorder) GetDependencies() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDependencies", reflect.TypeOf((*MockComponentInfo)(nil).GetDependencies))
}

// IsReady mocks base method
func (m *MockComponentInfo) IsReady(context spi.ComponentContext) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsReady", context)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsReady indicates an expected call of IsReady
func (mr *MockComponentInfoMockRecorder) IsReady(context interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsReady", reflect.TypeOf((*MockComponentInfo)(nil).IsReady), context)
}

// IsEnabled mocks base method
func (m *MockComponentInfo) IsEnabled(context spi.ComponentContext) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsEnabled", context)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsEnabled indicates an expected call of IsEnabled
func (mr *MockComponentInfoMockRecorder) IsEnabled(context interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsEnabled", reflect.TypeOf((*MockComponentInfo)(nil).IsEnabled), context)
}

// GetMinVerrazzanoVersion mocks base method
func (m *MockComponentInfo) GetMinVerrazzanoVersion() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMinVerrazzanoVersion")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetMinVerrazzanoVersion indicates an expected call of GetMinVerrazzanoVersion
func (mr *MockComponentInfoMockRecorder) GetMinVerrazzanoVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMinVerrazzanoVersion", reflect.TypeOf((*MockComponentInfo)(nil).GetMinVerrazzanoVersion))
}

// GetIngressNames mocks base method
func (m *MockComponentInfo) GetIngressNames(context spi.ComponentContext) []types.NamespacedName {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIngressNames", context)
	ret0, _ := ret[0].([]types.NamespacedName)
	return ret0
}

// GetIngressNames indicates an expected call of GetIngressNames
func (mr *MockComponentInfoMockRecorder) GetIngressNames(context interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIngressNames", reflect.TypeOf((*MockComponentInfo)(nil).GetIngressNames), context)
}

// MockComponentInstaller is a mock of ComponentInstaller interface
type MockComponentInstaller struct {
	ctrl     *gomock.Controller
	recorder *MockComponentInstallerMockRecorder
}

// MockComponentInstallerMockRecorder is the mock recorder for MockComponentInstaller
type MockComponentInstallerMockRecorder struct {
	mock *MockComponentInstaller
}

// NewMockComponentInstaller creates a new mock instance
func NewMockComponentInstaller(ctrl *gomock.Controller) *MockComponentInstaller {
	mock := &MockComponentInstaller{ctrl: ctrl}
	mock.recorder = &MockComponentInstallerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockComponentInstaller) EXPECT() *MockComponentInstallerMockRecorder {
	return m.recorder
}

// IsOperatorInstallSupported mocks base method
func (m *MockComponentInstaller) IsOperatorInstallSupported() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsOperatorInstallSupported")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsOperatorInstallSupported indicates an expected call of IsOperatorInstallSupported
func (mr *MockComponentInstallerMockRecorder) IsOperatorInstallSupported() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsOperatorInstallSupported", reflect.TypeOf((*MockComponentInstaller)(nil).IsOperatorInstallSupported))
}

// IsInstalled mocks base method
func (m *MockComponentInstaller) IsInstalled(context spi.ComponentContext) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsInstalled", context)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsInstalled indicates an expected call of IsInstalled
func (mr *MockComponentInstallerMockRecorder) IsInstalled(context interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsInstalled", reflect.TypeOf((*MockComponentInstaller)(nil).IsInstalled), context)
}

// PreInstall mocks base method
func (m *MockComponentInstaller) PreInstall(context spi.ComponentContext) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PreInstall", context)
	ret0, _ := ret[0].(error)
	return ret0
}

// PreInstall indicates an expected call of PreInstall
func (mr *MockComponentInstallerMockRecorder) PreInstall(context interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreInstall", reflect.TypeOf((*MockComponentInstaller)(nil).PreInstall), context)
}

// Install mocks base method
func (m *MockComponentInstaller) Install(context spi.ComponentContext) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Install", context)
	ret0, _ := ret[0].(error)
	return ret0
}

// Install indicates an expected call of Install
func (mr *MockComponentInstallerMockRecorder) Install(context interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Install", reflect.TypeOf((*MockComponentInstaller)(nil).Install), context)
}

// PostInstall mocks base method
func (m *MockComponentInstaller) PostInstall(context spi.ComponentContext) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostInstall", context)
	ret0, _ := ret[0].(error)
	return ret0
}

// PostInstall indicates an expected call of PostInstall
func (mr *MockComponentInstallerMockRecorder) PostInstall(context interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostInstall", reflect.TypeOf((*MockComponentInstaller)(nil).PostInstall), context)
}

// MockComponentUpgrader is a mock of ComponentUpgrader interface
type MockComponentUpgrader struct {
	ctrl     *gomock.Controller
	recorder *MockComponentUpgraderMockRecorder
}

// MockComponentUpgraderMockRecorder is the mock recorder for MockComponentUpgrader
type MockComponentUpgraderMockRecorder struct {
	mock *MockComponentUpgrader
}

// NewMockComponentUpgrader creates a new mock instance
func NewMockComponentUpgrader(ctrl *gomock.Controller) *MockComponentUpgrader {
	mock := &MockComponentUpgrader{ctrl: ctrl}
	mock.recorder = &MockComponentUpgraderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockComponentUpgrader) EXPECT() *MockComponentUpgraderMockRecorder {
	return m.recorder
}

// PreUpgrade mocks base method
func (m *MockComponentUpgrader) PreUpgrade(context spi.ComponentContext) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PreUpgrade", context)
	ret0, _ := ret[0].(error)
	return ret0
}

// PreUpgrade indicates an expected call of PreUpgrade
func (mr *MockComponentUpgraderMockRecorder) PreUpgrade(context interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreUpgrade", reflect.TypeOf((*MockComponentUpgrader)(nil).PreUpgrade), context)
}

// Upgrade mocks base method
func (m *MockComponentUpgrader) Upgrade(context spi.ComponentContext) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upgrade", context)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upgrade indicates an expected call of Upgrade
func (mr *MockComponentUpgraderMockRecorder) Upgrade(context interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upgrade", reflect.TypeOf((*MockComponentUpgrader)(nil).Upgrade), context)
}

// PostUpgrade mocks base method
func (m *MockComponentUpgrader) PostUpgrade(context spi.ComponentContext) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostUpgrade", context)
	ret0, _ := ret[0].(error)
	return ret0
}

// PostUpgrade indicates an expected call of PostUpgrade
func (mr *MockComponentUpgraderMockRecorder) PostUpgrade(context interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostUpgrade", reflect.TypeOf((*MockComponentUpgrader)(nil).PostUpgrade), context)
}

// MockComponent is a mock of Component interface
type MockComponent struct {
	ctrl     *gomock.Controller
	recorder *MockComponentMockRecorder
}

// MockComponentMockRecorder is the mock recorder for MockComponent
type MockComponentMockRecorder struct {
	mock *MockComponent
}

// NewMockComponent creates a new mock instance
func NewMockComponent(ctrl *gomock.Controller) *MockComponent {
	mock := &MockComponent{ctrl: ctrl}
	mock.recorder = &MockComponentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockComponent) EXPECT() *MockComponentMockRecorder {
	return m.recorder
}

// Name mocks base method
func (m *MockComponent) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (mr *MockComponentMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockComponent)(nil).Name))
}

// GetDependencies mocks base method
func (m *MockComponent) GetDependencies() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDependencies")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetDependencies indicates an expected call of GetDependencies
func (mr *MockComponentMockRecorder) GetDependencies() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDependencies", reflect.TypeOf((*MockComponent)(nil).GetDependencies))
}

// IsReady mocks base method
func (m *MockComponent) IsReady(context spi.ComponentContext) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsReady", context)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsReady indicates an expected call of IsReady
func (mr *MockComponentMockRecorder) IsReady(context interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsReady", reflect.TypeOf((*MockComponent)(nil).IsReady), context)
}

// IsEnabled mocks base method
func (m *MockComponent) IsEnabled(context spi.ComponentContext) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsEnabled", context)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsEnabled indicates an expected call of IsEnabled
func (mr *MockComponentMockRecorder) IsEnabled(context interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsEnabled", reflect.TypeOf((*MockComponent)(nil).IsEnabled), context)
}

// GetMinVerrazzanoVersion mocks base method
func (m *MockComponent) GetMinVerrazzanoVersion() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMinVerrazzanoVersion")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetMinVerrazzanoVersion indicates an expected call of GetMinVerrazzanoVersion
func (mr *MockComponentMockRecorder) GetMinVerrazzanoVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMinVerrazzanoVersion", reflect.TypeOf((*MockComponent)(nil).GetMinVerrazzanoVersion))
}

// GetIngressNames mocks base method
func (m *MockComponent) GetIngressNames(context spi.ComponentContext) []types.NamespacedName {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIngressNames", context)
	ret0, _ := ret[0].([]types.NamespacedName)
	return ret0
}

// GetIngressNames indicates an expected call of GetIngressNames
func (mr *MockComponentMockRecorder) GetIngressNames(context interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIngressNames", reflect.TypeOf((*MockComponent)(nil).GetIngressNames), context)
}

// IsOperatorInstallSupported mocks base method
func (m *MockComponent) IsOperatorInstallSupported() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsOperatorInstallSupported")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsOperatorInstallSupported indicates an expected call of IsOperatorInstallSupported
func (mr *MockComponentMockRecorder) IsOperatorInstallSupported() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsOperatorInstallSupported", reflect.TypeOf((*MockComponent)(nil).IsOperatorInstallSupported))
}

// IsInstalled mocks base method
func (m *MockComponent) IsInstalled(context spi.ComponentContext) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsInstalled", context)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsInstalled indicates an expected call of IsInstalled
func (mr *MockComponentMockRecorder) IsInstalled(context interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsInstalled", reflect.TypeOf((*MockComponent)(nil).IsInstalled), context)
}

// PreInstall mocks base method
func (m *MockComponent) PreInstall(context spi.ComponentContext) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PreInstall", context)
	ret0, _ := ret[0].(error)
	return ret0
}

// PreInstall indicates an expected call of PreInstall
func (mr *MockComponentMockRecorder) PreInstall(context interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreInstall", reflect.TypeOf((*MockComponent)(nil).PreInstall), context)
}

// Install mocks base method
func (m *MockComponent) Install(context spi.ComponentContext) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Install", context)
	ret0, _ := ret[0].(error)
	return ret0
}

// Install indicates an expected call of Install
func (mr *MockComponentMockRecorder) Install(context interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Install", reflect.TypeOf((*MockComponent)(nil).Install), context)
}

// PostInstall mocks base method
func (m *MockComponent) PostInstall(context spi.ComponentContext) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostInstall", context)
	ret0, _ := ret[0].(error)
	return ret0
}

// PostInstall indicates an expected call of PostInstall
func (mr *MockComponentMockRecorder) PostInstall(context interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostInstall", reflect.TypeOf((*MockComponent)(nil).PostInstall), context)
}

// PreUpgrade mocks base method
func (m *MockComponent) PreUpgrade(context spi.ComponentContext) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PreUpgrade", context)
	ret0, _ := ret[0].(error)
	return ret0
}

// PreUpgrade indicates an expected call of PreUpgrade
func (mr *MockComponentMockRecorder) PreUpgrade(context interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreUpgrade", reflect.TypeOf((*MockComponent)(nil).PreUpgrade), context)
}

// Upgrade mocks base method
func (m *MockComponent) Upgrade(context spi.ComponentContext) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upgrade", context)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upgrade indicates an expected call of Upgrade
func (mr *MockComponentMockRecorder) Upgrade(context interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upgrade", reflect.TypeOf((*MockComponent)(nil).Upgrade), context)
}

// PostUpgrade mocks base method
func (m *MockComponent) PostUpgrade(context spi.ComponentContext) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostUpgrade", context)
	ret0, _ := ret[0].(error)
	return ret0
}

// PostUpgrade indicates an expected call of PostUpgrade
func (mr *MockComponentMockRecorder) PostUpgrade(context interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostUpgrade", reflect.TypeOf((*MockComponent)(nil).PostUpgrade), context)
}
