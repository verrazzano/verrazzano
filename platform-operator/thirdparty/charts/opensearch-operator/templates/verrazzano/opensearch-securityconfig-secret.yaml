# Verrazzano Specific
# Create the securityconfig secret and admin-credential secret for OpenSearch
# Required for Verrazzano Keycloak and cert authentication as well as the operator to connect to OpenSearch


# Create the admin-credential secret
# Use existing password if it exists, otherwise generate a new password
{{- $secretObj := (lookup "v1" "Secret" .Release.Namespace "admin-credentials-secret") | default dict }}
{{- $secretData := (get $secretObj "data") | default dict }}
{{- $password := (get $secretData "password" | b64dec) | default (randAlphaNum 15) }}

apiVersion: v1
kind: Secret
metadata:
  name: admin-credentials-secret
  namespace: {{ .Release.Namespace }}
type: Opaque
data:
  password: {{ $password | b64enc }}
  username: {{ "admin" | b64enc }}
---
apiVersion: v1
kind: Secret
metadata:
  name: securityconfig-secret
  namespace: {{ .Release.Namespace }}
type: Opaque
stringData:
  action_groups.yml: |-
    _meta:
      type: "actiongroups"
      config_version: 2
  internal_users.yml: |-
    _meta:
      type: "internalusers"
      config_version: 2
    admin:
      hash: {{ (splitList ":" (htpasswd "" $password)) | last | quote }}
      reserved: true
      backend_roles:
      - "admin"
      description: "Admin user"
  nodes_dn.yml: |-
    _meta:
      type: "nodesdn"
      config_version: 2
  whitelist.yml: |-
    _meta:
      type: "whitelist"
      config_version: 2
  tenants.yml: |-
    _meta:
      type: "tenants"
      config_version: 2
  roles_mapping.yml: |-
    _meta:
      type: "rolesmapping"
      config_version: 2
    all_access:
      reserved: false
      backend_roles:
      - "admin"
      description: "Maps admin to all_access"
    own_index:
      reserved: false
      users:
      - "*"
      description: "Allow full access to an index named like the username"
    readall:
      reserved: false
      backend_roles:
      - "readall"
    manage_snapshots:
      reserved: false
      backend_roles:
      - "snapshotrestore"
    dashboard_server:
      reserved: true
      users:
      - "dashboarduser"
  roles.yml: |-
    _meta:
      type: "roles"
      config_version: 2
  config.yml: |-
    _meta:
      type: "config"
      config_version: "2"
    config:
      dynamic:
        kibana:
          multitenancy_enabled: false
        http:
          anonymous_auth_enabled: false
          xff:
            enabled: true
            internalProxies: '.*'
            remoteIpHeader: 'x-forwarded-for'
        authc:
          vz_proxy_auth_domain:
            description: "Authenticate via Verrazzano proxy"
            http_enabled: true
            transport_enabled: true
            order: 0
            http_authenticator:
              type: proxy
              challenge: false
              config:
                user_header: "X-WEBAUTH-USER"
                roles_header: "x-proxy-roles"
            authentication_backend:
              type: noop
          vz_basic_internal_auth_domain:
            description: "Authenticate via HTTP Basic against internal users database"
            http_enabled: true
            transport_enabled: true
            order: 1
            http_authenticator:
              type: basic
              challenge: false
            authentication_backend:
              type: intern
          vz_clientcert_auth_domain:
             description: "Authenticate via SSL client certificates"
             http_enabled: true
             transport_enabled: true
             order: 2
             http_authenticator:
               type: clientcert
               config:
                 enforce_hostname_verification: false
                 username_attribute: cn
               challenge: false
             authentication_backend:
                 type: noop