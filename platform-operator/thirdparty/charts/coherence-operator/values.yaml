# Copyright 2020, 2021 Oracle Corporation and/or its affiliates.
# Licensed under the Universal Permissive License v 1.0 as shown at
# http://oss.oracle.com/licenses/upl.

# image is the Coherence Operator image
image: "ghcr.io/oracle/coherence-operator:3.2.5"

# defaultCoherenceImage is the default application image that will be used if a Coherence
# resource does not specify an image name.
defaultCoherenceImage: "ghcr.io/oracle/coherence-ce:21.12.1"

# defaultCoherenceUtilsImage is the Coherence Operator utils image that will be used when running
# Coherence Pods. This image version should typically match the Operator version.
defaultCoherenceUtilsImage: "ghcr.io/oracle/coherence-operator:3.2.5-utils"

# watchNamespaces is the comma delimited list of namespaces that the operator should
# manage Coherence resources in. The default is to manage all namespaces.
watchNamespaces: ""

# imagePullPolicy controls the K8s container spec's pull policy
# If not set the pull policy is "IfNotPresent".
imagePullPolicy:

# imagePullSecrets provides support pulling images from private registries, the value references
#   one or more secrets to be used when pulling images. Secrets must be manually created in the
#   target namespace.
#   ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
#
#   For example, adding the pull secret "foo" would be:
#
#   imagePullSecrets:
#   - name: "foo"
#
#   adding multiple pull secrets "foo" and "bar" would be
#
#   imagePullSecrets:
#   - name: "foo"
#   - name: "bar"
imagePullSecrets:

# ---------------------------------------------------------------------------
# Pod scheduling values

# affinity controls Pod scheduling preferences.
#   ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
affinity:

# nodeSelector is the Node labels for pod assignment
# ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
nodeSelector:

# tolerations is for nodes that have taints on them.
#   Useful if you want to dedicate nodes to just run the coherence container
#   For example:
#   tolerations:
#   - key: "key"
#     operator: "Equal"
#     value: "value"
#     effect: "NoSchedule"
#
#   ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
tolerations:

# webhookCertType sets how webhook certificates will be managed.
# Valid values are "self-signed" "cert-manager" or "manual" the Operator will fail to start if
# the value is invalid.
# The default is "self-signed" where the operator will create self-signed certs for the webhook.
# If set to "cert-manager" it is expected that cert-manager is installed and configured to
# manage the certificates. https://cert-manager.io/docs/installation/kubernetes/
# If set to "manual" the certificate Secret should be created and managed externally
webhookCertType: self-signed

# webhookCertSecret is the name of the Secret that will contain the certificates for the Coherence webhooks.
webhookCertSecret: coherence-webhook-server-cert

# siteLabel is the Kubernetes Node label used to set the site identity for Coherence Pods.
siteLabel:

# rackLabel is the Kubernetes Node label used to set the rack identity for Coherence Pods.
rackLabel:

# serviceAccountName is the name of the service account to create and assign RBAC roles to.
# If not set the default name used is "coherence-operator".
serviceAccountName: coherence-operator

# The optional settings to adjust the readiness probe timings for the Operator
readinessProbe:
  # initialDelaySeconds is the number of seconds after the container has started before liveness probes are initiated.
  # More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
  initialDelaySeconds: 10
  # periodSeconds is how often (in seconds) to perform the probe.
  # Default to 10 seconds. Minimum value is 1.
  periodSeconds: 10
  # failureThreshold is the minimum consecutive failures for the probe to be considered failed after having succeeded.
  # Defaults to 3. Minimum value is 1.
  failureThreshold: 3

# clusterRoles controls whether the Helm chart will create RBAC ClusterRole and bindings for the Operator
# These are required if the Operator will watch multiple namespaces.
# If set to false then the Operator will only watch the namespace it is deployed into.
# If this value is false the Operator will not create CRDs, these MUST be manually installed.
# The default is true.
clusterRoles: true
# nodeRoles controls whether the Helm chart will create RBAC ClusterRole and bindings for the Operator to
# lookup cluster-wide Node information.
# Setting this value clusterRoles and to false will mean that the Operator cannot look up Node labels that will be used
# to set theCoherence site and rack values so Coherence cluster will be unable to automatically achieve site-safety.
# The default is true.
nodeRoles: false
