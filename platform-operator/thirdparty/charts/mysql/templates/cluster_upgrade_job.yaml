{{- if .Values.legacyUpgrade }}
{{- $cluster_name :=  default "mysql" .Release.Name }}
apiVersion: batch/v1
kind: Job
metadata:
  name: load-dump
  namespace: {{ .Release.Namespace }}
  labels:
    app: mysql
    component: restore-keycloak-db
spec:
  backoffLimit: 6
  template:
    spec:
      initContainers:
        - command:
            - bash
            - -c
            - chown -R 27:27 /var/lib/dump
          image: {{ .Values.legacyUpgrade.initContainer.image }}
          imagePullPolicy: IfNotPresent
          name: fixdumpdir
          resources: {}
          securityContext:
            runAsUser: 0
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - mountPath: /var/lib/dump
              name: keycloak-dump
      volumes:
        - name: keycloak-dump
          persistentVolumeClaim:
            claimName: {{ .Values.legacyUpgrade.claimName }}
      containers:
        - command: ["bash"]
          args:
            - -c
            - >-
              while ! mysqladmin ping -h"{{ $cluster_name }}.{{ .Release.Namespace }}.svc.cluster.local" --silent; do sleep 1; done &&
              mysqlsh -u root -p$(MYSQL_ROOT_PASSWORD) -h {{ $cluster_name }}.{{ .Release.Namespace }}.svc.cluster.local -e 'util.loadDump("/var/lib/dump/{{ .Values.legacyUpgrade.dumpDir }}", {includeSchemas: ["keycloak"], includeUsers: ["keycloak"], loadUsers: true})'
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: rootPassword
                  name: {{ $cluster_name }}-cluster-secret
            - name: MYSQL_HOST
              value: {{ $cluster_name }}
          image: {{ .Values.legacyUpgrade.container.image }}
          imagePullPolicy: IfNotPresent
          name: mysqlsh-load-dump
          resources: {}
          securityContext:
            runAsUser: 0
          volumeMounts:
            - mountPath: /var/lib/dump
              name: keycloak-dump
      restartPolicy: OnFailure
{{- end -}}