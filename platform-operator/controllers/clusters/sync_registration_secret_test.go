// Copyright (c) 2021, Oracle and/or its affiliates.
// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.

package clusters

import (
	"reflect"
	"testing"
)

// Test_combineBundles - test function that combines CA bundles (two base64 encoded strings)
func Test_combineBundles(t *testing.T) {
	type args struct {
		bundle1 []byte
		bundle2 []byte
	}
	tests := []struct {
		name    string
		args    args
		want    []byte
		wantErr bool
	}{
		{
			name: "Combine two bundles",
			args: args{
				bundle1: []byte("VGhlIGZpcnN0IENBIGJ1bmRsZQo="),
				bundle2: []byte("VGhlIHNlY29uZCBDQSBidW5kbGUK"),
			},
			want:    []byte("VGhlIGZpcnN0IENBIGJ1bmRsZQpUaGUgc2Vjb25kIENBIGJ1bmRsZQo="),
			wantErr: false,
		},
		{
			name: "Combine two bundles test2",
			args: args{
				bundle1: []byte("LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZnakNDQkdxZ0F3SUJBZ0lUQVBwNVJWNVZmeHJDVnRCcFBzYlpLck9zMWpBTkJna3Foa2lHOXcwQkFRc0YKQURCWk1Rc3dDUVlEVlFRR0V3SlZVekVnTUI0R0ExVUVDaE1YS0ZOVVFVZEpUa2NwSUV4bGRDZHpJRVZ1WTNKNQpjSFF4S0RBbUJnTlZCQU1USHloVFZFRkhTVTVIS1NCQmNuUnBabWxqYVdGc0lFRndjbWxqYjNRZ1VqTXdIaGNOCk1qRXhNVEk1TVRjMU5UVXpXaGNOTWpJd01qSTNNVGMxTlRVeVdqQXhNUzh3TFFZRFZRUUREQ1lxTG5adGFTNXoKZVhOMFpXMHVZV1J0YVc0eExtMW5hV0Z1WVhSaExuWTRiMlJsZGk1cGJ6Q0NBU0l3RFFZSktvWklodmNOQVFFQgpCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFPOU54NDZGM0I5VzliZHZ0dmZiUkx0bDJXejlvTHNhQis5RmxuT1VrOU9FCnYwcDVvMG1DeTNJOStmRnlJb0pqOGdhS1NNQ00rWnJzazRnUmV1L0xIaGk0OVNPeVlXSENRSkZBWlI5Tnlza2MKaEdPL2dOMWhBRlRhME04c1BSQVEyQ2FleU5jTjgrUXc0RGgxZEtycHVXSjFsZ0Q0SGVUd1ZEQWl0eG1rK1lkcAoyQ09jRzJMd1M0eXg0WlFYOXZ5SFU5OTkrYnpmeGtmQkNIL0FiU284aXR6Y05YeGN6aHN4Y2lTQ0F3OVVMK3RDCkNRQldmYTZWem9pTGFCT1hKamNvYk1pUUdCTnhzaVpiMUY0MFBtM2FMRWdhMVZsamFlZXp2ZGJoK1A0ZDFDUnIKTDhMeG1xYjBEWnYrWUk5Wm10NXo5dWpueDN6Q3UzZnJuUm1pSEU5QjNLc0NBd0VBQWFPQ0Fta3dnZ0psTUE0RwpBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUlLd1lCQlFVSEF3SXdEQVlEClZSMFRBUUgvQkFJd0FEQWRCZ05WSFE0RUZnUVUwR214OWEzbEtFbXFLKzZNeWpObDdLMS9wQVF3SHdZRFZSMGoKQkJnd0ZvQVUzbko2U044eHc2WlEzNStGSTk5WE4wdGRMbVV3WFFZSUt3WUJCUVVIQVFFRVVUQlBNQ1VHQ0NzRwpBUVVGQnpBQmhobG9kSFJ3T2k4dmMzUm5MWEl6TG04dWJHVnVZM0l1YjNKbk1DWUdDQ3NHQVFVRkJ6QUNoaHBvCmRIUndPaTh2YzNSbkxYSXpMbWt1YkdWdVkzSXViM0puTHpBeEJnTlZIUkVFS2pBb2dpWXFMblp0YVM1emVYTjAKWlcwdVlXUnRhVzR4TG0xbmFXRnVZWFJoTG5ZNGIyUmxkaTVwYnpCTUJnTlZIU0FFUlRCRE1BZ0dCbWVCREFFQwpBVEEzQmdzckJnRUVBWUxmRXdFQkFUQW9NQ1lHQ0NzR0FRVUZCd0lCRmhwb2RIUndPaTh2WTNCekxteGxkSE5sCmJtTnllWEIwTG05eVp6Q0NBUVFHQ2lzR0FRUUIxbmtDQkFJRWdmVUVnZklBOEFCMkFCYm9hY0hSbGVyWHcvaVgKR3VQd2RnSDNqT0cyblRHb1VoaTJnMzh4cUJVSUFBQUJmVzBOc3BzQUFBUURBRWN3UlFJZ1ZCa1Jpbk5jSHp5aQpwNGdXUGh3c252YTNqN0Ezb1FXanBvemltcXA4TVZVQ0lRRG5uc1JXaWQrSW1GVW9lektnTEdtZHNZV2FTeGt0CnRoNUJYcGZ0cDVNbWlRQjJBTjJaTlB5bDV5U0F5VlpvZllFMG1RaEpza24zdFduWXg3eXJQMXpCODI1a0FBQUIKZlcwTnNwOEFBQVFEQUVjd1JRSWhBTWpZVklVdVowQkF4Nm9pNEk5UkkxRGo5bEFNYlM3OGNIT1R2dFc3V0tsSQpBaUE0amRBZE1CMTZvNWJzcUpUd0VTRTlPN3pudFk5eTdBa2ZYbEJ2ZXYwOG9qQU5CZ2txaGtpRzl3MEJBUXNGCkFBT0NBUUVBRFpJRkM1WkRNTkh1eGhWcWdFUUlITHVPR0djWmRJamkvTlRpejIvR0JGMGFmMzlXdEk3cWtnMTMKdmlLQ0pqSjdJbUcvTnFCM1lGM255Yk51UDlibW1MZWx3ejAzTUlRb25zUFRtYWZobTdiV3FXOUs3L3c0NWFwcwpGMmpsb3R6N3hOd3lDaU82amtxaGVINkkyWGFhNlpUdmpXRW9jbkxGN2dncWhnZmdDeEhrNmk1U1cyME1EaGxhClZJMGRnRFQvZjd2RktPaGthYUh1OWUreHk5T2NoLzlkNm9QN0dwWkx6Tm94Y0t5ZHYxa2dkdGdUYmFnSU1GRlgKRWJTOWg2T1V2ZzloTGNxWHhDbXhHblNBWkFzUGpZY3N5TTBkV1pwQTFKYkxLS1Zmbi9JT0JSdWVNeERZd1BIbgpuNlkxclZqcG9ZZEVZTVVwQWtodXJmOTdPTk9FaEE9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCi0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQpNSUlGV3pDQ0EwT2dBd0lCQWdJUVRmUXJsZEh1bXpwTUxyTTdqUkJkMWpBTkJna3Foa2lHOXcwQkFRc0ZBREJtCk1Rc3dDUVlEVlFRR0V3SlZVekV6TURFR0ExVUVDaE1xS0ZOVVFVZEpUa2NwSUVsdWRHVnlibVYwSUZObFkzVnkKYVhSNUlGSmxjMlZoY21Ob0lFZHliM1Z3TVNJd0lBWURWUVFERXhrb1UxUkJSMGxPUnlrZ1VISmxkR1Z1WkNCUQpaV0Z5SUZneE1CNFhEVEl3TURrd05EQXdNREF3TUZvWERUSTFNRGt4TlRFMk1EQXdNRm93V1RFTE1Ba0dBMVVFCkJoTUNWVk14SURBZUJnTlZCQW9URnloVFZFRkhTVTVIS1NCTVpYUW5jeUJGYm1OeWVYQjBNU2d3SmdZRFZRUUQKRXg4b1UxUkJSMGxPUnlrZ1FYSjBhV1pwWTJsaGJDQkJjSEpwWTI5MElGSXpNSUlCSWpBTkJna3Foa2lHOXcwQgpBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUF1NlRSOCs3NGI0Nm1PRTFGVXdCcnZ4ekVZTGNrM2lhc21LcmNRa2IrCmd5L3o5Snk3UU5JQWwwQjlwVktwNFlVNzZKd3hGNURPWlpoaTd2SzdTYkNrSzZGYkhseVU1QmlEWUl4YmJmdk8KTC9qVkdxZHNTak5hSlFUZzNDM1hySmphL0hBNFdDRkVNVm9UMndEWm04QUJDMU4rSVFlN1E2RkVxYzhOd21UUwpubW1SUW00VFF2cjA2RFAremdGSy9NTnVieFdXRFNiU0tLVEg1aW01ajJmWmZnK2ovdE0xYkdhY3pGV3c4L2xTCm51a3luNUoyTCtOSlluY2x6a1hvaDluTUZueVBtVmJmeURQT2M0WTI1YVR6Vm9lQktYYS9jWjVNTStXZGRqZEwKYmlXdm0xOWYxc1luMWFSYUFJcmtwcHY3a2tuODN2Y3RoOFhDRzM5cUMyWnZhUUlEQVFBQm80SUJFRENDQVF3dwpEZ1lEVlIwUEFRSC9CQVFEQWdHR01CMEdBMVVkSlFRV01CUUdDQ3NHQVFVRkJ3TUNCZ2dyQmdFRkJRY0RBVEFTCkJnTlZIUk1CQWY4RUNEQUdBUUgvQWdFQU1CMEdBMVVkRGdRV0JCVGVjbnBJM3pIRHBsRGZuNFVqMzFjM1MxMHUKWlRBZkJnTlZIU01FR0RBV2dCUzE4Mlh5L3JBS2toLzdQSDN6UktDc1l5WERGREEyQmdnckJnRUZCUWNCQVFRcQpNQ2d3SmdZSUt3WUJCUVVITUFLR0dtaDBkSEE2THk5emRHY3RlREV1YVM1c1pXNWpjaTV2Y21jdk1Dc0dBMVVkCkh3UWtNQ0l3SUtBZW9CeUdHbWgwZEhBNkx5OXpkR2N0ZURFdVl5NXNaVzVqY2k1dmNtY3ZNQ0lHQTFVZElBUWIKTUJrd0NBWUdaNEVNQVFJQk1BMEdDeXNHQVFRQmd0OFRBUUVCTUEwR0NTcUdTSWIzRFFFQkN3VUFBNElDQVFDTgpETGFtOXlOMEVGeHhuLzNwK3J1V082bi85Z29DQU01UFQ2Y0M2ZmtqTXM0dWFzNlVHWEpqcjVqN1BvVFFmM0MxCnZ1eGlJR1JKQzZxeFY3eWM2VTBYK3cwTWo4NXNISTVEblFWV041K0QxZXI3bXAxM0pKQTB4YkFiSGEzUmxjem4KeTJRODJYS3VpOFdIdVdyYTBnYjJLTHBmYm9ZajFHaGdraHIzZ2F1ODNwQy9XUThIZmt3Y3ZTd2hJWXFUcXhvWgpVcThISWYzTTgycVM5YUtPWkUwQ0VtU3lSMXpacVF4SlVUN2VtT1VhcGtVTjlwb0o5ekdjK0ZnUlp2ZHJvMFhCCnlwaFdYRGFxTVlwaDBEeFcvMTBpZzVqNHhtbU5EakNSbXFJS3NLb1dBNTJ3QlRLS1hLMW5hMnR5L2xXNWRodEEKeGt6NXJWWkZkNHNnUzRKME8rem02ZDVHUmtXc05KNGtub3RHWGw4dnRTM1g0MEtYZWIzQTUrLzNwMHFhRDIxNQpYcThvU05PUmZCMm9JMWtRdXlFQUo1eHZQVGRmd1JseVJHM2xGWW9kclJnNnBvVUJELzhmTlRYTXR6eWRwUmd5CnpVUVpoLzE4RjZCL2lXNmNiaVJOOXIySGtoMDVPbStxMC82dzBEZFplKzhZck5wZmhTT2JyLzFlVlpiS0dNSVkKcUtteVpiQk51NXlzRU5JSzVNUGMxNG1VZUttRmpwTjg0MFZSNXp1bm9VNTJscXBMRHVhL3FJTThpZGs4NnhHVwp4eDJtbDQzRE8vWWEvdFZaVm9rMG1PMFRVanpKSWZQcXl2cjQ1NUlzSXV0NFJsQ1I5SXEwRURUdmUyL1p3Q3VHCmhTanBUVUZHU2lRclIySksyRXZwK282QUVUVWtCQ08xYXcwUHBRQlBEUT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZWRENDQkR5Z0F3SUJBZ0lSQU8xZFc4bHQrOTlOUHMxcVNZM1JzOGN3RFFZSktvWklodmNOQVFFTEJRQXcKY1RFTE1Ba0dBMVVFQmhNQ1ZWTXhNekF4QmdOVkJBb1RLaWhUVkVGSFNVNUhLU0JKYm5SbGNtNWxkQ0JUWldOMQpjbWwwZVNCU1pYTmxZWEpqYUNCSGNtOTFjREV0TUNzR0ExVUVBeE1rS0ZOVVFVZEpUa2NwSUVSdlkzUnZjbVZrCklFUjFjbWxoYmlCU2IyOTBJRU5CSUZnek1CNFhEVEl4TURFeU1ERTVNVFF3TTFvWERUSTBNRGt6TURFNE1UUXcKTTFvd1pqRUxNQWtHQTFVRUJoTUNWVk14TXpBeEJnTlZCQW9US2loVFZFRkhTVTVIS1NCSmJuUmxjbTVsZENCVApaV04xY21sMGVTQlNaWE5sWVhKamFDQkhjbTkxY0RFaU1DQUdBMVVFQXhNWktGTlVRVWRKVGtjcElGQnlaWFJsCmJtUWdVR1ZoY2lCWU1UQ0NBaUl3RFFZSktvWklodmNOQVFFQkJRQURnZ0lQQURDQ0Fnb0NnZ0lCQUxiYWdFZEQKVGExUWdHQldTWWt5TWhzY1pYRU5PQmFWUlRNWDFoY2VKRU5nc0wwTWE0OUQzTWlsSTRLUzM4bXRrbWRGNmNQVwpuTCsrZmdlaFQwRmJSSFpnak9FcjhVQU40akg2b21qcmJURCsrVlpuZVRzTVZhR2FtUW1EZEZsNWcxZ1lhaWdrCmtteDhPaUNPNjhhNFFYZzR3U3luNmlEaXBLUDh1dHNFK3gxRTI4U0E3NUhPWXFwZHJrNEhHeHVVTHZscjAzd1oKR1RJZi9vUnQyL2MrZFltRG9hSmhnZStHT3JMQUVRQnlPNys4K3Z6T3dwTkFQRXg2TFcrY3JFRVo3ZUJYaWg2VgpQMTlzVEd5M3lmcUs1dFB0VGRYWENPUU1LQXArZ0NqL1ZCeWhtSXIrMGlOREM1NDBndHZWMzAzV3BjYndua2tMCllDMEZ0MmNZVXlIdGtzdE9mUmNSTytLMmNab3pvU3dWUHlCOC9KOVJwY1JLM2pnblg5bHVqZndBL3BBYlAwSjIKVVBRRnhtV0ZSUW5GamFxNnJrcWJORUJnTHkra0ZMMU5Fc1JidkZiS3JSaTViWXkybE5tczJOSlBadmROUWJULwoyZEJaS21KcXhIa3hDdU9RRmpoSlFOZU8rTmptMVoxaUFUUy8zcnRzMnlabHFYS3N4UVV6TjZ2TmJEOEtuWFJNCkVlT1hVWXZiVjRscWZDZjhtUzE0V0ViU2lNeTg3R0I1Uzl1Y1NWMVhVcmxURzVVR2NNU1pPQmNFVXBpc1JQRW0KUVdVT1RXSW9EUTVGT2lhL0dJK0tpNTIzcjJydUVtYm1HMzdFQlNCWGR4SWRuZHFyankrUVZBbUNlYnlEeDllVgpFR09JcG4yNmJXNUxLZXJ1bUp4YS9DRkJhS2k0YlJ2bWRKUkxBZ01CQUFHamdmRXdnZTR3RGdZRFZSMFBBUUgvCkJBUURBZ0VHTUE4R0ExVWRFd0VCL3dRRk1BTUJBZjh3SFFZRFZSME9CQllFRkxYelpmTCtzQXFTSC9zOGZmTkUKb0t4akpjTVVNQjhHQTFVZEl3UVlNQmFBRkFoWDJvbkhvbE41REUvZDRKQ1BkTHJpSjNORU1EZ0dDQ3NHQVFVRgpCd0VCQkN3d0tqQW9CZ2dyQmdFRkJRY3dBb1ljYUhSMGNEb3ZMM04wWnkxa2MzUXpMbWt1YkdWdVkzSXViM0puCkx6QXRCZ05WSFI4RUpqQWtNQ0tnSUtBZWhoeG9kSFJ3T2k4dmMzUm5MV1J6ZERNdVl5NXNaVzVqY2k1dmNtY3YKTUNJR0ExVWRJQVFiTUJrd0NBWUdaNEVNQVFJQk1BMEdDeXNHQVFRQmd0OFRBUUVCTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQjd0UjhCMGVJUVNTNk1oUDVrdXZHdGgrZE4wMkRzSWhyMHlKdGsyZWhJY1BJcVN4UlJtSEdsCjR1MmMzUWx2RXBlUkRwMnc3ZVFkUlRsSS9Xbk5oWTRKT29mcE1mMnp3QUJnQld0QXUwVm9vUWNaWlRwUXJ1aWcKRi96NnhZa0JrM1VIa2plcXh6TU4zZDFFcUd1c3hKb3FnZFRvdVo1WDVRVFRJZWU5blEzTEVoV25SU1hEeDdZMAp0dFIxQkdmY2RxSG9wTzRJQnFBaGJrS1JqRjV6ajdPRDhjRzM1b215d1ViWnRPSm5mdGlJMG5GY1JheGJYbzB2Cm9EZkxEMFM2K0FDMlIzdEtwcWprTlg2LzkxaHJSRmdsVWFreU1jWlUveGxlcWJ2NitMcjNZRDhQc0JUdWI2bEkKb1oybFMzOGZMMThBb240NThmYmMwQlBIdGVuZmhLajUKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="),
				bundle2: []byte("LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZXekNDQTBPZ0F3SUJBZ0lRVGZRcmxkSHVtenBNTHJNN2pSQmQxakFOQmdrcWhraUc5dzBCQVFzRkFEQm0KTVFzd0NRWURWUVFHRXdKVlV6RXpNREVHQTFVRUNoTXFLRk5VUVVkSlRrY3BJRWx1ZEdWeWJtVjBJRk5sWTNWeQphWFI1SUZKbGMyVmhjbU5vSUVkeWIzVndNU0l3SUFZRFZRUURFeGtvVTFSQlIwbE9SeWtnVUhKbGRHVnVaQ0JRClpXRnlJRmd4TUI0WERUSXdNRGt3TkRBd01EQXdNRm9YRFRJMU1Ea3hOVEUyTURBd01Gb3dXVEVMTUFrR0ExVUUKQmhNQ1ZWTXhJREFlQmdOVkJBb1RGeWhUVkVGSFNVNUhLU0JNWlhRbmN5QkZibU55ZVhCME1TZ3dKZ1lEVlFRRApFeDhvVTFSQlIwbE9SeWtnUVhKMGFXWnBZMmxoYkNCQmNISnBZMjkwSUZJek1JSUJJakFOQmdrcWhraUc5dzBCCkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXU2VFI4Kzc0YjQ2bU9FMUZVd0Jydnh6RVlMY2szaWFzbUtyY1FrYisKZ3kvejlKeTdRTklBbDBCOXBWS3A0WVU3Nkp3eEY1RE9aWmhpN3ZLN1NiQ2tLNkZiSGx5VTVCaURZSXhiYmZ2TwpML2pWR3Fkc1NqTmFKUVRnM0MzWHJKamEvSEE0V0NGRU1Wb1Qyd0RabThBQkMxTitJUWU3UTZGRXFjOE53bVRTCm5tbVJRbTRUUXZyMDZEUCt6Z0ZLL01OdWJ4V1dEU2JTS0tUSDVpbTVqMmZaZmcrai90TTFiR2FjekZXdzgvbFMKbnVreW41SjJMK05KWW5jbHprWG9oOW5NRm55UG1WYmZ5RFBPYzRZMjVhVHpWb2VCS1hhL2NaNU1NK1dkZGpkTApiaVd2bTE5ZjFzWW4xYVJhQUlya3Bwdjdra244M3ZjdGg4WENHMzlxQzJadmFRSURBUUFCbzRJQkVEQ0NBUXd3CkRnWURWUjBQQVFIL0JBUURBZ0dHTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQ0JnZ3JCZ0VGQlFjREFUQVMKQmdOVkhSTUJBZjhFQ0RBR0FRSC9BZ0VBTUIwR0ExVWREZ1FXQkJUZWNucEkzekhEcGxEZm40VWozMWMzUzEwdQpaVEFmQmdOVkhTTUVHREFXZ0JTMTgyWHkvckFLa2gvN1BIM3pSS0NzWXlYREZEQTJCZ2dyQmdFRkJRY0JBUVFxCk1DZ3dKZ1lJS3dZQkJRVUhNQUtHR21oMGRIQTZMeTl6ZEdjdGVERXVhUzVzWlc1amNpNXZjbWN2TUNzR0ExVWQKSHdRa01DSXdJS0Flb0J5R0dtaDBkSEE2THk5emRHY3RlREV1WXk1c1pXNWpjaTV2Y21jdk1DSUdBMVVkSUFRYgpNQmt3Q0FZR1o0RU1BUUlCTUEwR0N5c0dBUVFCZ3Q4VEFRRUJNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUNBUUNOCkRMYW05eU4wRUZ4eG4vM3ArcnVXTzZuLzlnb0NBTTVQVDZjQzZma2pNczR1YXM2VUdYSmpyNWo3UG9UUWYzQzEKdnV4aUlHUkpDNnF4Vjd5YzZVMFgrdzBNajg1c0hJNURuUVZXTjUrRDFlcjdtcDEzSkpBMHhiQWJIYTNSbGN6bgp5MlE4MlhLdWk4V0h1V3JhMGdiMktMcGZib1lqMUdoZ2tocjNnYXU4M3BDL1dROEhma3djdlN3aElZcVRxeG9aClVxOEhJZjNNODJxUzlhS09aRTBDRW1TeVIxelpxUXhKVVQ3ZW1PVWFwa1VOOXBvSjl6R2MrRmdSWnZkcm8wWEIKeXBoV1hEYXFNWXBoMER4Vy8xMGlnNWo0eG1tTkRqQ1JtcUlLc0tvV0E1MndCVEtLWEsxbmEydHkvbFc1ZGh0QQp4a3o1clZaRmQ0c2dTNEowTyt6bTZkNUdSa1dzTko0a25vdEdYbDh2dFMzWDQwS1hlYjNBNSsvM3AwcWFEMjE1ClhxOG9TTk9SZkIyb0kxa1F1eUVBSjV4dlBUZGZ3Umx5UkczbEZZb2RyUmc2cG9VQkQvOGZOVFhNdHp5ZHBSZ3kKelVRWmgvMThGNkIvaVc2Y2JpUk45cjJIa2gwNU9tK3EwLzZ3MERkWmUrOFlyTnBmaFNPYnIvMWVWWmJLR01JWQpxS215WmJCTnU1eXNFTklLNU1QYzE0bVVlS21GanBOODQwVlI1enVub1U1MmxxcExEdWEvcUlNOGlkazg2eEdXCnh4Mm1sNDNETy9ZYS90VlpWb2swbU8wVFVqekpJZlBxeXZyNDU1SXNJdXQ0UmxDUjlJcTBFRFR2ZTIvWndDdUcKaFNqcFRVRkdTaVFyUjJKSzJFdnArbzZBRVRVa0JDTzFhdzBQcFFCUERRPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQotLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0KTUlJREN6Q0NBcEdnQXdJQkFnSVJBTFJZNDk5MkZWeFpKS09KM2JwZmZXSXdDZ1lJS29aSXpqMEVBd013YURFTApNQWtHQTFVRUJoTUNWVk14TXpBeEJnTlZCQW9US2loVFZFRkhTVTVIS1NCSmJuUmxjbTVsZENCVFpXTjFjbWwwCmVTQlNaWE5sWVhKamFDQkhjbTkxY0RFa01DSUdBMVVFQXhNYktGTlVRVWRKVGtjcElFSnZaM1Z6SUVKeWIyTmoKYjJ4cElGZ3lNQjRYRFRJd01Ea3dOREF3TURBd01Gb1hEVEkxTURreE5URTJNREF3TUZvd1ZURUxNQWtHQTFVRQpCaE1DVlZNeElEQWVCZ05WQkFvVEZ5aFRWRUZIU1U1SEtTQk1aWFFuY3lCRmJtTnllWEIwTVNRd0lnWURWUVFECkV4c29VMVJCUjBsT1J5a2dSWEp6WVhSNklFVmtZVzFoYldVZ1JURXdkakFRQmdjcWhrak9QUUlCQmdVcmdRUUEKSWdOaUFBVDl2L1BKVXRIT1RrMjhuWENYcnBQNjY1dkk0WjA5NGg4bzdSKzVFNnlOYWpaYTBVdWJxanBaRm9HcQp1Nzg1L3ZHWGo2bWRmSXpjOWJvSVRHdXNaQ1NXZU1qNXlTTVpHWmtTK1ZTdmY4VlFxaiszWWRFdTRQTFpFakJBCml2UkZwRWVqZ2dFUU1JSUJEREFPQmdOVkhROEJBZjhFQkFNQ0FZWXdIUVlEVlIwbEJCWXdGQVlJS3dZQkJRVUgKQXdJR0NDc0dBUVVGQndNQk1CSUdBMVVkRXdFQi93UUlNQVlCQWY4Q0FRQXdIUVlEVlIwT0JCWUVGT3Y1SmNLQQpLR2JpYlFpU012UEM0YTNEL3pWRk1COEdBMVVkSXdRWU1CYUFGTjdSbzFsa0RzR2FOcU5HN3JBUWR1K3VsNVZtCk1EWUdDQ3NHQVFVRkJ3RUJCQ293S0RBbUJnZ3JCZ0VGQlFjd0FvWWFhSFIwY0RvdkwzTjBaeTE0TWk1cExteGwKYm1OeUxtOXlaeTh3S3dZRFZSMGZCQ1F3SWpBZ29CNmdISVlhYUhSMGNEb3ZMM04wWnkxNE1pNWpMbXhsYm1OeQpMbTl5Wnk4d0lnWURWUjBnQkJzd0dUQUlCZ1puZ1F3QkFnRXdEUVlMS3dZQkJBR0MzeE1CQVFFd0NnWUlLb1pJCnpqMEVBd01EYUFBd1pRSXdYY1piZGd4Y0dIOXJURXJmU1RrWGZCS0t5Z1UweU83T3BidU5lWTFpZDBGWi9oUlkKTjVmZExPR3VjK2FIZkNzTUFqRUEwUC94d0tyNk5ROU1ON3ZyZkdBek8zOTdQQXBkcWZNN1ZkRksxOGFFdTF4bQozSE1GS3pJUjhlRVBzTXg0c21NbAotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCi0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQpNSUlGbURDQ0E0Q2dBd0lCQWdJUVU5Qzg3bk1wT0lGS1lwZnZPSEZIRkRBTkJna3Foa2lHOXcwQkFRc0ZBREJtCk1Rc3dDUVlEVlFRR0V3SlZVekV6TURFR0ExVUVDaE1xS0ZOVVFVZEpUa2NwSUVsdWRHVnlibVYwSUZObFkzVnkKYVhSNUlGSmxjMlZoY21Ob0lFZHliM1Z3TVNJd0lBWURWUVFERXhrb1UxUkJSMGxPUnlrZ1VISmxkR1Z1WkNCUQpaV0Z5SUZneE1CNFhEVEUxTURZd05ERXhNRFF6T0ZvWERUTTFNRFl3TkRFeE1EUXpPRm93WmpFTE1Ba0dBMVVFCkJoTUNWVk14TXpBeEJnTlZCQW9US2loVFZFRkhTVTVIS1NCSmJuUmxjbTVsZENCVFpXTjFjbWwwZVNCU1pYTmwKWVhKamFDQkhjbTkxY0RFaU1DQUdBMVVFQXhNWktGTlVRVWRKVGtjcElGQnlaWFJsYm1RZ1VHVmhjaUJZTVRDQwpBaUl3RFFZSktvWklodmNOQVFFQkJRQURnZ0lQQURDQ0Fnb0NnZ0lCQUxiYWdFZERUYTFRZ0dCV1NZa3lNaHNjClpYRU5PQmFWUlRNWDFoY2VKRU5nc0wwTWE0OUQzTWlsSTRLUzM4bXRrbWRGNmNQV25MKytmZ2VoVDBGYlJIWmcKak9FcjhVQU40akg2b21qcmJURCsrVlpuZVRzTVZhR2FtUW1EZEZsNWcxZ1lhaWdra214OE9pQ082OGE0UVhnNAp3U3luNmlEaXBLUDh1dHNFK3gxRTI4U0E3NUhPWXFwZHJrNEhHeHVVTHZscjAzd1pHVElmL29SdDIvYytkWW1ECm9hSmhnZStHT3JMQUVRQnlPNys4K3Z6T3dwTkFQRXg2TFcrY3JFRVo3ZUJYaWg2VlAxOXNUR3kzeWZxSzV0UHQKVGRYWENPUU1LQXArZ0NqL1ZCeWhtSXIrMGlOREM1NDBndHZWMzAzV3BjYndua2tMWUMwRnQyY1lVeUh0a3N0TwpmUmNSTytLMmNab3pvU3dWUHlCOC9KOVJwY1JLM2pnblg5bHVqZndBL3BBYlAwSjJVUFFGeG1XRlJRbkZqYXE2CnJrcWJORUJnTHkra0ZMMU5Fc1JidkZiS3JSaTViWXkybE5tczJOSlBadmROUWJULzJkQlpLbUpxeEhreEN1T1EKRmpoSlFOZU8rTmptMVoxaUFUUy8zcnRzMnlabHFYS3N4UVV6TjZ2TmJEOEtuWFJNRWVPWFVZdmJWNGxxZkNmOAptUzE0V0ViU2lNeTg3R0I1Uzl1Y1NWMVhVcmxURzVVR2NNU1pPQmNFVXBpc1JQRW1RV1VPVFdJb0RRNUZPaWEvCkdJK0tpNTIzcjJydUVtYm1HMzdFQlNCWGR4SWRuZHFyankrUVZBbUNlYnlEeDllVkVHT0lwbjI2Ylc1TEtlcnUKbUp4YS9DRkJhS2k0YlJ2bWRKUkxBZ01CQUFHalFqQkFNQTRHQTFVZER3RUIvd1FFQXdJQkJqQVBCZ05WSFJNQgpBZjhFQlRBREFRSC9NQjBHQTFVZERnUVdCQlMxODJYeS9yQUtraC83UEgzelJLQ3NZeVhERkRBTkJna3Foa2lHCjl3MEJBUXNGQUFPQ0FnRUFuY0RaTnl0RGJyclZlNjhVVDZweTFsZkYyaDZUbTJwOHJvNDJpODdXV3lQMkxLOFkKbkxIQzBodk5mV2VXbWpaUVlCUWZHQzVjN2FRUmV6YWsrdEhMZG1yTktIa241a24rOUU5TENqQ2FFc3lJSW4yagpxZEhsQWtlcHUvQzNLbk50Vng1dFcwN2U1YnZJakpTY3drQ0RiUDNha1dRaXhQcFJGQXNuUCtVTHg3azBhTzF4CnFBZWFBaFEycmdvMUY1OGhjZmxncUtUWG5wUE0wMmludFZmaVZWa1g1R1hwSmpLNUVvUXRMY2V5R09ya3hsTS8Kc1RQcTRVcm55cG1zcVNhZ1dWM0hjVWxZdERpbmMrbnVrRms2ZVI0WGt6WEJid0thamwwWWp6dGZyQ0lIT241UQpDSkw2VEVSVkRiTS9hQVBseThrSjFzV0dMdXZ2V1l6TVlnTHpEdWwvL3JVRjEwZ0VNV2FYVlpWNTFLcFM5RFkvCjVDdW51dkNYbUVRSkhvN2tHY1ZpVDdzRVRuNkp6OUtPaHZZY1hrSjdwbzZkOTNBL2p5NEdLUElQbnNLS05FbVIKeFV1WFk0eFJkaDQ1dE1KbkxUVURkQzlGSVUwZmxUZU85L3ZOcFZBOE9QVTFpMTR2Q3orTVU4S1gxYlYzR1htLwpmeGxCN1ZCQmpYOXY1b1VlcDBvL2o2OFIvaURsQ09NNFZWZlJhOGdYNlQyRlU3Zk5kYXR2R3JvN3VRekl2V29mCmdOOVdVd0NiRU1CeS9ZaEJTclh5Y0tBOGNyZ0dnM3gxbUlzb3BuODhKS3dtTUJhNjhvUzdFSE05dzdDNHk3MU0KN0RpQSsvOVFkcDlSQldKcFRTOWkvbURuSmcxeHZvOFh6NDltcnJnZm1jQVhUQ0pxWGkyNE5hdEkzT2M9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"),
			},
			want:    []byte("VGhlIGZpcnN0IENBIGJ1bmRsZQpUaGUgc2Vjb25kIENBIGJ1bmRsZQo="),
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := combineBundles(tt.args.bundle1, tt.args.bundle2)
			if (err != nil) != tt.wantErr {
				t.Errorf("combineBundles() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("combineBundles() got = %v, want %v", got, tt.want)
			}
		})
	}
}
