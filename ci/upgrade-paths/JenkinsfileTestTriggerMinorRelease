// Copyright (c) 2023, Oracle and/or its affiliates.
// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.

def agentLabel = env.JOB_NAME.contains('master') ? "phx-large" : "large"

def listOfUpgradeJobs
def upgradeJobsStageMapping

pipeline {
    options {
        skipDefaultCheckout true
    }

    agent {
       docker {
            image "${RUNNER_DOCKER_IMAGE}"
            args "${RUNNER_DOCKER_ARGS}"
            registryUrl "${RUNNER_DOCKER_REGISTRY_URL}"
            registryCredentialsId 'ocir-pull-and-push-account'
            label "${agentLabel}"
        }
    }
    // Use cases:
    //        1) (automatic) master, release* will trigger this job by default on successful runs and supply GIT_COMMIT_TO_USE with the exact GIT commit to use for all testing (same as the upstream build)
    //        2) (automatic) branch builds with TRIGGER_FULL_TESTS enabled will trigger this job by default on successful runs and supply GIT_COMMIT_TO_USE with the exact GIT commit to use for all testing (same as the upstream build)
    //        3) (manual) any branch should be able to call this “trigger” job with a commit that was previously built and has a valid GIT commit hash. In this case the manual job
    //           must be started from the desired branch using Build with Parameters, the GIT_COMMIT_TO_USE must supply the GIT commit hash from the previous build, and VERRAZZANO_OPERATOR_IMAGE must NOT BE SPECIFIED or be NONE
    //           This allows one to rerun the tests without rerunning the upstream build (ie: if intermittent test issue occurred)
    //        4) (manual) any branch should be able to call this “trigger” job with the current head of their branch, pointing to a previously built operator image. This is useful if you are adding/fixing test cases where the
    //           operator image was built already (from master, or your branch) and only want to run the tests using it without running the full build. This is not a super likely situation (more likely individual test jobs
    //           will be manually kicked off rather than all of them). To accomplish this, specify GIT_COMMIT_TO_USE=NONE, and VERRAZZANO_OPERATOR_IMAGE=image-to-use
    parameters {
        string (name: 'GIT_COMMIT_TO_USE',
                        defaultValue: 'NONE',
                        description: 'This is the full git commit hash from the source build to be used for all jobs. A full pipeline specifies a valid commit hash here. NONE can be used for manually triggered jobs, however even for those a commit hash value is preferred to be supplied',
                        trim: true)
        string (name: 'N_JOBS_FOR_EACH_BATCH',
                defaultValue: '3',
                description: 'This is to define total number of jobs executed in parallel per each batch',
                trim: true)
        choice (description: 'Predefined config permutations for Verrazzano installation. Prod profile is the default profile for NONE', name: 'VZ_INSTALL_CONFIG',
                choices: ["NONE", "dev-kind-persistence"])
        choice (name: 'KIND_CLUSTER_VERSION',
                description: 'Kubernetes Version for KIND Cluster',
                // 1st choice is the default value
                choices: [ "1.24", "1.25", "1.26" ])
        string (name: 'EXCLUDE_RELEASES',
                defaultValue: "v1.0, v1.1, v1.2, v1.3",
                description: 'This is to exclude the specified releases from upgrade tests.', trim: true)
        string (name: 'VERRAZZANO_OPERATOR_IMAGE',
                        defaultValue: 'NONE',
                        description: 'This is for manually testing only where someone needs to use a specific operator image, otherwise the default value of NONE is used',
                        trim: true)
        string (name: 'WILDCARD_DNS_DOMAIN',
                        defaultValue: 'nip.io',
                        description: 'This is the wildcard DNS domain',
                        trim: true)
        booleanParam (description: 'Whether to use External Elasticsearch', name: 'EXTERNAL_ELASTICSEARCH', defaultValue: false)
        string (name: 'TAGGED_TESTS',
                defaultValue: '',
                description: 'A comma separated list of build tags for tests that should be executed (e.g. unstable_test). Default:',
                trim: true)
        string (name: 'INCLUDED_TESTS',
                defaultValue: '.*',
                description: 'A regex matching any fully qualified test file that should be executed (e.g. examples/helidon/). Default: .*',
                trim: true)
        string (name: 'EXCLUDED_TESTS',
                defaultValue: '_excluded_test',
                description: 'A regex matching any fully qualified test file that should not be executed (e.g. multicluster/|_excluded_test). Default: _excluded_test',
                trim: true)
        string (name: 'CONSOLE_REPO_BRANCH',
                defaultValue: '',
                description: 'The branch to check out after cloning the console repository.',
                trim: true)
    }

    environment {
        CLEAN_BRANCH_NAME = "${env.BRANCH_NAME.replace("/", "%2F")}"
        GOPATH = '/home/opc/go'
        GO_REPO_PATH = "${GOPATH}/src/github.com/verrazzano"
        OCI_CLI_AUTH="instance_principal"
        PROMETHEUS_GW_URL = credentials('prometheus-dev-url')
        SERVICE_KEY = credentials('PAGERDUTY_SERVICE_KEY')
        TARGET_UPGRADE_VERSION = "current_branch"
    }

    stages {
        stage('Clean workspace and checkout') {
            steps {
                sh """
                    echo "${NODE_LABELS}"
                """

                script {
                    if (params.GIT_COMMIT_TO_USE == "NONE") {
                        echo "Specific GIT commit was not specified, use current head"
                        def scmInfo = checkout([
                            $class: 'GitSCM',
                            branches: [[name: env.BRANCH_NAME]],
                            doGenerateSubmoduleConfigurations: false,
                            extensions: [],
                            submoduleCfg: [],
                            userRemoteConfigs: [[url: env.SCM_VERRAZZANO_GIT_URL]]])
                        env.GIT_COMMIT = scmInfo.GIT_COMMIT
                        env.GIT_BRANCH = scmInfo.GIT_BRANCH
                    } else {
                        echo "SCM checkout of ${params.GIT_COMMIT_TO_USE}"
                        def scmInfo = checkout([
                            $class: 'GitSCM',
                            branches: [[name: params.GIT_COMMIT_TO_USE]],
                            doGenerateSubmoduleConfigurations: false,
                            extensions: [],
                            submoduleCfg: [],
                            userRemoteConfigs: [[url: env.SCM_VERRAZZANO_GIT_URL]]])
                        env.GIT_COMMIT = scmInfo.GIT_COMMIT
                        env.GIT_BRANCH = scmInfo.GIT_BRANCH
                        // If the commit we were handed is not what the SCM says we are using, fail
                        if (!env.GIT_COMMIT.equals(params.GIT_COMMIT_TO_USE)) {
                            echo "SCM didn't checkout the commit we expected. Expected: ${params.GIT_COMMIT_TO_USE}, Found: ${scmInfo.GIT_COMMIT}"
                            exit 1
                        }
                    }
                    echo "SCM checkout of ${env.GIT_BRANCH} at ${env.GIT_COMMIT}"
                }

                script {
                    echo "Generate git tags and save it to tags.txt file in the workspace"
                    sh """
                        cd ${workspace}
                        git tag | awk '/v1[.]/' >  tags.txt
                        cat tags.txt
                        git ls-remote --heads https://github.com/verrazzano/verrazzano.git 'refs/heads/release-*' | cut -d '/' -f 3 | cut -d '-' -f 2 | grep -v '0' > releaseBranches.txt
                        cat releaseBranches.txt
                    """
                    def props = readProperties file: '.verrazzano-development-version'
                    VERRAZZANO_DEV_VERSION = props['verrazzano-development-version']
                    TIMESTAMP = sh(returnStdout: true, script: "date +%Y%m%d%H%M%S").trim()
                    SHORT_COMMIT_HASH = sh(returnStdout: true, script: "git rev-parse --short=8 HEAD").trim()
                    // update the description with some meaningful info
                    currentBuild.description = SHORT_COMMIT_HASH + " : " + env.GIT_COMMIT + " : " + params.GIT_COMMIT_TO_USE
                    def currentCommitHash = env.GIT_COMMIT
                    def commitList = getCommitList()
                    withCredentials([file(credentialsId: 'jenkins-to-slack-users', variable: 'JENKINS_TO_SLACK_JSON')]) {
                        def userMappings = readJSON file: JENKINS_TO_SLACK_JSON
                        SUSPECT_LIST = getSuspectList(commitList, userMappings)
                        echo "Suspect list: ${SUSPECT_LIST}"
                    }
                }
            }
        }

        stage ('Upgrade every release to next Minor Release') {
            parallel {
                stage('Compute required N Upgrade Jobs') {
                steps {
                    script {
                        // Extract list of releases from git tags
                        final String fileContent = readFile(file: "${workspace}/tags.txt")
                        List gitTags = extractReleaseTags(fileContent)
                        echo "gitTags = ${gitTags}"
                        List finalReleaseList = removeExcludedReleases(gitTags)
                        echo "List of Releases after excluding the user requested releases: ${finalReleaseList}"
                        listOfUpgradeJobs = addTargetUpgradeVersion(finalReleaseList)

                        //Extract list of releases from git branches
                        fileContent = readFile(file: "${workspace}/releaseBranches.txt")
                        List releaseBranches = extractReleaseTags(fileContent)
                        echo "Release Branches: ${releaseBranches}"
                        List finalReleaseBranchesList = removeExcludedReleases(releaseBranches)

                        //minorReleaseList = getCleanReleaseVersion(finalReleaseBranchesList)
                        echo "List of minor release: ${finalReleaseBranchesList}"
                        def listOfTipOfReleaseUpgradeJobs = []
                        def releaseCommitMap = [:]
                        for(releaseBranch in finalReleaseBranchesList){
                            releaseCommit = getTipOfReleaseBranches(releaseBranch)
                            String key = "v"+releaseBranch
                            releaseCommitMap.put(releaseCommit, getTipOfBranchToMasterJob(key, releaseCommit))
                        }
                        listOfTipOfReleaseUpgradeJobs.add(releaseCommitMap)

                        def NJObs = Integer.parseInt(params.N_JOBS_FOR_EACH_BATCH)
                        echo "Number of jobs to be run in parallel : ${params.N_JOBS_FOR_EACH_BATCH}"
                        def k = 0
                        def  mapOfJobsInBatches = []
                        upgradeJobsStageMapping = [:]
                        for(int i=0;i<listOfUpgradeJobs.size();i++){
                            if(k<NJObs){
                                upgradeJobsStageMapping.put(listOfUpgradeJobs.get(i),getStageOfUpgradeJob(listOfUpgradeJobs.get(i)))
                                k++;
                            }
                            if(k==NJObs || i == listOfUpgradeJobs.size()-1){
                                mapOfJobsInBatches.add(upgradeJobsStageMapping)
                                upgradeJobsStageMapping = [:]
                                k = 0;
                            }
                            }
                            echo "Running upgrades from tip of release branch to master:"
                            print listOfTipOfReleaseUpgradeJobs
                            for(job in listOfTipOfReleaseUpgradeJobs){
                                parallel job
                                sleep 5
                            }
                            print mapOfJobsInBatches
                            for(batch in mapOfJobsInBatches){
                                parallel batch
                                sleep 5
                            }
                       }
                   }
                }
            }
        }
    }
    post {
        failure {
            script {
                if (env.JOB_NAME == "verrazzano-push-triggered-acceptance-tests/master" || env.JOB_NAME ==~ "verrazzano-push-triggered-acceptance-tests/release-1.*") {
                    if (isPagerDutyEnabled()) {
                        pagerduty(resolve: false, serviceKey: "$SERVICE_KEY", incDescription: "Verrazzano: ${env.JOB_NAME} - Failed", incDetails: "Job Failed - \"${env.JOB_NAME}\" build: ${env.BUILD_NUMBER}\n\nView the log at:\n ${env.BUILD_URL}\n\nBlue Ocean:\n${env.RUN_DISPLAY_URL}")
                    }
                   // slackSend ( channel: "$SLACK_ALERT_CHANNEL", message: "Job Failed - \"${env.JOB_NAME}\" build: ${env.BUILD_NUMBER}\n\nView the log at:\n ${env.BUILD_URL}\n\nBlue Ocean:\n${env.RUN_DISPLAY_URL}\n\nSuspects:\n${SUSPECT_LIST}" )
                }
            }
        }
    }
}

def isPagerDutyEnabled() {
    // this controls whether PD alerts are enabled
    if (NOTIFY_PAGERDUTY_TRIGGERED_FAILURES.equals("true")) {
        echo "Pager-Duty notifications enabled via global override setting"
        return true
    }
    return false
}

// Called in Stage Clean workspace and checkout steps
@NonCPS
def getCommitList() {
    echo "Checking for change sets"
    def commitList = []
    def changeSets = currentBuild.changeSets
    for (int i = 0; i < changeSets.size(); i++) {
        echo "get commits from change set"
        def commits = changeSets[i].items
        for (int j = 0; j < commits.length; j++) {
            def commit = commits[j]
            def id = commit.commitId
            echo "Add commit id: ${id}"
            commitList.add(id)
        }
    }
    return commitList
}

def trimIfGithubNoreplyUser(userIn) {
    if (userIn == null) {
        echo "Not a github noreply user, not trimming: ${userIn}"
        return userIn
    }
    if (userIn.matches(".*\\+.*@users.noreply.github.com.*")) {
        def userOut = userIn.substring(userIn.indexOf("+") + 1, userIn.indexOf("@"))
        return userOut;
    }
    if (userIn.matches(".*<.*@users.noreply.github.com.*")) {
        def userOut = userIn.substring(userIn.indexOf("<") + 1, userIn.indexOf("@"))
        return userOut;
    }
    if (userIn.matches(".*@users.noreply.github.com")) {
        def userOut = userIn.substring(0, userIn.indexOf("@"))
        return userOut;
    }
    echo "Not a github noreply user, not trimming: ${userIn}"
    return userIn
}

def getSuspectList(commitList, userMappings) {
    def retValue = ""
    def suspectList = []
    if (commitList == null || commitList.size() == 0) {
        echo "No commits to form suspect list"
    } else {
        for (int i = 0; i < commitList.size(); i++) {
            def id = commitList[i]
            try {
                def gitAuthor = sh(
                    script: "git log --format='%ae' '$id^!'",
                    returnStdout: true
                ).trim()
                if (gitAuthor != null) {
                    def author = trimIfGithubNoreplyUser(gitAuthor)
                    echo "DEBUG: author: ${gitAuthor}, ${author}, id: ${id}"
                    if (userMappings.containsKey(author)) {
                        def slackUser = userMappings.get(author)
                        if (!suspectList.contains(slackUser)) {
                            echo "Added ${slackUser} as suspect"
                            retValue += " ${slackUser}"
                            suspectList.add(slackUser)
                        }
                    } else {
                        // If we don't have a name mapping use the commit.author, at least we can easily tell if the mapping gets dated
                        if (!suspectList.contains(author)) {
                            echo "Added ${author} as suspect"
                            retValue += " ${author}"
                            suspectList.add(author)
                        }
                    }
                } else {
                    echo "No author returned from git"
                }
            } catch (Exception e) {
                echo "INFO: Problem processing commit ${id}, skipping commit: " + e.toString()
            }
        }
    }
    def startedByUser = "";
    def causes = currentBuild.getBuildCauses()
    echo "causes: " + causes.toString()
    for (cause in causes) {
        def causeString = cause.toString()
        echo "current cause: " + causeString
        def causeInfo = readJSON text: causeString
        if (causeInfo.userId != null) {
            startedByUser = causeInfo.userId
        }
    }

    if (startedByUser.length() > 0) {
        echo "Build was started by a user, adding them to the suspect notification list: ${startedByUser}"
        def author = trimIfGithubNoreplyUser(startedByUser)
        echo "DEBUG: author: ${startedByUser}, ${author}"
        if (userMappings.containsKey(author)) {
            def slackUser = userMappings.get(author)
            if (!suspectList.contains(slackUser)) {
                echo "Added ${slackUser} as suspect"
                retValue += " ${slackUser}"
                suspectList.add(slackUser)
            }
        } else {
            // If we don't have a name mapping use the commit.author, at least we can easily tell if the mapping gets dated
            if (!suspectList.contains(author)) {
               echo "Added ${author} as suspect"
               retValue += " ${author}"
               suspectList.add(author)
            }
        }
    } else {
        echo "Build not started by a user, not adding to notification list"
    }
    echo "returning suspect list: ${retValue}"
    return retValue
}

def List<List> addTargetUpgradeVersion(List releases){

    upgradeJobsList = []
    releases.each {
        upgradeJobsList.add(["$it", TARGET_UPGRADE_VERSION])
    }
    return upgradeJobsList
}

@NonCPS
List extractReleaseTags(final String fileContent) {
    List releases = []
    fileContent.eachLine { tag ->
        releases << tag
    }
    return releases
}

def getCleanReleaseVersion(List releaseList){
    List minorReleases = []
    for(tag in releaseList){
        if (tag[-1] == "0"){
            minorReleases.add(tag[1..3])
        }
    }
    return minorReleases
}

def getTipOfReleaseBranches(releaseNumber){ 
    completeReleaseVersionCommit = "release-" + releaseNumber
    scmReleaseBranchInfo = checkout([
        $class: 'GitSCM',
        branches: [[name: completeReleaseVersionCommit]],
        doGenerateSubmoduleConfigurations: false,
        extensions: [],
        submoduleCfg: [],
        userRemoteConfigs: [[url: env.SCM_VERRAZZANO_GIT_URL]]])
        def releaseBranchCommitSHA = scmReleaseBranchInfo.GIT_COMMIT
    return releaseBranchCommitSHA
}

// Remove the excluded releases from jobs
def removeExcludedReleases(List releases){
    echo "List of release branches inside function: ${releases}"
    def excludeReleases = params.EXCLUDE_RELEASES
    def excludeReleasesList = excludeReleases.trim().split('\\s*,\\s*')
    println(excludeReleasesList)
    def finalReleaseList  = []

    for(releaseTag in releases){
        def excluded = false
        for(excludedRelease in excludeReleasesList){
            String[] splitReleaseTag  = releaseTag.replace('v', '').split("\\.")
            def releaseTagMinorVersion = splitReleaseTag[0] + "." + splitReleaseTag[1]
            String[] splitDevVersion = VERRAZZANO_DEV_VERSION.split("\\.")
            if (splitReleaseTag[0] > splitDevVersion[0] || splitReleaseTag[1] > splitDevVersion[1] || releaseTagMinorVersion == excludedRelease || "v"+releaseTagMinorVersion == excludedRelease) {
                excluded = true
            }
        }
        if(excluded == false){
            finalReleaseList.add(releaseTag)
        }
    }
     echo "Final releases: ${finalReleaseList}"
    return finalReleaseList
}

def getStageOfUpgradeJob(job) {
    return {
        stage("Upgrade Verrazzano from version ${job[0]} to  ${job[1].replace('_', " ")}"){
            script {
                try {
                    echo "Running upgrade job from version ${job[0]} to ${job[1].replace('_', " ")}"
                    retry(count: JOB_PROMOTION_RETRIES) {
                        def jobStatus =  build job: "/verrazzano-upgrade-path-tests/${CLEAN_BRANCH_NAME}",
                        parameters: [
                            string(name: 'GIT_COMMIT_TO_USE', value: params.GIT_COMMIT_TO_USE),
                            string(name: 'VERSION_FOR_INSTALL', value: job[0]),
                            string(name: 'VERSION_FOR_UPGRADE', value: job[1]),
                            string(name: 'VZ_INSTALL_CONFIG', value: params.VZ_INSTALL_CONFIG),
                            string(name: 'IS_TRIGGERED_MANUALLY', value: "NO"),
                            string(name: 'VERRAZZANO_OPERATOR_IMAGE', value: params.VERRAZZANO_OPERATOR_IMAGE),
                            string(name: 'WILDCARD_DNS_DOMAIN', value: params.WILDCARD_DNS_DOMAIN),
                            string(name: 'TAGGED_TESTS', value: params.TAGGED_TESTS),
                            string(name: 'INCLUDED_TESTS', value: params.INCLUDED_TESTS),
                            string(name: 'EXCLUDED_TESTS', value: params.EXCLUDED_TESTS),
                            string(name: 'CONSOLE_REPO_BRANCH', value: params.CONSOLE_REPO_BRANCH)
                        ],  wait: true, propagate: true
                    }
                }catch(err){
                    catchError(message: "${STAGE_NAME} Failed with ${err}", buildResult: 'FAILURE', stageResult: 'FAILURE'){
                        echo "Caught: ${err}"
                        sh "exit 1"
                    }
                }
            }
        }
    }
}

def getTipOfBranchToMasterJob(String release, String commitSHA) {
    return {
        stage("Upgrade Verrazzano from tip of ${release} to master") {
            script{
                try{
                    echo "Running upgrade job from version ${release}-${commitSHA} to master"
                    retry(count: JOB_PROMOTION_RETRIES) {
                        def jobStatus =  build job: "/verrazzano-upgrade-path-tests/${CLEAN_BRANCH_NAME}",
                        parameters: [
                            string(name: 'GIT_COMMIT_TO_USE', value: "${commitSHA}"),
                            string(name: 'VERSION_FOR_INSTALL', value: "${release}" ),
                            string(name: 'VERSION_FOR_UPGRADE', value: "master"),
                            string(name: 'VZ_INSTALL_CONFIG', value: params.VZ_INSTALL_CONFIG),
                            string(name: 'IS_TRIGGERED_MANUALLY', value: "NO"),
                            string(name: 'VERRAZZANO_OPERATOR_IMAGE', value: params.VERRAZZANO_OPERATOR_IMAGE),
                            string(name: 'WILDCARD_DNS_DOMAIN', value: params.WILDCARD_DNS_DOMAIN),
                            string(name: 'TAGGED_TESTS', value: params.TAGGED_TESTS),
                            string(name: 'INCLUDED_TESTS', value: params.INCLUDED_TESTS),
                            string(name: 'EXCLUDED_TESTS', value: params.EXCLUDED_TESTS),
                            string(name: 'CONSOLE_REPO_BRANCH', value: params.CONSOLE_REPO_BRANCH)
                        ],  wait: true, propagate: true
                    }
                } catch(err) {
                    catchError(message: "${STAGE_NAME} Failed with ${err}", buildResult: 'FAILURE', stageResult: 'FAILURE') {
                        echo "Caught: ${err}"
                        sh "exit 1"
                    }
                }
            }
        }
    }
}