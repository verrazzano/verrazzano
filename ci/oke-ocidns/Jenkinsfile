// Copyright (c) 2020, 2021, Oracle and/or its affiliates.
// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.

// This runs the acceptance tests on an OKE cluster with OCI DNS
// This is used during the release process
// This will eventually be replaced by the new multi-cluster job!

def DEFAULT_REPO_URL
def zoneId = UUID.randomUUID().toString().substring(0,3).replace('-','')
def dns_zone_ocid = 'dummy'
// for different Jenkins jobs sharing this Jenkins file, the default TEST_ENV (the first in testEnvironments) is different.
def testEnvironments = env.JOB_NAME.contains('oci-dns-acceptance')
                       ? ["ocidns_oke", "magicdns_oke", "kind"]
                       : env.JOB_NAME.contains('magic-dns')
                       ? ["magicdns_oke", "ocidns_oke", "kind"]
                       : ["kind", "magicdns_oke", "ocidns_oke"]
def acmeEnvironments = [ "staging", "production" ]
def certIssuers = [ "self-signed", "acme" ]
def agentLabel = env.JOB_NAME.contains('-dns-') ? "" : "VM.Standard2.8"
def availableRegions = [  "ap-chuncheon-1", "ap-hyderabad-1", "ap-melbourne-1", "ap-osaka-1", "ap-seoul-1", "ap-sydney-1",
                          "ap-tokyo-1", "ca-montreal-1", "ca-toronto-1", "eu-amsterdam-1", "eu-frankfurt-1", "eu-zurich-1", "me-jeddah-1",
                          "uk-london-1", "us-phoenix-1" ]
Collections.shuffle(availableRegions)
def keepOKEClusterOnFailure = "false"

pipeline {
    options {
        skipDefaultCheckout true
        copyArtifactPermission('*');
    }

    agent {
        docker {
            image "${RUNNER_DOCKER_IMAGE}"
            args "${RUNNER_DOCKER_ARGS} --cap-add=NET_ADMIN"
            registryUrl "${RUNNER_DOCKER_REGISTRY_URL}"
            label "${agentLabel}"
        }
    }

    parameters {
        choice (description: 'OCI region to launch OKE clusters in', name: 'OKE_CLUSTER_REGION',
            // 1st choice is the default value
            choices: availableRegions )
        choice (description: 'OKE node pool configuration', name: 'OKE_NODE_POOL',
            // 1st choice is the default value
            choices: [ "VM.Standard2.4-2", "VM.Standard.E3.Flex-8-2", "VM.Standard.E2.2" ])
        choice (description: 'Kubernetes Version for OKE Cluster', name: 'OKE_CLUSTER_VERSION',
                // 1st choice is the default value
                choices: [ "v1.18.10", "v1.17.13", "v1.16.15" ])
        choice (description: 'Certificate Issuer', name: 'CERT_ISSUER',
                choices: certIssuers)
        choice (description: 'ACME Certificate Environment (Staging or Production)', name: 'ACME_ENVIRONMENT',
                choices: acmeEnvironments)
        string defaultValue: 'dev', description: 'Verrazzano install profile name', name: "INSTALL_PROFILE", trim: true
        string defaultValue: 'NONE', description: 'Verrazzano platform operator image name (within ghcr.io/verrazzano repo)', name: 'VERRAZZANO_OPERATOR_IMAGE', trim: true
        choice (description: 'Verrazzano Test Environment', name: 'TEST_ENV',
                choices: testEnvironments)
        string (name: 'GIT_COMMIT_TO_USE',
                        defaultValue: 'NONE',
                        description: 'This is the full git commit hash from the source build to be used for all jobs',
                        trim: true)
        booleanParam (description: 'Whether to create the cluster with Calico for AT testing', name: 'CREATE_CLUSTER_USE_CALICO', defaultValue: true)
        choice (description: 'ACME Certificate Environment (Staging or Production)', name: 'ACME_ENVIRONMENT',
                choices: acmeEnvironments)
        booleanParam (description: 'Whether to dump k8s cluster on success (off by default can be useful to capture for comparing to failed cluster)', name: 'DUMP_K8S_CLUSTER_ON_SUCCESS', defaultValue: false)
    }

    environment {
        CLUSTER_NAME = 'byok8s-kind'
        OCR_CREDS = credentials('ocr-pull-and-push-account')
        NETRC_FILE = credentials('netrc')
        OCR_REPO = 'container-registry.oracle.com'
        GHCR_REPO = 'ghcr.io'
        VERRAZZANO_OPERATOR_IMAGE="${params.VERRAZZANO_OPERATOR_IMAGE}"
        TEST_ENV = "${params.TEST_ENV}"
        INSTALL_PROFILE = "${params.INSTALL_PROFILE}"
        GITHUB_PKGS_CREDS = credentials('github-packages-credentials-rw')
        OCIR_CREDS = credentials('ocir-pull-and-push-account')
        WEBLOGIC_PSW = credentials('weblogic-example-domain-password') // needed by install_todo.sh OAM example test
        DATABASE_PSW = credentials('todo-mysql-password') // needed by install_todo.sh OAM example test
        IMAGE_PULL_SECRET = 'verrazzano-container-registry'
        OCIR_PHX_REPO = 'phx.ocir.io'
        POST_DUMP_FAILED = 'false'

        TF_VAR_tenancy_id = credentials('oci-tenancy')
        TF_VAR_user_id = credentials('oci-user-ocid')
        TF_VAR_region = "${params.OKE_CLUSTER_REGION}"
        TF_VAR_kubernetes_version = "${params.OKE_CLUSTER_VERSION}"
        TF_VAR_nodepool_config = "${params.OKE_NODE_POOL}"
        TF_VAR_api_fingerprint = credentials('oci-api-key-fingerprint')
        TF_VAR_api_private_key_path = credentials('oci-api-key')
        TF_VAR_s3_bucket_access_key = credentials('oci-s3-bucket-access-key')
        TF_VAR_s3_bucket_secret_key = credentials('oci-s3-bucket-secret-key')
        TF_VAR_ssh_public_key_path = credentials('oci-tf-pub-ssh-key')

        OCI_CLI_TENANCY = credentials('oci-tenancy')
        OCI_CLI_USER = credentials('oci-user-ocid')
        OCI_CLI_FINGERPRINT = credentials('oci-api-key-fingerprint')
        OCI_CLI_KEY_FILE = credentials('oci-api-key')
        OCI_CLI_REGION = "${params.OKE_CLUSTER_REGION}"

        TEST_CONFIG_FILE = "${HOME}/testConfigOke.yaml"
        CLUSTER_TYPE = getTestClusterType("${TEST_ENV}")
        KUBECONFIG = "${WORKSPACE}/test_kubeconfig"
        VERRAZZANO_KUBECONFIG = "${KUBECONFIG}"

        TF_VAR_compartment_id = credentials('oci-tiburon-dev-compartment-ocid')

        SOCKS_MODEL_FILE = "${WORKSPACE}/examples/sock-shop/sock-shop-model.yaml"
        SOCKS_BINDING_FILE = "${WORKSPACE}/examples/sock-shop/sock-shop-binding.yaml"
        BOBS_MODEL_FILE = "${WORKSPACE}/examples/bobs-books/bobs-books-model.yaml"
        BOBS_BINDING_FILE = "${WORKSPACE}/examples/bobs-books/bobs-books-binding.yaml"
        BOBS_MYSQL_DEPLOY_FILE = "${WORKSPACE}/examples/bobs-books/mysql.yaml"
        HELIDON_UPGRADE_MODEL_FILE = "${WORKSPACE}/examples/hello-helidon/hello-world-model.yaml"
        HELIDON_UPGRADE_BINDING_FILE = "${WORKSPACE}/examples/hello-helidon/hello-world-binding.yaml"

        DISABLE_SPINNER=1
        OCI_CLI_SUPPRESS_FILE_PERMISSIONS_WARNING = 'True'

        TIMESTAMP = sh(returnStdout: true, script: "date +%Y%m%d%H%M%S").trim()
        GITHUB_API_TOKEN = credentials('github-api-token-release-assets')

        SERVICE_KEY = credentials('PAGERDUTY_SERVICE_KEY')

        IMG_LIST_FILE = "${WORKSPACE}/verrazzano_images.txt"
        POST_DUMP_FAILED_FILE = "${WORKSPACE}/post_dump_failed_file.tmp"

        INSTALL_CONFIG_FILE_OCIDNS = "${WORKSPACE}/tests/e2e/config/scripts/install-verrazzano-ocidns.yaml"
        INSTALL_CONFIG_FILE_XIPIO = "${WORKSPACE}/tests/e2e/config/scripts/install-verrazzano-xipio.yaml"
        INSTALL_CONFIG_FILE_NODEPORT = "${WORKSPACE}/tests/e2e/config/scripts/install-verrazzano-nodeport.yaml"

        OCI_DNS_ZONE_NAME="z${zoneId}.v8o.oracledx.com"
        CERT_ISSUER="${params.CERT_ISSUER}"
        ACME_ENVIRONMENT="${params.ACME_ENVIRONMENT}"

        VZ_ENVIRONMENT_NAME = "${params.TEST_ENV == 'ocidns_oke' ? 'b' + env.BUILD_NUMBER : 'default'}"

        DUMP_KUBECONFIG="${KUBECONFIG}"
        DUMP_COMMAND="${GO_REPO_PATH}/verrazzano/tools/scripts/k8s-dump-cluster.sh"
        TEST_DUMP_ROOT="${WORKSPACE}/test-cluster-dumps"

        CALICO_VERSION="3.18.1"
    }

    stages {

        stage('Initialize') {
            steps {
                script {
                    if (params.GIT_COMMIT_TO_USE == "NONE") {
                        echo "Specific GIT commit was not specified, use current head"
                        def scmInfo = checkout scm
                        env.GIT_COMMIT = scmInfo.GIT_COMMIT
                        env.GIT_BRANCH = scmInfo.GIT_BRANCH
                    } else {
                        echo "SCM checkout of ${params.GIT_COMMIT_TO_USE}"
                        def scmInfo = checkout([
                            $class: 'GitSCM',
                            branches: [[name: params.GIT_COMMIT_TO_USE]],
                            doGenerateSubmoduleConfigurations: false,
                            extensions: [],
                            submoduleCfg: [],
                            userRemoteConfigs: [[url: env.SCM_VERRAZZANO_GIT_URL]]])
                        env.GIT_COMMIT = scmInfo.GIT_COMMIT
                        env.GIT_BRANCH = scmInfo.GIT_BRANCH
                        // If the commit we were handed is not what the SCM says we are using, fail
                        if (!env.GIT_COMMIT.equals(params.GIT_COMMIT_TO_USE)) {
                            echo "SCM didn't checkout the commit we expected. Expected: ${params.GIT_COMMIT_TO_USE}, Found: ${scmInfo.GIT_COMMIT}"
                            exit 1
                        }
                    }
                    echo "SCM checkout of ${env.GIT_BRANCH} at ${env.GIT_COMMIT}"
                }

                sh """
                    cp -f "${NETRC_FILE}" $HOME/.netrc
                    chmod 600 $HOME/.netrc
                """
                println("${params.OKE_CLUSTER_REGION}")
                println("agentlabel: ${agentLabel}")
                sh """
                    echo "${NODE_LABELS}"
                """

                script {
                    SHORT_COMMIT_HASH = sh(returnStdout: true, script: "git rev-parse --short=8 HEAD").trim()
                    // update the description with some meaningful info
                    currentBuild.description = SHORT_COMMIT_HASH + " : " + params.OKE_CLUSTER_REGION + " : " + params.OKE_CLUSTER_VERSION
                }
            }
        }

        stage("install-oke") {
            when { expression { return params.TEST_ENV != 'kind' } }
            steps {
                script {
                    withCredentials([sshUserPrivateKey(credentialsId: '5fcc03de-31ce-4566-b11f-9de38e5d98fd', keyFileVariable: 'OPC_USER_KEY_FILE', passphraseVariable: 'OPC_USER_PASSPHRASE', usernameVariable: 'OPC_USERNAME')]) {
                        sh """
                            # get the ssh public key
                            ssh-keygen -y -e -f ${OPC_USER_KEY_FILE} > /tmp/opc_ssh2.pub
                            # convert SSH2 public key into an OpenSSH format
                            ssh-keygen -i -f /tmp/opc_ssh2.pub > /tmp/opc_ssh.pub
                            # set the ssh public key value for terraform
                            export TF_VAR_ssh_public_key_path=/tmp/opc_ssh.pub
                            export TF_VAR_label_prefix=${env.BUILD_NUMBER}-${env.TIMESTAMP}
                            export TF_VAR_state_name=${env.BUILD_NUMBER}-${env.TIMESTAMP}-${env.BRANCH_NAME}

                            if [ ${CREATE_CLUSTER_USE_CALICO} == true ]; then
                                ${WORKSPACE}/ci/scripts/download_calico.sh ${CALICO_VERSION}
                            fi

                            # call create_oke_cluster with cluster access private
                            ${WORKSPACE}/tests/e2e/config/scripts/create_oke_cluster.sh true ${CREATE_CLUSTER_USE_CALICO} ${CALICO_VERSION}
                        """
                    }
                }
            }
            post {
                failure {
                    script {
                        echo "Cluster create failed"
                        keepOKEClusterOnFailure = "true"
                    }
                }
            }
        }

        stage('install-kind') {
            when { expression { return params.TEST_ENV == 'kind' } }
            steps {
                sh """
                    cd ${WORKSPACE}/verrazzano-acceptance-test-suite
                    ${WORKSPACE}/verrazzano-acceptance-test-suite/scripts/install_kind.sh
                """
            }
        }

        stage("create-image-pull-secrets") {
            steps {
                sh """
                    # Create image pull secret for Verrazzano docker images
                    cd ${WORKSPACE}
                    ${WORKSPACE}/tests/e2e/config/scripts/create-image-pull-secret.sh "${IMAGE_PULL_SECRET}" "${GHCR_REPO}" "${GITHUB_PKGS_CREDS_USR}" "${GITHUB_PKGS_CREDS_PSW}"
                    ${WORKSPACE}/tests/e2e/config/scripts/create-image-pull-secret.sh github-packages "${GHCR_REPO}" "${GITHUB_PKGS_CREDS_USR}" "${GITHUB_PKGS_CREDS_PSW}"
                    ${WORKSPACE}/tests/e2e/config/scripts/create-image-pull-secret.sh ocr "${OCR_REPO}" "${OCR_CREDS_USR}" "${OCR_CREDS_PSW}"
                """
            }
        }

        stage("install-platform-operator") {
            environment {
                OCI_CLI_AUTH="instance_principal"
                OCI_OS_NAMESPACE = credentials('oci-os-namespace')
                OCI_OS_BUCKET="verrazzano-builds"
            }
            steps {
                sh """
                    echo "Install Platform Operator"
                    oci --region us-phoenix-1 os object get --namespace ${OCI_OS_NAMESPACE} -bn ${OCI_OS_BUCKET} --name ${SHORT_COMMIT_HASH}/operator.yaml --file ${WORKSPACE}/downloaded-operator.yaml
                    cp ${WORKSPACE}/downloaded-operator.yaml ${WORKSPACE}/acceptance-test-operator.yaml

                    # Install the verrazzano-platform-operator
                    kubectl apply -f $WORKSPACE/acceptance-test-operator.yaml

                    # make sure ns exists
                    ${WORKSPACE}/tests/e2e/config/scripts/check_verrazzano_ns_exists.sh verrazzano-install
                    # create secret in verrazzano-install ns
                    ${WORKSPACE}/tests/e2e/config/scripts/create-image-pull-secret.sh "${IMAGE_PULL_SECRET}" "${GHCR_REPO}" "${GITHUB_PKGS_CREDS_USR}" "${GITHUB_PKGS_CREDS_PSW}" "verrazzano-install"
                """
            }
            post {
                always {
                    archiveArtifacts artifacts: "acceptance-test-operator.yaml,downloaded-operator.yaml", allowEmptyArchive: true
                }
            }
        }

        stage("create-dns-zone") {
            when { expression { return params.TEST_ENV == 'ocidns_oke' } }
            steps {
                script {
                    dns_zone_ocid = sh(script: "${WORKSPACE}/tests/e2e/config/scripts/oci_dns_ops.sh -o create -c ${TF_VAR_compartment_id} -s z${zoneId}", returnStdout: true)
                }
            }
        }

        stage("setup-oci-dns-config") {
            when { expression { return params.TEST_ENV == 'ocidns_oke' } }
            environment {
                OCI_DNS_COMPARTMENT_OCID = credentials('oci-dns-compartment')
                OCI_PRIVATE_KEY_FILE = credentials('oci-api-key')
                OCI_DNS_ZONE_OCID = "${dns_zone_ocid}"
            }
            steps {
                script {
                    sh """
                        echo "Installing yq"
                        GO111MODULE=on go get github.com/mikefarah/yq/v4
                        export PATH=${HOME}/go/bin:${PATH}
                        ${WORKSPACE}/tests/e2e/config/scripts/process_oci_dns_install_yaml.sh $INSTALL_CONFIG_FILE_OCIDNS $CERT_ISSUER $ACME_ENVIRONMENT
                    """
                }
            }
        }

        stage("create-oci-config-secret") {
            when { expression { return params.TEST_ENV == 'ocidns_oke' } }
            steps {
                script {
                    sh """
                        ${WORKSPACE}/tests/e2e/config/scripts/create-test-oci-config-secret.sh
                    """
                }
            }
        }

        stage("setup-xip-io-config") {
            when { expression { return params.TEST_ENV == 'magicdns_oke' } }
            steps {
                script {
                    sh """
                        echo "Installing yq"
                        GO111MODULE=on go get github.com/mikefarah/yq/v4
                        export PATH=${HOME}/go/bin:${PATH}
                        ${WORKSPACE}/tests/e2e/config/scripts/process_xipio_install_yaml.sh $INSTALL_CONFIG_FILE_XIPIO
                    """
                }
            }
        }

        stage("setup-nodeport-config") {
            when { expression { return params.TEST_ENV == 'kind' } }
            steps {
                script {
                    sh """
                        echo "Installing yq"
                        GO111MODULE=on go get github.com/mikefarah/yq/v4
                        export PATH=${HOME}/go/bin:${PATH}
                        ${WORKSPACE}/tests/e2e/config/scripts/process_nodeport_install_yaml.sh $INSTALL_CONFIG_FILE_NODEPORT
                    """
                }
            }
        }

        stage("install-verrazzano") {
            steps {
                sh """
                    echo "Waiting for Operator to be ready"
                    kubectl -n verrazzano-install rollout status deployment/verrazzano-platform-operator
                    echo "Installing Verrazzano on ${TEST_ENV}"
                    # apply config to create cluster
                    if [ "${TEST_ENV}" == "magicdns_oke" ]; then
                      kubectl apply -f ${INSTALL_CONFIG_FILE_XIPIO}
                    elif [ "${TEST_ENV}" == "ocidns_oke" ]; then
                      kubectl apply -f ${INSTALL_CONFIG_FILE_OCIDNS}
                    elif [ "${TEST_ENV}" == "kind" ]; then
                      kubectl apply -f ${INSTALL_CONFIG_FILE_NODEPORT}
                    fi
                    # wait for Verrazzano install to complete
                    ${WORKSPACE}/tests/e2e/config/scripts/wait-for-verrazzano-install.sh
                    # Create acceptance test configuration file
                    ${WORKSPACE}/tests/e2e/config/scripts/common-test-setup-script.sh "${WORKSPACE}" "${TEST_CONFIG_FILE}" "${env.DOCKER_REPO}" "${KUBECONFIG}" "${OCR_CREDS_USR}" "${OCR_CREDS_PSW}" "${VZ_ENVIRONMENT_NAME}"

                    # edit DNS info in the test config file
                    if [ "${TEST_ENV}" == "magicdns_oke" ]; then
                      ${WORKSPACE}/tests/e2e/config/scripts/get_ingress_ip.sh ${TEST_CONFIG_FILE}
                    elif [ "${TEST_ENV}" == "ocidns_oke" ]; then
                      ${WORKSPACE}/tests/e2e/config/scripts/get_oci_dns_zone.sh ${TEST_CONFIG_FILE} ${OCI_DNS_ZONE_NAME}
                    elif [ "${TEST_ENV}" == "kind" ]; then
                      ${WORKSPACE}/tests/e2e/config/scripts/get_node_ip.sh ${CLUSTER_NAME} ${TEST_CONFIG_FILE}
                    fi
                    echo "----------Test config file:-------------"
                    cat ${TEST_CONFIG_FILE}
                    echo "----------------------------------------"
                """
            }
            post {
                always {
                    sh """
                        ## dump out install logs
                        mkdir -p ${WORKSPACE}/platform-operator/scripts/install/build/logs
                        kubectl logs --selector=job-name=verrazzano-install-my-verrazzano > ${WORKSPACE}/platform-operator/scripts/install/build/logs/verrazzano-install.log --tail -1
                        kubectl describe pod --selector=job-name=verrazzano-install-my-verrazzano > ${WORKSPACE}/platform-operator/scripts/install/build/logs/verrazzano-install-job-pod.out
                        echo "Verrazzano Installation logs dumped to verrazzano-install.log"
                        echo "Verrazzano Install pod description dumped to verrazzano-install-job-pod.out"
                        echo "------------------------------------------"
                    """
                }
            }
        }

        stage('acceptance-tests-1') {
            parallel {
                // Quick fix for Bob's Books test failure that reports "Webpage is NOT Robert's Books Greetings from Verrazzano!"
                //     Do not run this in parallel with Bob's Books because both specify a mapping for "/" path.
                // Real fix may be to have each app use a different dnsName in the ingress binding section of the binding file
                // and put a host header in the corresponding calls to the app.
                stage('generic-springboot') {
                    environment {
                        DIAGNOSTIC_LOG="${WORKSPACE}/platform-operator/scripts/install/build/logs/generic-springboot-test.log"
                        DUMP_DIRECTORY="${TEST_DUMP_ROOT}/examples-springboot"
                    }
                    steps {
                        script {
                            runGinkgo('examples/springboot')
                        }
                    }
                    post {
                        always {
                            dumpGenericSpringbootObjects()
                            dumpGenericSpringbootLogs()
                        }
                    }
                }
            }
        }

        stage('acceptance-tests-2') {
            parallel {
                stage('verify-install') {
                    steps {
                        catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                            sh """
                                cd ${WORKSPACE}/tests/e2e
                                ginkgo -p --randomizeAllSpecs -v -keepGoing --noColor verify-install/...
                            """
                        }
                    }
                }
                stage('hello-helidon') {
                    environment {
                        DUMP_DIRECTORY="${TEST_DUMP_ROOT}/examples-hello-helidon"
                    }
                    steps {
                        script {
                            runGinkgoFailFast('examples/helidon')
                        }
                    }
                }
                stage('restapi') {
                    steps {
                        script {
                            runGinkgo('verify-infra/restapi')
                        }
                    }
                }
                stage('vmi') {
                    steps {
                        script {
                            runGinkgo('verify-infra/vmi')
                        }
                    }
                }
                stage('oam') {
                    steps {
                        script {
                            runGinkgo('verify-infra/oam')
                        }
                    }
                }
                stage('lift-and-shift') {
                    environment {
                        DIAGNOSTIC_LOG="${WORKSPACE}/platform-operator/scripts/install/build/logs/lift-and-shift-test.log"
                        DUMP_DIRECTORY="${TEST_DUMP_ROOT}/examples-lift-and-shift"
                    }
                    steps {
                        script {
                            runGinkgoFailFast('examples/todo')
                        }
                    }
                }
                stage('istio authorization policy') {
                    environment {
                        DUMP_DIRECTORY="${TEST_DUMP_ROOT}/examples-istio-auth-policy"
                    }
                    steps {
                        runGinkgo('istio/authz')
                    }
                }
                stage('security role based access') {
                    environment {
                        DUMP_DIRECTORY="${TEST_DUMP_ROOT}/examples-rbac"
                    }
                    steps {
                        runGinkgo('security/rbac')
                    }
                }
                stage('bobs-books') {
                    environment {
                        DIAGNOSTIC_LOG="${WORKSPACE}/platform-operator/scripts/install/build/logs/bobs-book-test.log"
                        DUMP_DIRECTORY="${TEST_DUMP_ROOT}/examples-bobs-books-dump"
                    }
                    steps {
                        script {
                            runGinkgoFailFast('examples/bobsbooks')
                        }
                        sh """
                            ${WORKSPACE}/tests/e2e/config/scripts/get_verrazzano_image.sh bob >> ${IMG_LIST_FILE}
                            ${WORKSPACE}/tests/e2e/config/scripts/get_verrazzano_image.sh bobby >> ${IMG_LIST_FILE}
                            ${WORKSPACE}/tests/e2e/config/scripts/get_verrazzano_image.sh robert >> ${IMG_LIST_FILE}
                        """
                    }
                    post {
                        always {
                            dumpBobObjects()
                            dumpBobLogs()
                        }
                    }
                }
                stage('socks') {
                    environment {
                        DIAGNOSTIC_LOG="${WORKSPACE}/platform-operator/scripts/install/build/logs/socks-test.log"
                        DUMP_DIRECTORY="${TEST_DUMP_ROOT}/examples-socks"
                    }
                    steps {
                        script {
                            runGinkgo('examples/socks')
                        }
                        sh """
                            ${WORKSPACE}/tests/e2e/config/scripts/create_verrazzano_image_list.sh ${IMG_LIST_FILE}
                            # make necessary substitutions
                            sed -i 's/example-hello-world-helidon/example-helidon-greet-app-v1/' ${IMG_LIST_FILE}
                            sed -i 's/example-bobs-books-order-manager/example-bobs-bookstore-order-manager/' ${IMG_LIST_FILE}
                        """
                   }
                    post {
                        always {
                            dumpSockObjects()
                            dumpSockLogs()
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            script {
                if (params.DUMP_K8S_CLUSTER_ON_SUCCESS == true || currentBuild.currentResult == 'FAILURE') {
                    dumpK8sCluster('oke-acceptance-tests-cluster-dump')
                }
            }

            dumpVerrazzanoSystemPods()
            dumpCattleSystemPods()
            dumpNginxIngressControllerLogs()
            dumpVerrazzanoPlatformOperatorLogs()

            sh """
                echo "sorting the images file prior to archiving"
                if [ -f ${IMG_LIST_FILE} ];
                then
                    sort -u -o ${IMG_LIST_FILE} ${IMG_LIST_FILE}
                fi
            """
            archiveArtifacts artifacts: '**/coverage.html,**/logs/**,**/verrazzano_images.txt,**/*-cluster-dump/**,**/test-cluster-dumps/**', allowEmptyArchive: true
            junit testResults: '**/*test-result.xml', allowEmptyResults: true
            sh """
                if [ "${TEST_ENV}" == "ocidns_oke" ]; then
                  ${WORKSPACE}/tests/e2e/config/scripts/oci_dns_ops.sh -o delete -s z${zoneId} || echo "Failed to delete DNS zone z${zoneId}"
                fi
                if [ "${TEST_ENV}" == "kind" ]; then
                  ${WORKSPACE}/tests/e2e/config/scripts/delete-kind-cluster.sh
                elif [ "${keepOKEClusterOnFailure}" == "false" ]; then
                  TF_VAR_label_prefix=${env.BUILD_NUMBER}-${env.TIMESTAMP} TF_VAR_state_name=${env.BUILD_NUMBER}-${env.TIMESTAMP}-${env.BRANCH_NAME} ${WORKSPACE}/tests/e2e/config/scripts/delete_oke_cluster.sh
                fi
                if [ -f ${POST_DUMP_FAILED_FILE} ]; then
                  echo "Failures seen during dumping of artifacts, treat post as failed"
                  exit 1
                fi
            """
       }
       failure {
            script {
                if (env.JOB_NAME == "verrazzano/master" || env.JOB_NAME == "verrazzano/develop") {
                    emailext recipientProviders: [[$class: 'CulpritsRecipientProvider'],[$class: 'RequesterRecipientProvider']],
                       subject: "Verrazzano: ${env.JOB_NAME} - Failed",
                       body: "Job Failed - \"${env.JOB_NAME}\" build: ${env.BUILD_NUMBER}\n\nView the log at:\n ${env.BUILD_URL}\n\nBlue Ocean:\n${env.RUN_DISPLAY_URL}"
                    pagerduty(resolve: false, serviceKey: "$SERVICE_KEY", incDescription: "Verrazzano: ${env.JOB_NAME} - Failed", incDetails: "Job Failed - \"${env.JOB_NAME}\" build: ${env.BUILD_NUMBER}\n\nView the log at:\n ${env.BUILD_URL}\n\nBlue Ocean:\n${env.RUN_DISPLAY_URL}")
                    slackSend ( message: "Job Failed - \"${env.JOB_NAME}\" build: ${env.BUILD_NUMBER}\n\nView the log at:\n ${env.BUILD_URL}\n\nBlue Ocean:\n${env.RUN_DISPLAY_URL}" )
                }
           }
       }
    }
}

def getTestClusterType(testEnv) {
    if("kind".equalsIgnoreCase(testEnv)) {
        return "KIND"
    } else {
        return "OKE"
    }
}

def runGinkgo(testSuitePath) {
    catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
        sh """
            cd ${WORKSPACE}/tests/e2e
            ginkgo -v -keepGoing --noColor ${testSuitePath}/...
        """
    }
}

def runGinkgoFailFast(testSuitePath) {
    catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
        sh """
            cd ${WORKSPACE}/tests/e2e
            ginkgo -v -failFast --noColor ${testSuitePath}/...
        """
    }
}

def dumpK8sCluster(dumpDirectory) {
    sh """
        ${WORKSPACE}/tools/scripts/k8s-dump-cluster.sh -d ${dumpDirectory} -r ${dumpDirectory}/cluster-dump/analysis.report
    """
}

def dumpBobObjects() {
    sh """
        ${WORKSPACE}/platform-operator/scripts/install/k8s-dump-objects.sh -o pods -n bobby -r "bobbys-helidon-stock-application-*" -m "bobby helidon stock apps" || echo "failed" > ${POST_DUMP_FAILED_FILE}
        ${WORKSPACE}/platform-operator/scripts/install/k8s-dump-objects.sh -o pods -n bobby -r "bobbys-coherence-storage-*" -m "bobbys coherence storage" || echo "failed" > ${POST_DUMP_FAILED_FILE}
        ${WORKSPACE}/platform-operator/scripts/install/k8s-dump-objects.sh -o pods -n robert -r "roberts-helidon-stock-application-*" -m "robert helidon stock apps" || echo "failed" > ${POST_DUMP_FAILED_FILE}
        ${WORKSPACE}/platform-operator/scripts/install/k8s-dump-objects.sh -o pods -n robert -r "roberts-coherence-storage-*" -m "robert coherence storage" || echo "failed" > ${POST_DUMP_FAILED_FILE}
        ${WORKSPACE}/platform-operator/scripts/install/k8s-dump-objects.sh -o pods -n verrazzano-system -r "vmi-bobs-books-binding-es-*" -m "bob elastic search" || echo "failed" > ${POST_DUMP_FAILED_FILE}
        ${WORKSPACE}/platform-operator/scripts/install/k8s-dump-objects.sh -o pods -n bob -r "bobs-bookstore-*" -m "bob's servers" || echo "failed" > ${POST_DUMP_FAILED_FILE}
        ${WORKSPACE}/platform-operator/scripts/install/k8s-dump-objects.sh -o pods -n bobby -r "bobbys-front-end-*" -m "bobby's weblogic servers" || echo "failed" > ${POST_DUMP_FAILED_FILE}

        ${WORKSPACE}/platform-operator/scripts/install/k8s-dump-objects.sh -o nodes -n default -m "describing nodes" || echo "failed" > ${POST_DUMP_FAILED_FILE}

        kubectl get event -A || echo "failed" > ${POST_DUMP_FAILED_FILE}
    """
}

def dumpBobLogs() {
    dumpVerrazzanoOperatorLogs()
    dumpVerrazzanoApiLogs()
    sh """
        export DIAGNOSTIC_LOG="${WORKSPACE}/platform-operator/scripts/install/build/logs/bobs-bookstore-adminserver.log"
        ${WORKSPACE}/platform-operator/scripts/install/k8s-dump-objects.sh -o pods -n bob -r "bobs-bookstore-adminserver*" -m "bob admin server" -l -c weblogic-server || echo "failed" > ${POST_DUMP_FAILED_FILE}
        export DIAGNOSTIC_LOG="${WORKSPACE}/platform-operator/scripts/install/build/logs/bobs-bookstore-managed-server1.log"
        ${WORKSPACE}/platform-operator/scripts/install/k8s-dump-objects.sh -o pods -n bob -r "bobs-bookstore-managed-server1*" -m "bob managed server 1" -l -c weblogic-server || echo "failed" > ${POST_DUMP_FAILED_FILE}
        export DIAGNOSTIC_LOG="${WORKSPACE}/platform-operator/scripts/install/build/logs/bobs-bookstore-managed-server2.log"
        ${WORKSPACE}/platform-operator/scripts/install/k8s-dump-objects.sh -o pods -n bob -r "bobs-bookstore-managed-server2*" -m "bob managed server 2" -l -c weblogic-server || echo "failed" > ${POST_DUMP_FAILED_FILE}
        export DIAGNOSTIC_LOG="${WORKSPACE}/platform-operator/scripts/install/build/logs/bobbys-front-end-adminserver.log"
        ${WORKSPACE}/platform-operator/scripts/install/k8s-dump-objects.sh -o pods -n bobby -r "bobbys-front-end-adminserver*" -m "bobby admin server" -l -c weblogic-server || echo "failed" > ${POST_DUMP_FAILED_FILE}
        export DIAGNOSTIC_LOG="${WORKSPACE}/platform-operator/scripts/install/build/logs/bobbys-front-end-managed-server1.log"
        ${WORKSPACE}/platform-operator/scripts/install/k8s-dump-objects.sh -o pods -n bobby -r "bobbys-front-end-managed-server1*" -m "bobby managed server 1" -l -c weblogic-server || echo "failed" > ${POST_DUMP_FAILED_FILE}
        export DIAGNOSTIC_LOG="${WORKSPACE}/platform-operator/scripts/install/build/logs/bobbys-helidon-stock-application.log"
        ${WORKSPACE}/platform-operator/scripts/install/k8s-dump-objects.sh -o pods -n bobby -r "bobbys-helidon-stock-application-*" -m "bobby helidon stock apps" -l -c bobbys-helidon-stock-application || echo "failed" > ${POST_DUMP_FAILED_FILE}
        export DIAGNOSTIC_LOG="${WORKSPACE}/platform-operator/scripts/install/build/logs/roberts-helidon-stock-application.log"
        ${WORKSPACE}/platform-operator/scripts/install/k8s-dump-objects.sh -o pods -n robert -r "roberts-helidon-stock-application-*" -m "robert helidon stock apps" -l -c roberts-helidon-stock-application || echo "failed" > ${POST_DUMP_FAILED_FILE}
        export DIAGNOSTIC_LOG="${WORKSPACE}/platform-operator/scripts/install/build/logs/weblogic-operator.log"
        ${WORKSPACE}/platform-operator/scripts/install/k8s-dump-objects.sh -o pods -n verrazzano-bobs-books-binding -r "weblogic-operator-*" -m "weblogic operator" -l -c weblogic-operator || echo "failed" > ${POST_DUMP_FAILED_FILE}
        export DIAGNOSTIC_LOG="${WORKSPACE}/platform-operator/scripts/install/build/logs/verrazzano-system-ingresses.log"
        ${WORKSPACE}/platform-operator/scripts/install/k8s-dump-objects.sh -o ingress -n verrazzano-system -m "verrazzano system ingresses" || echo "failed" > ${POST_DUMP_FAILED_FILE}
        export DIAGNOSTIC_LOG="${WORKSPACE}/platform-operator/scripts/install/build/logs/verrazzano-bobs-books-binding-prometheus.log"
        ${WORKSPACE}/platform-operator/scripts/install/k8s-dump-objects.sh -o pods -n verrazzano-system -r "vmi-bobs-books-binding-prometheus-0-*" -m "verrazzano system bobs books binding prometheus log" -l -c prometheus || echo "failed" > ${POST_DUMP_FAILED_FILE}
        export DIAGNOSTIC_LOG="${WORKSPACE}/platform-operator/scripts/install/build/logs/verrazzano-bobs-books-binding-prometheus-gw.log"
        ${WORKSPACE}/platform-operator/scripts/install/k8s-dump-objects.sh -o pods -n verrazzano-system -r "vmi-bobs-books-binding-prometheus-gw-*" -m "verrazzano system bobs books binding prometheus-gw log" -l -c prometheus-gw || echo "failed" > ${POST_DUMP_FAILED_FILE}
        export DIAGNOSTIC_LOG="${WORKSPACE}/platform-operator/scripts/install/build/logs/monitoring-prom-pusher-bobs-books-binding.log"
        ${WORKSPACE}/platform-operator/scripts/install/k8s-dump-objects.sh -o pods -n monitoring -r "prom-pusher-bobs-books-binding-*" -m "monitoring prom pusher bobs books binding" -l -c prometheus-pusher || echo "failed" > ${POST_DUMP_FAILED_FILE}
     """
}

def dumpGenericSpringbootObjects() {
    sh """
        ${WORKSPACE}/platform-operator/scripts/install/k8s-dump-objects.sh -o pods -n springboot -r "verrazzano-springboot-*" -m "generic springboot app" || echo "failed" > ${POST_DUMP_FAILED_FILE}

        ${WORKSPACE}/platform-operator/scripts/install/k8s-dump-objects.sh -o nodes -n default -m "describing nodes" || echo "failed" > ${POST_DUMP_FAILED_FILE}

        kubectl get event -A || echo "failed" > ${POST_DUMP_FAILED_FILE}
    """
}

def dumpGenericSpringbootLogs() {
    dumpVerrazzanoOperatorLogs()
    dumpVerrazzanoApiLogs()
    sh """
        export DIAGNOSTIC_LOG="${WORKSPACE}/platform-operator/scripts/install/build/logs/verrazzano-springboot.log"
        ${WORKSPACE}/platform-operator/scripts/install/k8s-dump-objects.sh -o pods -n springboot -r "verrazzano-springboot-*" -m "verrazzano springboot" -l -c verrazzano-springboot || echo "failed" > ${POST_DUMP_FAILED_FILE}
     """
}

def dumpSockObjects() {
    sh """
        ${WORKSPACE}/platform-operator/scripts/install/k8s-dump-objects.sh -o pods -n sockshop -m "sockshop" || echo "failed" > ${POST_DUMP_FAILED_FILE}
        ${WORKSPACE}/platform-operator/scripts/install/k8s-dump-objects.sh -o pods -n verrazzano-system -r "vmi-sock-shop-binding-es-*" -m "sock elastic search" || echo "failed" > ${POST_DUMP_FAILED_FILE}

        ${WORKSPACE}/platform-operator/scripts/install/k8s-dump-objects.sh -o nodes -n default -m "describing nodes" || echo "failed" > ${POST_DUMP_FAILED_FILE}

        kubectl get event -A || echo "failed" > ${POST_DUMP_FAILED_FILE}
    """
}

def dumpSockLogs() {
    dumpVerrazzanoOperatorLogs()
    dumpVerrazzanoApiLogs()
}

def dumpVerrazzanoOperatorLogs() {
    sh """
        export DIAGNOSTIC_LOG="${WORKSPACE}/platform-operator/scripts/install/build/logs/verrazzano-operator.log"
        ${WORKSPACE}/platform-operator/scripts/install/k8s-dump-objects.sh -o pods -n verrazzano-system -r "verrazzano-operator-*" -m "verrazzano operator" -l || echo "failed" > ${POST_DUMP_FAILED_FILE}
    """
}

def dumpVerrazzanoSystemPods() {
    sh """
        export DIAGNOSTIC_LOG="${WORKSPACE}/platform-operator/scripts/install/build/logs/verrazzano-system-pods.log"
        ${WORKSPACE}/platform-operator/scripts/install/k8s-dump-objects.sh -o pods -n verrazzano-system -m "verrazzano system pods" || echo "failed" > ${POST_DUMP_FAILED_FILE}
        export DIAGNOSTIC_LOG="${WORKSPACE}/platform-operator/scripts/install/build/logs/verrazzano-system-certs.log"
        ${WORKSPACE}/platform-operator/scripts/install/k8s-dump-objects.sh -o cert -n verrazzano-system -m "verrazzano system certs" || echo "failed" > ${POST_DUMP_FAILED_FILE}
        export DIAGNOSTIC_LOG="${WORKSPACE}/platform-operator/scripts/install/build/logs/verrazzano-system-kibana.log"
        ${WORKSPACE}/platform-operator/scripts/install/k8s-dump-objects.sh -o pods -n verrazzano-system -r "vmi-system-kibana-*" -m "verrazzano system kibana log" -l -c kibana || echo "failed" > ${POST_DUMP_FAILED_FILE}
        export DIAGNOSTIC_LOG="${WORKSPACE}/platform-operator/scripts/install/build/logs/verrazzano-system-es-master.log"
        ${WORKSPACE}/platform-operator/scripts/install/k8s-dump-objects.sh -o pods -n verrazzano-system -r "vmi-system-es-master-*" -m "verrazzano system kibana log" -l -c es-master || echo "failed" > ${POST_DUMP_FAILED_FILE}
    """
}

def dumpCertManagerNamespaceLogs() {
    sh """
        kubectl logs --selector=app=cert-manager -n cert-manager > ${WORKSPACE}/platform-operator/scripts/install/build/logs/cert-manager.log || echo "failed" > ${POST_DUMP_FAILED_FILE}
        kubectl logs --selector=app.kubernetes.io/name=external-dns -n cert-manager > ${WORKSPACE}/platform-operator/scripts/install/build/logs/external-dns.log || echo "failed" > ${POST_DUMP_FAILED_FILE}
    """
}

def dumpCattleSystemPods() {
    sh """
        export DIAGNOSTIC_LOG="${WORKSPACE}/platform-operator/scripts/install/build/logs/cattle-system-pods.log"
        ${WORKSPACE}/platform-operator/scripts/install/k8s-dump-objects.sh -o pods -n cattle-system -m "cattle system pods" || echo "failed" > ${POST_DUMP_FAILED_FILE}
        export DIAGNOSTIC_LOG="${WORKSPACE}/platform-operator/scripts/install/build/logs/rancher.log"
        ${WORKSPACE}/platform-operator/scripts/install/k8s-dump-objects.sh -o pods -n cattle-system -r "rancher-*" -m "Rancher logs" -l || echo "failed" > ${POST_DUMP_FAILED_FILE}
    """
}

def dumpNginxIngressControllerLogs() {
    sh """
        export DIAGNOSTIC_LOG="${WORKSPACE}/platform-operator/scripts/install/build/logs/nginx-ingress-controller.log"
        ${WORKSPACE}/platform-operator/scripts/install/k8s-dump-objects.sh -o pods -n ingress-nginx -r "nginx-ingress-controller-*" -m "Nginx Ingress Controller" -l || echo "failed" > ${POST_DUMP_FAILED_FILE}
    """
}

def dumpVerrazzanoPlatformOperatorLogs() {
    sh """
        ## dump out verrazzano-platform-operator logs
        mkdir -p ${WORKSPACE}/verrazzano-platform-operator/logs
        kubectl -n verrazzano-install logs --selector=app=verrazzano-platform-operator > ${WORKSPACE}/verrazzano-platform-operator/logs/verrazzano-platform-operator-pod.log --tail -1 || echo "failed" > ${POST_DUMP_FAILED_FILE}
        kubectl -n verrazzano-install describe pod --selector=app=verrazzano-platform-operator > ${WORKSPACE}/verrazzano-platform-operator/logs/verrazzano-platform-operator-pod.out || echo "failed" > ${POST_DUMP_FAILED_FILE}
        echo "verrazzano-platform-operator logs dumped to verrazzano-platform-operator-pod.log"
        echo "verrazzano-platform-operator pod description dumped to verrazzano-platform-operator-pod.out"
        echo "------------------------------------------"
    """
}

def dumpVerrazzanoApplicationOperatorLogs() {
    sh """
        ## dump out verrazzano-application-operator logs
        mkdir -p ${WORKSPACE}/verrazzano-application-operator/logs
        kubectl -n verrazzano-system logs --selector=app=verrazzano-application-operator > ${WORKSPACE}/verrazzano-application-operator/logs/verrazzano-application-operator-pod.log --tail -1 || echo "failed" > ${POST_DUMP_FAILED_FILE}
        kubectl -n verrazzano-system describe pod --selector=app=verrazzano-application-operator > ${WORKSPACE}/verrazzano-application-operator/logs/verrazzano-application-operator-pod.out || echo "failed" > ${POST_DUMP_FAILED_FILE}
        echo "verrazzano-application-operator logs dumped to verrazzano-application-operator-pod.log"
        echo "verrazzano-application-operator pod description dumped to verrazzano-application-operator-pod.out"
        echo "------------------------------------------"
    """
}

def dumpVerrazzanoApiLogs() {
    sh """
        export DIAGNOSTIC_LOG="${WORKSPACE}/platform-operator/scripts/install/build/logs/verrazzano-api.log"
        ${WORKSPACE}/platform-operator/scripts/install/k8s-dump-objects.sh -o pods -n verrazzano-system -r "verrazzano-api-*" -m "verrazzano api" -l || echo "failed" > ${POST_DUMP_FAILED_FILE}
    """
}
