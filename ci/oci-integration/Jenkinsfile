// Copyright (c) 2023, Oracle and/or its affiliates.
// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.

// This runs tests for OCI service integrations

def DEFAULT_REPO_URL
def testEnvironments = [ "magicdns_oke" ]
def installProfiles = [ "dev", "prod", "managed-cluster" ]
def agentLabel = env.JOB_NAME.contains('master') ? "phx-large" : "large"

// pulling "ap-*" from the test regions given discovery of image pull issues
def availableRegions = [  "us-ashburn-1", "ca-montreal-1", "ca-toronto-1", "eu-amsterdam-1", "eu-frankfurt-1", "eu-zurich-1", "uk-london-1" ]
Collections.shuffle(availableRegions)
def keepOKEClusterOnFailure = "false"
def OKE_CLUSTER_PREFIX = ""
def EFFECTIVE_DUMP_K8S_CLUSTER_ON_SUCCESS = false

pipeline {
    options {
        skipDefaultCheckout true
        copyArtifactPermission('*');
        timestamps ()
    }

    agent {
        docker {
            image "${RUNNER_DOCKER_IMAGE}"
            args "${RUNNER_DOCKER_ARGS} --cap-add=NET_ADMIN"
            registryUrl "${RUNNER_DOCKER_REGISTRY_URL}"
            label "${agentLabel}"
        }
    }

    parameters {
        choice (description: 'OCI region to launch OKE clusters in', name: 'OKE_CLUSTER_REGION',
            // 1st choice is the default value
            choices: availableRegions )
        choice (description: 'OKE node pool configuration', name: 'OKE_NODE_POOL',
            // 1st choice is the default value
            choices: [ "VM.Standard.E3.Flex-4-2", "VM.Standard2.4-2", "VM.Standard.E3.Flex-8-2", "VM.Standard.E2.2" ])
        choice (description: 'Kubernetes Version for OKE Cluster', name: 'OKE_CLUSTER_VERSION',
            // 1st choice is the default value
            choices: [ "v1.26.2", "v1.25.4", "v1.24.1" ])
        choice (description: 'Kubernetes Version for KinD Cluster',
            name: 'KIND_CLUSTER_VERSION',
            // 1st choice is the default value
            choices: [ "1.26", "1.25", "1.24" ])
        choice(description: 'Verrazzano Install Profile', name: "INSTALL_PROFILE", choices: installProfiles )
        string defaultValue: 'NONE', description: 'Verrazzano platform operator image name (within ghcr.io/verrazzano repo)', name: 'VERRAZZANO_OPERATOR_IMAGE', trim: true
        choice (name: 'WILDCARD_DNS_DOMAIN',
                description: 'This is the wildcard DNS domain',
                // 1st choice is the default value
                choices: [ "nip.io", "sslip.io"])
        choice (name: 'CRD_API_VERSION',
                description: 'This is the API crd version.',
                // 1st choice is the default value
                choices: [ "v1beta1", "v1alpha1"])
        string (name: 'GIT_COMMIT_TO_USE',
                        defaultValue: 'NONE',
                        description: 'This is the full git commit hash from the source build to be used for all jobs',
                        trim: true)
        booleanParam (description: 'Whether to dump k8s cluster on success (off by default can be useful to capture for comparing to failed cluster)', name: 'DUMP_K8S_CLUSTER_ON_SUCCESS', defaultValue: false)
        string (name: 'TAGGED_TESTS',
                defaultValue: '',
                description: 'A comma separated list of build tags for tests that should be executed (e.g. unstable_test). Default:',
                trim: true)
        string (name: 'INCLUDED_TESTS',
                defaultValue: '.*',
                description: 'A regex matching any fully qualified test file that should be executed (e.g. examples/helidon/). Default: .*',
                trim: true)
        string (name: 'EXCLUDED_TESTS',
                defaultValue: '_excluded_test',
                description: 'A regex matching any fully qualified test file that should not be executed (e.g. multicluster/|_excluded_test). Default: _excluded_test',
                trim: true)
        booleanParam (description: 'Whether to capture full cluster snapshot on test failure', name: 'CAPTURE_FULL_CLUSTER', defaultValue: false)
    }

    environment {
        OCR_CREDS = credentials('ocr-pull-and-push-account')
        NETRC_FILE = credentials('netrc')
        OCR_REPO = 'container-registry.oracle.com'
        GHCR_REPO = 'ghcr.io'
        VERRAZZANO_OPERATOR_IMAGE="${params.VERRAZZANO_OPERATOR_IMAGE}"
        TEST_ENV = "magicdns_oke"
        INSTALL_PROFILE = "${params.INSTALL_PROFILE}"
        GITHUB_PKGS_CREDS = credentials('github-packages-credentials-rw')
        OCIR_CREDS = credentials('ocir-pull-and-push-account')
        IMAGE_PULL_SECRET = 'verrazzano-container-registry'
        OCIR_PHX_REPO = 'phx.ocir.io'
        POST_DUMP_FAILED = 'false'
        GOPATH = '/home/opc/go'
        GO_REPO_PATH = "${GOPATH}/src/github.com/verrazzano"
        TEST_SCRIPTS_DIR = "${GO_REPO_PATH}/verrazzano/tests/e2e/config/scripts"

        DOCKER_CREDS = credentials('github-packages-credentials-rw')
        DOCKER_EMAIL = credentials('github-packages-email')
        DOCKER_REPO = 'ghcr.io'
        DOCKER_NAMESPACE = 'verrazzano'

        TF_VAR_tenancy_id = credentials('oci-tenancy')
        TF_VAR_user_id = credentials('oci-user-ocid')
        TF_VAR_region = "${params.OKE_CLUSTER_REGION}"
        TF_VAR_kubernetes_version = "${params.OKE_CLUSTER_VERSION}"
        TF_VAR_nodepool_config = "${params.OKE_NODE_POOL}"
        TF_VAR_api_fingerprint = credentials('oci-api-key-fingerprint')
        TF_VAR_api_private_key_path = credentials('oci-api-key')
        TF_VAR_s3_bucket_access_key = credentials('oci-s3-bucket-access-key')
        TF_VAR_s3_bucket_secret_key = credentials('oci-s3-bucket-secret-key')
        TF_VAR_ssh_public_key_path = credentials('oci-tf-pub-ssh-key')
        TF_VAR_compartment_id = credentials('oci-tiburon-dev-compartment-ocid')

        OCI_CLI_TENANCY = credentials('oci-tenancy')
        OCI_CLI_USER = credentials('oci-user-ocid')
        OCI_CLI_FINGERPRINT = credentials('oci-api-key-fingerprint')
        OCI_CLI_KEY_FILE = credentials('oci-api-key')
        OCI_CLI_REGION = "${params.OKE_CLUSTER_REGION}"

        TEST_CONFIG_FILE = "${HOME}/testConfigOke.yaml"
        TESTS_EXECUTED_FILE = "${WORKSPACE}/tests_executed_file.tmp"
        OKE_KUBECONFIG = "${WORKSPACE}/test_oke_kubeconfig"
        KIND_KUBECONFIG = "${WORKSPACE}/test_kind_kubeconfig"

        DISABLE_SPINNER=1
        OCI_CLI_SUPPRESS_FILE_PERMISSIONS_WARNING = 'True'

        TIMESTAMP = sh(returnStdout: true, script: "date +%Y%m%d%H%M%S").trim()
        SHORT_TIME_STAMP = sh(returnStdout: true, script: "date +%m%d%H%M%S").trim()

        POST_DUMP_FAILED_FILE = "${WORKSPACE}/post_dump_failed_file.tmp"

        INSTALL_CONFIG_FILE_NIPIO = "${WORKSPACE}/tests/e2e/config/scripts/${params.CRD_API_VERSION}/install-verrazzano-nipio.yaml"
        INSTALL_CONFIG_FILE_KIND = "${WORKSPACE}/tests/e2e/config/scripts/${params.CRD_API_VERSION}/install-verrazzano-kind-no-persistence.yaml"

        VZ_ENVIRONMENT_NAME = "default"

        // Environment variables required to capture cluster snapshot and bug report on test failure
        DUMP_COMMAND="${WORKSPACE}/tools/scripts/k8s-dump-cluster.sh"
        TEST_DUMP_ROOT="${WORKSPACE}/test-cluster-snapshots"
        CAPTURE_FULL_CLUSTER="${params.CAPTURE_FULL_CLUSTER}"

        // Environment variable for Verrazzano CLI executable
        VZ_COMMAND="${GO_REPO_PATH}/vz"

        // used for console artifact capture on failure and for downloading the operator.yaml file
        JENKINS_READ = credentials('jenkins-auditor')
        OCI_OS_NAMESPACE = credentials('oci-os-namespace')
        OCI_OS_ARTIFACT_BUCKET="build-failure-artifacts"
        OCI_OS_COMMIT_BUCKET="verrazzano-builds-by-commit"
        VZ_CLI_TARGZ="vz-linux-amd64.tar.gz"

        COMPARTMENT_ID = credentials('oci-tiburon-dev-compartment-ocid')

        // used to emit metrics
        PROMETHEUS_CREDENTIALS = credentials('prometheus-credentials')
        TEST_ENV_LABEL = "${TEST_ENV}"
        SEARCH_HTTP_ENDPOINT = credentials('search-gw-url')
        SEARCH_PASSWORD = "${PROMETHEUS_CREDENTIALS_PSW}"
        SEARCH_USERNAME = "${PROMETHEUS_CREDENTIALS_USR}"

        // used to generate Ginkgo test reports
        TEST_REPORT = "test-report.xml"
        GINKGO_REPORT_ARGS = "--junit-report=${TEST_REPORT} --keep-separate-reports=true"
    }

    stages {
        stage('Initialize') {
            steps {
                script {
                    EFFECTIVE_DUMP_K8S_CLUSTER_ON_SUCCESS = getEffectiveDumpOnSuccess()
                    if (params.GIT_COMMIT_TO_USE == "NONE") {
                        echo "Specific GIT commit was not specified, use current head"
                        def scmInfo = checkout scm
                        env.GIT_COMMIT = scmInfo.GIT_COMMIT
                        env.GIT_BRANCH = scmInfo.GIT_BRANCH
                    } else {
                        echo "SCM checkout of ${params.GIT_COMMIT_TO_USE}"
                        def scmInfo = checkout([
                            $class: 'GitSCM',
                            branches: [[name: params.GIT_COMMIT_TO_USE]],
                            doGenerateSubmoduleConfigurations: false,
                            extensions: [],
                            submoduleCfg: [],
                            userRemoteConfigs: [[url: env.SCM_VERRAZZANO_GIT_URL]]])
                        env.GIT_COMMIT = scmInfo.GIT_COMMIT
                        env.GIT_BRANCH = scmInfo.GIT_BRANCH
                        // If the commit we were handed is not what the SCM says we are using, fail
                        if (!env.GIT_COMMIT.equals(params.GIT_COMMIT_TO_USE)) {
                            echo "SCM didn't checkout the commit we expected. Expected: ${params.GIT_COMMIT_TO_USE}, Found: ${scmInfo.GIT_COMMIT}"
                            exit 1
                        }
                    }
                    echo "SCM checkout of ${env.GIT_BRANCH} at ${env.GIT_COMMIT}"
                }

                sh """
                    cp -f "${NETRC_FILE}" $HOME/.netrc
                    chmod 600 $HOME/.netrc
                """
                println("${params.OKE_CLUSTER_REGION}")
                println("agentlabel: ${agentLabel}")
                sh """
                    echo "${NODE_LABELS}"
                """

                sh """
                    rm -rf ${GO_REPO_PATH}/verrazzano
                    mkdir -p ${GO_REPO_PATH}/verrazzano
                    tar cf - . | (cd ${GO_REPO_PATH}/verrazzano/ ; tar xf -)
                """

                script {
                    SHORT_COMMIT_HASH = sh(returnStdout: true, script: "git rev-parse --short=8 HEAD").trim()
                    // update the description with some meaningful info
                    setDisplayName()
                    currentBuild.description = SHORT_COMMIT_HASH + " : " + params.OKE_CLUSTER_REGION + " : " + params.OKE_CLUSTER_VERSION

                    // derive the prefix for the OKE cluster
                    OKE_CLUSTER_PREFIX = sh(returnStdout: true, script: "${WORKSPACE}/ci/scripts/derive_oke_cluster_name.sh").trim()
                }
                script {
                    sh """
                        echo "Downloading VZ CLI from object storage"
                        oci --region us-phoenix-1 os object get --namespace ${OCI_OS_NAMESPACE} -bn ${OCI_OS_COMMIT_BUCKET} --name ephemeral/${env.BRANCH_NAME}/${SHORT_COMMIT_HASH}/${VZ_CLI_TARGZ} --file ${VZ_CLI_TARGZ}
                        tar xzf ${VZ_CLI_TARGZ} -C ${GO_REPO_PATH}
                        ${GO_REPO_PATH}/vz version
                    """
                }
            }
        }

        stage("Download platform operator") {
            environment {
                OCI_CLI_AUTH="instance_principal"
            }
            steps {
                sh """
                    echo "Download Platform Operator"
                    oci --region us-phoenix-1 os object get --namespace ${OCI_OS_NAMESPACE} -bn ${OCI_OS_COMMIT_BUCKET} --name ephemeral/${env.BRANCH_NAME}/${SHORT_COMMIT_HASH}/operator.yaml --file ${WORKSPACE}/downloaded-operator.yaml
                    cp ${WORKSPACE}/downloaded-operator.yaml ${WORKSPACE}/acceptance-test-operator.yaml
                """
            }
            post {
                always {
                    archiveArtifacts artifacts: "acceptance-test-operator.yaml,downloaded-operator.yaml", allowEmptyArchive: true
                }
            }
        }

        stage("Create clusters and run tests") {
            parallel {
                stage("OKE") {
                    environment {
                        KUBECONFIG="${OKE_KUBECONFIG}"
                        DUMP_KUBECONFIG="${OKE_KUBECONFIG}"
                    }
                    stages {
                        stage("Create OCI test resources") {
                            steps {
                                script {
                                    env.OKE_LOG_IDS = sh(script:"${WORKSPACE}/tests/e2e/config/scripts/create_oci_logging_resources.sh ${COMPARTMENT_ID}", returnStdout: true).trim()

                                    env.OKE_LOG_GROUP_ID = sh(script:"echo \'${OKE_LOG_IDS}\' | jq -r '.logGroupId'", returnStdout: true).trim()
                                    env.OKE_SYSTEM_LOG_ID = sh(script:"echo \'${OKE_LOG_IDS}\' | jq -r '.systemLogId'", returnStdout: true).trim()
                                    env.OKE_APP_LOG_ID = sh(script:"echo \'${OKE_LOG_IDS}\' | jq -r '.appLogId'", returnStdout: true).trim()
                                    env.OKE_NS_LOG_ID = sh(script:"echo \'${OKE_LOG_IDS}\' | jq -r '.nsLogId'", returnStdout: true).trim()
                                }
                            }
                        }

                        stage("Create OKE cluster") {
                            environment {
                                TF_VAR_label_prefix="${OKE_CLUSTER_PREFIX}"
                            }
                            steps {
                                script {
                                    withCredentials([sshUserPrivateKey(credentialsId: '5fcc03de-31ce-4566-b11f-9de38e5d98fd', keyFileVariable: 'OPC_USER_KEY_FILE', passphraseVariable: 'OPC_USER_PASSPHRASE', usernameVariable: 'OPC_USERNAME')]) {
                                        sh """
                                            # get the ssh public key
                                            ssh-keygen -y -e -f ${OPC_USER_KEY_FILE} > /tmp/opc_ssh2.pub
                                            # convert SSH2 public key into an OpenSSH format
                                            ssh-keygen -i -f /tmp/opc_ssh2.pub > /tmp/opc_ssh.pub
                                            # set the ssh public key value for terraform
                                            export TF_VAR_ssh_public_key_path=/tmp/opc_ssh.pub
                                            export TF_VAR_state_name=${env.BUILD_NUMBER}-${env.TIMESTAMP}-${env.BRANCH_NAME}
                                            # call create_oke_cluster with cluster access private
                                            ${WORKSPACE}/tests/e2e/config/scripts/create_oke_cluster.sh true false
                                        """
                                    }
                                }
                            }
                            post {
                                failure {
                                    script {
                                        echo "Cluster create failed"
                                    }
                                }
                            }
                        }

                        stage("Create image pull secrets") {
                            steps {
                                script {
                                    createImagePullSecrets()
                                }
                            }
                        }

                        stage("Install platform operator") {
                            environment {
                                OCI_CLI_AUTH="instance_principal"
                            }
                            steps {
                                sh """
                                    echo "Install Platform Operator"
                                    kubectl apply -f ${WORKSPACE}/acceptance-test-operator.yaml

                                    # make sure ns exists
                                    ${WORKSPACE}/tests/e2e/config/scripts/check_verrazzano_ns_exists.sh verrazzano-install
                                    # create secret in verrazzano-install ns
                                    ${WORKSPACE}/tests/e2e/config/scripts/create-image-pull-secret.sh "${IMAGE_PULL_SECRET}" "${GHCR_REPO}" "${GITHUB_PKGS_CREDS_USR}" "${GITHUB_PKGS_CREDS_PSW}" "verrazzano-install"
                                """
                            }
                        }

                        stage("Process install YAML") {
                            environment {
                                SYSTEM_LOG_ID="${OKE_SYSTEM_LOG_ID}"
                                APP_LOG_ID="${OKE_APP_LOG_ID}"
                            }
                            steps {
                                script {
                                    sh """
                                        ${WORKSPACE}/tests/e2e/config/scripts/process_nipio_install_yaml.sh $INSTALL_CONFIG_FILE_NIPIO
                                    """
                                }
                            }
                        }

                        stage("Install Verrazzano") {
                            steps {
                                sh """
                                    echo "Waiting for Operator to be ready"
                                    kubectl -n verrazzano-install rollout status deployment/verrazzano-platform-operator
                                """

                                sh """
                                    echo "Installing Verrazzano on ${TEST_ENV}"
                                    # apply config to create cluster

                                    kubectl apply -f ${INSTALL_CONFIG_FILE_NIPIO}

                                    # wait for Verrazzano install to complete
                                    ${WORKSPACE}/tests/e2e/config/scripts/wait-for-verrazzano-install.sh
                                    # Create acceptance test configuration file
                                    ${WORKSPACE}/tests/e2e/config/scripts/common-test-setup-script.sh "${WORKSPACE}" "${TEST_CONFIG_FILE}" "${env.DOCKER_REPO}" "${KUBECONFIG}" "${OCR_CREDS_USR}" "${OCR_CREDS_PSW}" "${VZ_ENVIRONMENT_NAME}"

                                    # edit DNS info in the test config file
                                    ${WORKSPACE}/tests/e2e/config/scripts/get_ingress_ip.sh ${TEST_CONFIG_FILE}
                                    echo "----------Test config file:-------------"
                                    cat ${TEST_CONFIG_FILE}
                                    echo "----------------------------------------"
                                """
                            }
                            post {
                                always {
                                    script {
                                        sh """
                                            # dump out install logs
                                            mkdir -p ${WORKSPACE}/platform-operator/scripts/install/build/logs/oke
                                            kubectl -n verrazzano-install logs --selector=app=verrazzano-platform-operator > ${WORKSPACE}/platform-operator/scripts/install/build/logs/oke/verrazzano-platform-operator.log --tail -1
                                            kubectl -n verrazzano-install describe pod --selector=app=verrazzano-platform-operator > ${WORKSPACE}/platform-operator/scripts/install/build/logs/oke/verrazzano-platform-operator-pod.out
                                            echo "Verrazzano platform operator logs dumped to verrazzano-platform-operator.log"
                                            echo "Verrazzano platform operator pod description dumped to verrazzano-platform-operator-pod.out"
                                            echo "------------------------------------------"
                                        """
                                    }
                                }
                            }
                        }

                        stage('verify-install verrazzano') {
                            steps {
                                catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                                    sh """
                                        cd ${WORKSPACE}/tests/e2e
                                        ginkgo -p --randomize-all -v --keep-going --no-color ${GINKGO_REPORT_ARGS} -tags="${params.TAGGED_TESTS}" --focus-file="${params.INCLUDED_TESTS}" --skip-file="${params.EXCLUDED_TESTS}" verify-install/verrazzano/
                                    """
                                }
                            }
                        }

                        stage('OCI logging') {
                            environment {
                                LOG_GROUP_ID="${OKE_LOG_GROUP_ID}"
                                NS_LOG_ID="${OKE_NS_LOG_ID}"

                                DUMP_DIRECTORY="${TEST_DUMP_ROOT}/oci-logging-oke"
                            }
                            steps {
                                script {
                                    runGinkgo('oci/logging')
                                }
                            }
                        }
                    }
                    post {
                        always {
                            sh '''
                                # Clean up the OCI Logging resources we created
                                ${WORKSPACE}/tests/e2e/config/scripts/delete_oci_logging_resources.sh "${OKE_LOG_GROUP_ID}" "${OKE_SYSTEM_LOG_ID}" "${OKE_APP_LOG_ID}" "${OKE_NS_LOG_ID}" || true
                            '''

                            script {
                                if (EFFECTIVE_DUMP_K8S_CLUSTER_ON_SUCCESS == true || currentBuild.currentResult == 'FAILURE') {
                                    dumpK8sCluster('oci-integration-tests-oke-cluster-snapshot')
                                }
                            }

                            sh """
                                # Destroy the OKE cluster
                                if [ "${keepOKEClusterOnFailure}" == "false" ]; then
                                    TF_VAR_label_prefix=${OKE_CLUSTER_PREFIX} TF_VAR_state_name=${env.BUILD_NUMBER}-${env.TIMESTAMP}-${env.BRANCH_NAME} ${WORKSPACE}/tests/e2e/config/scripts/delete_oke_cluster.sh || true
                                fi
                            """
                        }
                    }
                }

                stage("KinD") {
                    environment {
                        KUBECONFIG="${KIND_KUBECONFIG}"
                        DUMP_KUBECONFIG="${KIND_KUBECONFIG}"
                        OCI_OS_LOCATION="${env.BRANCH_NAME}/${SHORT_COMMIT_HASH}"
                        CLUSTER_NAME="verrazzano"
                    }
                    stages {
                        stage("Create OCI test resources") {
                            steps {
                                script {
                                    env.KIND_LOG_IDS = sh(script:"${WORKSPACE}/tests/e2e/config/scripts/create_oci_logging_resources.sh ${COMPARTMENT_ID}", returnStdout: true).trim()

                                    env.KIND_LOG_GROUP_ID = sh(script:"echo \'${KIND_LOG_IDS}\' | jq -r '.logGroupId'", returnStdout: true).trim()
                                    env.KIND_SYSTEM_LOG_ID = sh(script:"echo \'${KIND_LOG_IDS}\' | jq -r '.systemLogId'", returnStdout: true).trim()
                                    env.KIND_APP_LOG_ID = sh(script:"echo \'${KIND_LOG_IDS}\' | jq -r '.appLogId'", returnStdout: true).trim()
                                    env.KIND_NS_LOG_ID = sh(script:"echo \'${KIND_LOG_IDS}\' | jq -r '.nsLogId'", returnStdout: true).trim()
                                }
                            }
                        }

                        stage("Create KinD cluster") {
                            environment {
                                KIND_KUBERNETES_CLUSTER_VERSION="${params.KIND_CLUSTER_VERSION}"
                                OCI_CLI_AUTH="instance_principal"
                            }
                            steps {
                                sh """
                                    echo "Using KUBECONFIG: ${KUBECONFIG}"

                                    echo "Create Kind cluster"
                                    cd ${TEST_SCRIPTS_DIR}
                                    ./create_kind_cluster.sh ${CLUSTER_NAME} ${GO_REPO_PATH}/verrazzano/platform-operator ${KUBECONFIG} ${KIND_KUBERNETES_CLUSTER_VERSION} true true true false "NONE" 1
                                    if [ \$? -ne 0 ]; then
                                        mkdir ${WORKSPACE}/kind-logs
                                        kind export logs ${WORKSPACE}/kind-logs
                                        echo "Kind cluster creation failed"
                                        exit 1
                                    fi

                                    kubectl wait --for=condition=ready nodes/${CLUSTER_NAME}-control-plane --timeout=5m --all
                                    kubectl wait --for=condition=ready pods/kube-controller-manager-${CLUSTER_NAME}-control-plane -n kube-system --timeout=5m

                                    echo "Install metallb"
                                    cd ${GO_REPO_PATH}/verrazzano
                                    ./tests/e2e/config/scripts/install-metallb.sh
                                """
                            }
                        }

                        stage("Create image pull secrets") {
                            steps {
                                script {
                                    createImagePullSecrets()
                                }
                            }
                        }

                        stage("Install platform operator") {
                            environment {
                                OCI_CLI_AUTH="instance_principal"
                            }
                            steps {
                                sh """
                                    echo "Install Platform Operator"
                                    kubectl apply -f ${WORKSPACE}/acceptance-test-operator.yaml

                                    # make sure ns exists
                                    ${WORKSPACE}/tests/e2e/config/scripts/check_verrazzano_ns_exists.sh verrazzano-install
                                    # create secret in verrazzano-install ns
                                    ${WORKSPACE}/tests/e2e/config/scripts/create-image-pull-secret.sh "${IMAGE_PULL_SECRET}" "${GHCR_REPO}" "${GITHUB_PKGS_CREDS_USR}" "${GITHUB_PKGS_CREDS_PSW}" "verrazzano-install"
                                """
                            }
                        }

                        stage("Process install YAML") {
                            environment {
                                SYSTEM_LOG_ID="${KIND_SYSTEM_LOG_ID}"
                                APP_LOG_ID="${KIND_APP_LOG_ID}"
                            }
                            steps {
                                script {
                                    sh """
                                        ${WORKSPACE}/tests/e2e/config/scripts/process_kind_install_yaml.sh "${INSTALL_CONFIG_FILE_KIND}" "${params.WILDCARD_DNS_DOMAIN}"
                                    """
                                }
                            }
                        }

                        stage("Create OCI API secret") {
                            environment {
                                OUTPUT_FILE="${WORKSPACE}/oci_config"
                                KEY_FILE="${WORKSPACE}/oci_key"
                            }
                            steps {
                                script {
                                    sh """
                                        echo "Creating OCI config files"
                                        echo "[DEFAULT]" > $OUTPUT_FILE
                                        echo "region=${OCI_CLI_REGION}" >> $OUTPUT_FILE
                                        echo "tenancy=${OCI_CLI_TENANCY}" >> $OUTPUT_FILE
                                        echo "user=${OCI_CLI_USER}" >> $OUTPUT_FILE
                                        echo "fingerprint=${OCI_CLI_FINGERPRINT}" >> $OUTPUT_FILE
                                        echo "key_file=$KEY_FILE" >> $OUTPUT_FILE
                                        cat ${OCI_CLI_KEY_FILE} > $KEY_FILE

                                        echo "Creating OCI API secret from OCI config"
                                        ${WORKSPACE}/platform-operator/scripts/install/create_oci_fluentd_secret.sh -o ${OUTPUT_FILE}
                                    """
                                }
                            }
                            post {
                                always {
                                    sh """
                                        rm -f $OUTPUT_FILE $KEY_FILE
                                    """
                                }
                            }
                        }

                        stage("Install Verrazzano") {
                            steps {
                                sh """
                                    echo "Waiting for Operator to be ready"
                                    kubectl -n verrazzano-install rollout status deployment/verrazzano-platform-operator
                                """

                                sh """
                                    echo "Installing Verrazzano on KinD"
                                    kubectl apply -f ${INSTALL_CONFIG_FILE_KIND}

                                    # wait for Verrazzano install to complete
                                    ${WORKSPACE}/tests/e2e/config/scripts/wait-for-verrazzano-install.sh
                                """
                            }
                            post {
                                always {
                                    script {
                                        sh """
                                            # dump out install logs
                                            mkdir -p ${WORKSPACE}/platform-operator/scripts/install/build/logs/kind
                                            kubectl -n verrazzano-install logs --selector=app=verrazzano-platform-operator > ${WORKSPACE}/platform-operator/scripts/install/build/logs/kind/verrazzano-platform-operator.log --tail -1
                                            kubectl -n verrazzano-install describe pod --selector=app=verrazzano-platform-operator > ${WORKSPACE}/platform-operator/scripts/install/build/logs/kind/verrazzano-platform-operator-pod.out
                                            echo "Verrazzano platform operator logs dumped to verrazzano-platform-operator.log"
                                            echo "Verrazzano platform operator pod description dumped to verrazzano-platform-operator-pod.out"
                                            echo "------------------------------------------"
                                        """
                                    }
                                }
                            }
                        }

                        stage('verify-install verrazzano') {
                            steps {
                                catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                                    sh """
                                        cd ${WORKSPACE}/tests/e2e
                                        ginkgo -p --randomize-all -v --keep-going --no-color ${GINKGO_REPORT_ARGS} -tags="${params.TAGGED_TESTS}" --focus-file="${params.INCLUDED_TESTS}" --skip-file="${params.EXCLUDED_TESTS}" verify-install/verrazzano/
                                    """
                                }
                            }
                        }

                        stage('OCI logging') {
                            environment {
                                LOG_GROUP_ID="${KIND_LOG_GROUP_ID}"
                                NS_LOG_ID="${KIND_NS_LOG_ID}"

                                DUMP_DIRECTORY="${TEST_DUMP_ROOT}/oci-logging-kind"
                            }
                            steps {
                                script {
                                    runGinkgo('oci/logging')
                                }
                            }
                        }
                    }
                    post {
                        always {
                            sh '''
                                # Clean up the OCI Logging resources we created
                                ${WORKSPACE}/tests/e2e/config/scripts/delete_oci_logging_resources.sh "${KIND_LOG_GROUP_ID}" "${KIND_SYSTEM_LOG_ID}" "${KIND_APP_LOG_ID}" "${KIND_NS_LOG_ID}" || true
                            '''

                            script {
                                if (EFFECTIVE_DUMP_K8S_CLUSTER_ON_SUCCESS == true || currentBuild.currentResult == 'FAILURE') {
                                    dumpK8sCluster('oci-integration-tests-kind-cluster-snapshot')
                                }
                            }

                            sh """
                                # Delete the KinD cluster
                                kind delete cluster --name "${CLUSTER_NAME}"
                            """
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            archiveArtifacts artifacts: "**/coverage.html,**/logs/**,**/verrazzano_images.txt,**/*full-cluster*/**,**/*bug-report*/**,**/test-cluster-snapshots/**,**/${TEST_REPORT}", allowEmptyArchive: true
            junit testResults: "**/${TEST_REPORT}", allowEmptyResults: true
       }
       failure {
            sh """
                curl -k -u ${JENKINS_READ_USR}:${JENKINS_READ_PSW} -o ${WORKSPACE}/build-console-output.log ${BUILD_URL}consoleText
            """
            archiveArtifacts artifacts: '**/build-console-output.log', allowEmptyArchive: true
            sh """
                curl -k -u ${JENKINS_READ_USR}:${JENKINS_READ_PSW} -o archive.zip ${BUILD_URL}artifact/*zip*/archive.zip
                OCI_CLI_AUTH="instance_principal" oci --region us-phoenix-1 os object put --force --namespace ${OCI_OS_NAMESPACE} -bn ${OCI_OS_ARTIFACT_BUCKET} --name ${env.JOB_NAME}/${env.BRANCH_NAME}/${env.BUILD_NUMBER}/archive.zip --file archive.zip
                rm archive.zip
            """
            script {
                if (env.JOB_NAME == "verrazzano/master" || env.JOB_NAME ==~ "verrazzano/release-.*") {
                    slackSend ( message: "Job Failed - \"${env.JOB_NAME}\" build: ${env.BUILD_NUMBER}\n\nView the log at:\n ${env.BUILD_URL}\n\nBlue Ocean:\n${env.RUN_DISPLAY_URL}" )
                }
           }
       }
       cleanup {
           deleteDir()
       }
    }
}

def createImagePullSecrets() {
    catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
        sh """
            # Create image pull secret for Verrazzano docker images
            ${WORKSPACE}/tests/e2e/config/scripts/create-image-pull-secret.sh "${IMAGE_PULL_SECRET}" "${GHCR_REPO}" "${GITHUB_PKGS_CREDS_USR}" "${GITHUB_PKGS_CREDS_PSW}"
            ${WORKSPACE}/tests/e2e/config/scripts/create-image-pull-secret.sh github-packages "${GHCR_REPO}" "${GITHUB_PKGS_CREDS_USR}" "${GITHUB_PKGS_CREDS_PSW}"
            ${WORKSPACE}/tests/e2e/config/scripts/create-image-pull-secret.sh ocr "${OCR_REPO}" "${OCR_CREDS_USR}" "${OCR_CREDS_PSW}"
        """
    }
}

def runGinkgo(testSuitePath) {
    catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
        sh """
            cd ${WORKSPACE}/tests/e2e
            ginkgo -v --keep-going --no-color ${GINKGO_REPORT_ARGS} -tags="${params.TAGGED_TESTS}" --focus-file="${params.INCLUDED_TESTS}" --skip-file="${params.EXCLUDED_TESTS}" ${testSuitePath}/...
        """
    }
}

def dumpK8sCluster(dumpDirectory) {
    sh """
        ${GO_REPO_PATH}/verrazzano/ci/scripts/capture_cluster_snapshot.sh ${dumpDirectory}
    """
}

def getEffectiveDumpOnSuccess() {
    def effectiveValue = params.DUMP_K8S_CLUSTER_ON_SUCCESS
    if (FORCE_DUMP_K8S_CLUSTER_ON_SUCCESS.equals("true") && (env.BRANCH_NAME.equals("master"))) {
        effectiveValue = true
        echo "Forcing dump on success based on global override setting"
    }
    return effectiveValue
}

def setDisplayName() {
    echo "Start setDisplayName"
    def causes = currentBuild.getBuildCauses()
    echo "causes: " + causes.toString()
    for (cause in causes) {
        def causeString = cause.toString()
        echo "current cause: " + causeString
        if (causeString.contains("UpstreamCause") && causeString.contains("Started by upstream project")) {
             echo "This job was caused by " + causeString
             if (causeString.contains("verrazzano-periodic-triggered-tests")) {
                 currentBuild.displayName = env.BUILD_NUMBER + " : PERIODIC"
             } else if (causeString.contains("verrazzano-flaky-tests")) {
                 currentBuild.displayName = env.BUILD_NUMBER + " : FLAKY"
             }
         }
    }
    echo "End setDisplayName"
}
