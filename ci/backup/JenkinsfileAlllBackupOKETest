// Copyright (c) 2022, 2023, Oracle and/or its affiliates.
// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.

def DOCKER_IMAGE_TAG
def EFFECTIVE_DUMP_K8S_CLUSTER_ON_SUCCESS = false

// pulling "ap-*" from the test regions given discovery of image pull issues
def availableRegions = [  "us-ashburn-1", "ca-montreal-1", "ca-toronto-1", "eu-amsterdam-1", "eu-frankfurt-1", "eu-zurich-1", "uk-london-1" ]
def OKE_CLUSTER_PREFIX = ""
def ociOsBucketName = UUID.randomUUID().toString().substring(0,6).replace('-','')
def backup_id = 'dummy'
Collections.shuffle(availableRegions)

pipeline {
    options {
        skipDefaultCheckout true
    }

    agent {
       docker {
            image "${RUNNER_DOCKER_IMAGE}"
            args "${RUNNER_DOCKER_ARGS}"
            registryUrl "${RUNNER_DOCKER_REGISTRY_URL}"
            registryCredentialsId 'ocir-pull-and-push-account'
        }
    }

    parameters {
        string (name: 'VERRAZZANO_BRANCH',
                defaultValue: 'master',
                description: 'Branch to clone and checkout the Verrazzano repo',
                trim: true)
        choice (name: 'OKE_NODE_POOL',
                description: 'OKE node pool configuration',
                // 1st choice is the default value
                choices: [ "VM.Standard.E2.4","VM.Standard2.4-2", "VM.Standard.E3.Flex-8-2",])
        choice (description: 'OCI region to launch OKE clusters in', name: 'OKE_CLUSTER_REGION',
            // 1st choice is the default value
            choices: availableRegions )
        string (name: 'GIT_COMMIT_TO_USE',
                        defaultValue: 'NONE',
                        description: 'This is the full git commit hash from the source build to be used for all jobs',
                        trim: true)
        string (name: 'VERRAZZANO_OPERATOR_IMAGE',
                defaultValue: 'NONE',
                description: 'Verrazzano platform operator image name (in ghcr.io repo).  If not specified, the operator.yaml from VZ repo will be leveraged to create VZ platform operator',
                trim: true)
        choice (name: 'OKE_CLUSTER_VERSION',
                description: 'Kubernetes Version for OKE Cluster',
                // 1st choice is the default value
                choices: [ "v1.26.2", "v1.25.4", "v1.24.1" ])
        choice (name: 'CRD_API_VERSION',
                description: 'This is the API crd version.',
                // 1st choice is the default value
                choices: [ "v1beta1", "v1alpha1"])
        booleanParam (name: 'DUMP_K8S_CLUSTER_ON_SUCCESS',
                      defaultValue: false,
                      description: 'Whether to dump k8s cluster on success (off by default can be useful to capture for comparing to failed cluster)')
        string (name: 'TAGGED_TESTS',
                defaultValue: '',
                description: 'A comma separated list of build tags for tests that should be executed (e.g. unstable_test). Default:',
                trim: true)
        string (name: 'INCLUDED_TESTS',
                defaultValue: '.*',
                description: 'A regex matching any fully qualified test file that should be executed (e.g. examples/helidon/). Default: .*',
                trim: true)
        string (name: 'EXCLUDED_TESTS',
                defaultValue: '_excluded_test',
                description: 'A regex matching any fully qualified test file that should not be executed (e.g. multicluster/|_excluded_test). Default: _excluded_test',
                trim: true)
        booleanParam (description: 'Whether to persist object store bucket', name: 'DELETE_BUCKET', defaultValue: true)
        booleanParam (description: 'Whether to execute MySQL backup tests', name: 'MYSQL_BACKUP', defaultValue: true)
        booleanParam (description: 'Whether to execute MySQL backup tests with S3 API. Default is true. If unchecked user principal creds will be used', name: 'MYSQL_BACKUP_S3', defaultValue: true)
        booleanParam (description: 'Whether to execute OpenSearch backup tests', name: 'OPENSEARCH_BACKUP', defaultValue: true)
        booleanParam (description: 'Whether to execute Rancher backup tests', name: 'RANCHER_BACKUP', defaultValue: true)
    }

    environment {
        OCR_CREDS = credentials('ocr-pull-and-push-account')
        NETRC_FILE = credentials('netrc')
        GOPATH = '/home/opc/go'
        GO_REPO_PATH = "${GOPATH}/src/github.com/verrazzano"
        DOCKER_CREDS = credentials('github-packages-credentials-rw')
        DOCKER_EMAIL = credentials('github-packages-email')
        DOCKER_REPO = 'ghcr.io'

        OCR_REPO = 'container-registry.oracle.com'
        IMAGE_PULL_SECRET = 'verrazzano-container-registry'

        TF_VAR_compartment_id = credentials('oci-tiburon-dev-compartment-ocid')
        TF_VAR_tenancy_id = credentials('oci-tenancy')
        TF_VAR_tenancy_name = credentials('oci-tenancy-name')
        TF_VAR_user_id = credentials('oci-user-ocid')
        TF_VAR_region = "${params.OKE_CLUSTER_REGION}"
        TF_VAR_kubernetes_version = "${params.OKE_CLUSTER_VERSION}"
        TF_VAR_nodepool_config = "${params.OKE_NODE_POOL}"
        TF_VAR_api_fingerprint = credentials('oci-api-key-fingerprint')
        TF_VAR_api_private_key_path = credentials('oci-api-key')
        TF_VAR_s3_bucket_access_key = credentials('oci-s3-bucket-access-key')
        TF_VAR_s3_bucket_secret_key = credentials('oci-s3-bucket-secret-key')
        TF_VAR_ssh_public_key_path = credentials('oci-tf-pub-ssh-key')

        TEST_CONFIG_FILE = "${HOME}/testConfigOke.yaml"
        OCI_CLI_TENANCY = credentials('oci-tenancy')
        OCI_CLI_USER = credentials('oci-user-ocid')
        OCI_CLI_FINGERPRINT = credentials('oci-api-key-fingerprint')
        OCI_CLI_KEY_FILE = credentials('oci-api-key')
        OCI_CLI_REGION = "${params.OKE_CLUSTER_REGION}"
        DISABLE_SPINNER=1
        OCI_CLI_SUPPRESS_FILE_PERMISSIONS_WARNING = 'True'
        VERRAZZANO_OPERATOR_IMAGE="${params.VERRAZZANO_OPERATOR_IMAGE}"
        TIMESTAMP = sh(returnStdout: true, script: "date +%Y%m%d%H%M%S").trim()
        SHORT_TIME_STAMP = sh(returnStdout: true, script: "date +%m%d%H%M%S").trim()
        POST_DUMP_FAILED_FILE = "${WORKSPACE}/post_dump_failed_file.tmp"
        KUBECONFIG = "${WORKSPACE}/oke_kubeconfig"
        VERRAZZANO_KUBECONFIG = "${KUBECONFIG}"
        INSTALL_PROFILE = "prod"
        VZ_ENVIRONMENT_NAME = "default"
        TEST_SCRIPTS_DIR = "${GO_REPO_PATH}/verrazzano/tests/e2e/config/scripts"
        LOOPING_TEST_SCRIPTS_DIR = "${TEST_SCRIPTS_DIR}/looping-test"
        UNINSTALL_TEST_SCRIPTS_DIR = "${TEST_SCRIPTS_DIR}/uninstall-test"
        INSTALL_CONFIG_FILE = "./tests/e2e/config/scripts/${params.CRD_API_VERSION}/install-verrazzano-oke-backup-enabled.yaml"
        WEBLOGIC_PSW = credentials('weblogic-example-domain-password')
        DATABASE_PSW = credentials('todo-mysql-password')

        // used to emit metrics
        PROMETHEUS_CREDENTIALS = credentials('prometheus-credentials')
        TEST_ENV_LABEL = "magicdns_oke"
        TEST_ENV = "OKE"
        SEARCH_HTTP_ENDPOINT = credentials('search-gw-url')
        SEARCH_PASSWORD = "${PROMETHEUS_CREDENTIALS_PSW}"
        SEARCH_USERNAME = "${PROMETHEUS_CREDENTIALS_USR}"

        // used to generate Ginkgo test reports
        TEST_REPORT = "test-report.xml"
        GINKGO_REPORT_ARGS = "--junit-report=${TEST_REPORT} --keep-separate-reports=true"
        TEST_REPORT_DIR = "${WORKSPACE}/tests/e2e"

        // Backup parameters
        VELERO_NAMESPACE = "verrazzano-backup"
        VELERO_SECRET_NAME = "velero-opensearch-backup-creds"
        VELERO_MYSQL_SECRET_NAME = "velero-mysql-backup-creds"
        RANCHER_SECRET_NAME = "rancher-backup-creds"
        OCI_OS_ACCESS_KEY = credentials('velero-key-id')
        OCI_OS_ACCESS_SECRET_KEY = credentials('velero-key')
        OCI_OS_COMPARTMENT_ID = credentials('v8o-velero-test')
        OCI_OS_NAMESPACE = credentials('oci-os-namespace')
        OCI_OS_BUCKET_ID = "${ociOsBucketName}"
        OCI_OS_BUCKET_NAME = "bucket-${OCI_OS_BUCKET_ID}"
        BACKUP_OPENSEARCH = "backup-opensearch-${OCI_OS_BUCKET_ID}"
        BACKUP_RANCHER = "backup-rancher-${OCI_OS_BUCKET_ID}"
        BACKUP_RESOURCE = "vz-hook-resource-${OCI_OS_BUCKET_ID}"
        RESTORE_OPENSEARCH = "restore-opensearch-${OCI_OS_BUCKET_ID}"
        RESTORE_RANCHER = "restore-rancher-${OCI_OS_BUCKET_ID}"
        BACKUP_MYSQL = "backup-mysql-${OCI_OS_BUCKET_ID}"
        RESTORE_MYSQL = "restore-mysql-${OCI_OS_BUCKET_ID}"
        BACKUP_OPENSEARCH_STORAGE = "storage-opensearch-${OCI_OS_BUCKET_ID}"
        BACKUP_MYSQL_STORAGE = "storage-mysql-${OCI_OS_BUCKET_ID}"
        BACKUP_REGION  = "us-phoenix-1"
        OCI_OS_COMMIT_BUCKET="verrazzano-builds-by-commit"
        VZ_CLI_TARGZ="vz-linux-amd64.tar.gz"

        // Environment variable for Verrazzano CLI executable
        VZ_COMMAND="${GO_REPO_PATH}/vz"
    }

    stages {
        stage('Clean workspace and checkout') {
            steps {
                sh """
                    echo "${NODE_LABELS}"
                """

                script {
                    EFFECTIVE_DUMP_K8S_CLUSTER_ON_SUCCESS = getEffectiveDumpOnSuccess()
                    if (params.GIT_COMMIT_TO_USE == "NONE") {
                        echo "Specific GIT commit was not specified, use current head"
                        def scmInfo = checkout scm
                        env.GIT_COMMIT = scmInfo.GIT_COMMIT
                        env.GIT_BRANCH = scmInfo.GIT_BRANCH
                    } else {
                        echo "SCM checkout of ${params.GIT_COMMIT_TO_USE}"
                        def scmInfo = checkout([
                            $class: 'GitSCM',
                            branches: [[name: params.GIT_COMMIT_TO_USE]],
                            doGenerateSubmoduleConfigurations: false,
                            extensions: [],
                            submoduleCfg: [],
                            userRemoteConfigs: [[url: env.SCM_VERRAZZANO_GIT_URL]]])
                        env.GIT_COMMIT = scmInfo.GIT_COMMIT
                        env.GIT_BRANCH = scmInfo.GIT_BRANCH
                        // If the commit we were handed is not what the SCM says we are using, fail
                        if (!env.GIT_COMMIT.equals(params.GIT_COMMIT_TO_USE)) {
                            echo "SCM didn't checkout the commit we expected. Expected: ${params.GIT_COMMIT_TO_USE}, Found: ${scmInfo.GIT_COMMIT}"
                            exit 1
                        }
                    }
                    echo "SCM checkout of ${env.GIT_BRANCH} at ${env.GIT_COMMIT}"
                }

                sh """
                    cp -f "${NETRC_FILE}" $HOME/.netrc
                    chmod 600 $HOME/.netrc
                """

                script {
                    try {
                    sh """
                        echo "${DOCKER_CREDS_PSW}" | docker login ${env.DOCKER_REPO} -u ${DOCKER_CREDS_USR} --password-stdin
                    """
                    } catch(error) {
                        echo "docker login failed, retrying after sleep"
                        retry(4) {
                            sleep(30)
                            sh """
                                echo "${DOCKER_CREDS_PSW}" | docker login ${env.DOCKER_REPO} -u ${DOCKER_CREDS_USR} --password-stdin
                            """
                        }
                    }
                }
                sh """
                    rm -rf ${GO_REPO_PATH}/verrazzano
                    mkdir -p ${GO_REPO_PATH}/verrazzano
                    tar cf - . | (cd ${GO_REPO_PATH}/verrazzano/ ; tar xf -)
                """

                script {
                    def props = readProperties file: '.verrazzano-development-version'
                    VERRAZZANO_DEV_VERSION = props['verrazzano-development-version']
                    TIMESTAMP = sh(returnStdout: true, script: "date +%Y%m%d%H%M%S").trim()
                    SHORT_COMMIT_HASH = sh(returnStdout: true, script: "git rev-parse --short=8 HEAD").trim()
                    DOCKER_IMAGE_TAG = "${VERRAZZANO_DEV_VERSION}-${TIMESTAMP}-${SHORT_COMMIT_HASH}"
                    // update the description with some meaningful info
                    setDisplayName()
                    currentBuild.description = params.KUBERNETES_CLUSTER_VERSION + " : " + SHORT_COMMIT_HASH + " : " + env.GIT_COMMIT + " : " + params.GIT_COMMIT_TO_USE

                    // derive the prefix for the OKE cluster
                    OKE_CLUSTER_PREFIX = sh(returnStdout: true, script: "${WORKSPACE}/ci/scripts/derive_oke_cluster_name.sh").trim()
                }
                script {
                    sh """
                        echo "Downloading VZ CLI from object storage"
                        oci --region us-phoenix-1 os object get --namespace ${OCI_OS_NAMESPACE} -bn ${OCI_OS_COMMIT_BUCKET} --name ephemeral/${env.BRANCH_NAME}/${SHORT_COMMIT_HASH}/${VZ_CLI_TARGZ} --file ${VZ_CLI_TARGZ}
                        tar xzf ${VZ_CLI_TARGZ} -C ${GO_REPO_PATH}
                        ${GO_REPO_PATH}/vz version
                    """
                }
            }
        }

        stage('Create bucket') {
             steps {
                createBucket("${OCI_OS_BUCKET_NAME}")
             }
        }


        stage("Create OKE Cluster") {
            steps {
                sh "TF_VAR_label_prefix=${OKE_CLUSTER_PREFIX} TF_VAR_state_name=uninstall-${env.BUILD_NUMBER}-${env.BRANCH_NAME}/${env.TIMESTAMP} ${GO_REPO_PATH}/verrazzano/tests/e2e/config/scripts/create_oke_cluster.sh"
            }
        }

        stage('Install Verrazzano') {
            environment {
                OCI_OS_NAMESPACE = credentials('oci-os-namespace')
            }
            steps {
                script {
                    listNamepacesAndPods('before installing Verrazzano')
                }
                sh """
                    # Create image pull secret for Verrazzano docker images
                    cd ${GO_REPO_PATH}/verrazzano
                    ./tests/e2e/config/scripts/create-image-pull-secret.sh "${IMAGE_PULL_SECRET}" "${DOCKER_REPO}" "${DOCKER_CREDS_USR}" "${DOCKER_CREDS_PSW}"
                    ./tests/e2e/config/scripts/create-image-pull-secret.sh github-packages "${DOCKER_REPO}" "${DOCKER_CREDS_USR}" "${DOCKER_CREDS_PSW}"
                    ./tests/e2e/config/scripts/create-image-pull-secret.sh ocr "${DOCKER_REPO}" "${DOCKER_CREDS_USR}" "${DOCKER_CREDS_PSW}"

                    echo "Install Platform Operator"
                    cd ${GO_REPO_PATH}/verrazzano
                    if [ "NONE" = "${VERRAZZANO_OPERATOR_IMAGE}" ]; then
                        echo "Using operator.yaml from object storage"
                        oci --region us-phoenix-1 os object get --namespace ${OCI_OS_NAMESPACE} -bn ${OCI_OS_COMMIT_BUCKET} --name ephemeral/${env.BRANCH_NAME}/${SHORT_COMMIT_HASH}/operator.yaml --file ${WORKSPACE}/downloaded-operator.yaml
                        cp ${WORKSPACE}/downloaded-operator.yaml ${WORKSPACE}/acceptance-test-operator.yaml
                    else
                        echo "Generating operator.yaml based on image name provided: ${VERRAZZANO_OPERATOR_IMAGE}"
                        env IMAGE_PULL_SECRETS=verrazzano-container-registry DOCKER_IMAGE=${VERRAZZANO_OPERATOR_IMAGE} ./tools/scripts/generate_operator_yaml.sh > ${WORKSPACE}/acceptance-test-operator.yaml
                    fi
                    kubectl apply -f ${WORKSPACE}/acceptance-test-operator.yaml

                    # make sure ns exists
                    ./tests/e2e/config/scripts/check_verrazzano_ns_exists.sh verrazzano-install

                    # create secret in verrazzano-install ns
                    ./tests/e2e/config/scripts/create-image-pull-secret.sh "${IMAGE_PULL_SECRET}" "${DOCKER_REPO}" "${DOCKER_CREDS_USR}" "${DOCKER_CREDS_PSW}" "verrazzano-install"
                    ./tests/e2e/config/scripts/process_nipio_install_yaml.sh ${INSTALL_CONFIG_FILE}

                    echo "Waiting for Operator to be ready"
                    cd ${GO_REPO_PATH}/verrazzano
                    kubectl -n verrazzano-install rollout status deployment/verrazzano-platform-operator

                    echo "Installing Verrazzano on OKE"
                    kubectl apply -f ${INSTALL_CONFIG_FILE}

                    # wait for Verrazzano install to complete
                    ./tests/e2e/config/scripts/wait-for-verrazzano-install.sh
                """
            }
            post {

                always {
                    archiveArtifacts artifacts: "acceptance-test-operator.yaml,downloaded-operator.yaml", allowEmptyArchive: true
                }
                success {
                    script {
                        if (EFFECTIVE_DUMP_K8S_CLUSTER_ON_SUCCESS == true) {
                            dumpK8sCluster('verrazzano-install-cluster-dump')
                        }
                    }
                }
                failure {
                    script {
                        dumpK8sCluster('verrazzano-install-failure-cluster-dump')
                        sh """
                            mkdir -p ${WORKSPACE}/verrazzano-platform-operator/scripts/install/build/logs
                            ${LOOPING_TEST_SCRIPTS_DIR}/dump_resources.sh > ${WORKSPACE}/verrazzano-platform-operator/scripts/install/build/logs/resources.log
                        """
                    }
                }
            }
        }


        stage('verify-install') {
            steps {
                catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                    sh """
                        cd ${WORKSPACE}/tests/e2e
                        ginkgo -p --randomize-all -v --keep-going --no-color ${GINKGO_REPORT_ARGS} -tags="${params.TAGGED_TESTS}" --focus-file="${params.INCLUDED_TESTS}" --skip-file="${params.EXCLUDED_TESTS}" verify-install/...
                    """
                }
            }
            post {
                failure {
                    script {
                        dumpK8sCluster('verify-install-cluster-dump')
                    }
                }
            }
        }

        stage('opensearch backup and restore') {
            when {
                expression {params.OPENSEARCH_BACKUP == true}
            }
            environment {
                DUMP_DIRECTORY="${TEST_DUMP_ROOT}/backup/opensearch"
            }
            steps {
                println("Checking all pods in namespace verrazzano-system are ready before start of test")
                waitForPodsToBeUp("verrazzano-system")
                runGinkgoRandomize('backup/opensearch')
                println("Checking all pods in namespace verrazzano-system are ready after test completion")
                waitForPodsToBeUp("verrazzano-system")
            }
            post {
                always {
                    archiveArtifacts artifacts: '**/coverage.html,**/logs/*,**/test-cluster-dumps/**', allowEmptyArchive: true
                    junit testResults: '**/*test-result.xml', allowEmptyResults: true
                }
                failure {
                    script {
                        dumpK8sCluster('opensearch-backup-restore-cluster-dump')
                    }
                }
            }
        }

        stage('rancher backup and restore') {
            when {
                expression {params.RANCHER_BACKUP == true}
            }
            environment {
                DUMP_DIRECTORY="${TEST_DUMP_ROOT}/backup/rancher"
            }
            steps {
                runGinkgoRandomize('backup/rancher')
            }
            post {
                always {
                    archiveArtifacts artifacts: '**/coverage.html,**/logs/*,**/test-cluster-dumps/**', allowEmptyArchive: true
                    junit testResults: '**/*test-result.xml', allowEmptyResults: true
                }
                failure {
                    script {
                        dumpK8sCluster('rancher-backup-restore-cluster-dump')
                    }
                }
            }
        }

        stage('mysql operator backup and restore with OCI user principal') {
            when {
                allOf {
                    expression {params.MYSQL_BACKUP == true}
                    expression {params.MYSQL_BACKUP_S3 != true}
                }
            }
            environment {
                DUMP_DIRECTORY="${TEST_DUMP_ROOT}/backup/mysql"
            }
            steps {
                println("MySQL backup with OCI user principal...")
                echoAllPodInfo()
                println("Checking all pods in namespace keycloak are ready before start of test")
                waitForPodsToBeUp("keycloak")
                runGinkgoRandomize('backup/mysql')
                println("Checking all pods in namespace keycloak are ready after completion of test")
                waitForPodsToBeUp("keycloak")
            }
            post {
                always {
                    archiveArtifacts artifacts: '**/coverage.html,**/logs/*,**/test-cluster-dumps/**', allowEmptyArchive: true
                    junit testResults: '**/*test-result.xml', allowEmptyResults: true
                }
                failure {
                    script {
                        dumpK8sCluster('mysql-backup-restore-cluster-dump')
                    }
                }
            }
        }

        stage('mysql operator backup and restore with S3') {
            when {
                allOf {
                    expression {params.MYSQL_BACKUP == true}
                    expression {params.MYSQL_BACKUP_S3 == true}
                }
            }
            environment {
                MYSQL_BACKUP_MODE = "s3"
                DUMP_DIRECTORY="${TEST_DUMP_ROOT}/backup/mysql"
            }
            steps {
                println("MySQL backup with S3 credentials ...")
                echoAllPodInfo()
                println("Checking all pods in namespace keycloak are ready before start of test")
                waitForPodsToBeUp("keycloak")
                runGinkgoRandomize('backup/mysql')
                println("Checking all pods in namespace keycloak are ready after completion of test")
                waitForPodsToBeUp("keycloak")
            }
            post {
                always {
                    archiveArtifacts artifacts: '**/coverage.html,**/logs/*,**/test-cluster-dumps/**', allowEmptyArchive: true
                    junit testResults: '**/*test-result.xml', allowEmptyResults: true
                }
                failure {
                    script {
                        dumpK8sCluster('mysql-backup-restore-cluster-dump')
                    }
                }
            }
        }

    }
    post {
        always {
            sh """
                # Copy the generated test reports to WORKSPACE to archive them
                mkdir -p ${TEST_REPORT_DIR}
                cd ${GO_REPO_PATH}/verrazzano/tests/e2e
                find . -name "${TEST_REPORT}" | cpio -pdm ${TEST_REPORT_DIR}
            """
            archiveArtifacts artifacts: "**/oke_kubeconfig,**/coverage.html,**/logs/**,**/build/resources/**,**/verrazzano_images.txt,**/*full-cluster*/**,**/bug-report/**,**/${TEST_REPORT}", allowEmptyArchive: true
            junit testResults: "**/${TEST_REPORT}", allowEmptyResults: true
            script {
                if (params.DELETE_BUCKET) {
                    println("Delete object store bucket.")
                    deleteBucket("${OCI_OS_BUCKET_NAME}")
                } else {
                    println("Object store bucket not deleted!")
                }
            }
        }
        failure {
            script {
                archiveArtifacts artifacts: '**/oke_kubeconfig,**/coverage.html,**/logs/**,**/build/resources/**,**/verrazzano_images.txt,**/*full-cluster*/**,**/bug-report/**', allowEmptyArchive: true
                script {
                    if (env.JOB_NAME == "verrazzano-uninstall-test/master" || env.JOB_NAME ==~ "verrazzano-uninstall-test/release-*") {
                        slackSend ( message: "Job Failed - \"${env.JOB_NAME}\" build: ${env.BUILD_NUMBER}\n\nView the log at:\n ${env.BUILD_URL}\n\nBlue Ocean:\n${env.RUN_DISPLAY_URL}" )
                    }
                }
            }
        }
        cleanup {
            sh "VERRAZZANO_KUBECONFIG=${env.KUBECONFIG} TF_VAR_label_prefix=${OKE_CLUSTER_PREFIX} TF_VAR_state_name=uninstall-${env.BUILD_NUMBER}-${env.BRANCH_NAME}/${env.TIMESTAMP} ${GO_REPO_PATH}/verrazzano/tests/e2e/config/scripts/delete_oke_cluster.sh || true"
            deleteDir()
        }
    }
}

def echoAllPodInfo() {
    sh """
         kubectl get pod -A
    """
}

def createBucket(bucketName) {
    sh """
        OCI_CLI_AUTH="instance_principal" oci --region us-phoenix-1 os bucket create -c ${OCI_OS_COMPARTMENT_ID} --namespace ${OCI_OS_NAMESPACE} --name ${bucketName}
    """
}

def deleteBucket(bucketName) {
    sh """
        OCI_CLI_AUTH="instance_principal" oci --region us-phoenix-1 os bucket delete -bn ${bucketName} --empty --force
    """
}


def waitForPodsToBeUp(namespace) {
    sh """
         kubectl wait -n ${namespace} --for=condition=ready pod --all --timeout 10m
    """
}

def runGinkgoRandomize(testSuitePath, kubeConfig = '') {
    catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
        sh """
            if [ ! -z "${kubeConfig}" ]; then
                export KUBECONFIG="${kubeConfig}"
            fi
            cd ${GO_REPO_PATH}/verrazzano/tests/e2e
            if [ -d "${testSuitePath}" ]; then
                ginkgo -vv --progress --keep-going --no-color ${GINKGO_REPORT_ARGS} -tags="${params.TAGGED_TESTS}" --focus-file="${params.INCLUDED_TESTS}" --skip-file="${params.EXCLUDED_TESTS}" ${testSuitePath}/...
            fi
        """
    }
}

def dumpK8sCluster(dumpDirectory) {
    sh """
        ${GO_REPO_PATH}/verrazzano/ci/scripts/capture_cluster_snapshot.sh ${dumpDirectory}
    """
}

def dumpVerrazzanoSystemPods(logDirectory) {
    sh """
        cd ${GO_REPO_PATH}/verrazzano/platform-operator
        export DIAGNOSTIC_LOG="${WORKSPACE}/verrazzano-platform-operator/scripts/${logDirectory}/build/logs/verrazzano-system-pods.log"
        ./scripts/install/k8s-dump-objects.sh -o pods -n verrazzano-system -m "verrazzano system pods" || echo "failed" > ${POST_DUMP_FAILED_FILE}
        export DIAGNOSTIC_LOG="${WORKSPACE}/verrazzano-platform-operator/scripts/${logDirectory}/build/logs/verrazzano-system-certs.log"
        ./scripts/install/k8s-dump-objects.sh -o cert -n verrazzano-system -m "verrazzano system certs" || echo "failed" > ${POST_DUMP_FAILED_FILE}
        export DIAGNOSTIC_LOG="${WORKSPACE}/verrazzano-platform-operator/scripts/${logDirectory}/build/logs/verrazzano-system-osd.log"
        ./scripts/install/k8s-dump-objects.sh -o pods -n verrazzano-system -r "vmi-system-osd-*" -m "verrazzano system opensearchdashboards log" -l -c osd || echo "failed" > ${POST_DUMP_FAILED_FILE}
        export DIAGNOSTIC_LOG="${WORKSPACE}/verrazzano-platform-operator/scripts/${logDirectory}/build/logs/verrazzano-system-es-master.log"
        ./scripts/install/k8s-dump-objects.sh -o pods -n verrazzano-system -r "vmi-system-es-master-*" -m "verrazzano system opensearchdashboards log" -l -c es-master || echo "failed" > ${POST_DUMP_FAILED_FILE}
    """
}

def dumpCattleSystemPods(logDirectory) {
    sh """
        cd ${GO_REPO_PATH}/verrazzano/platform-operator
        export DIAGNOSTIC_LOG="${WORKSPACE}/verrazzano-platform-operator/scripts/${logDirectory}/build/logs/cattle-system-pods.log"
        ./scripts/install/k8s-dump-objects.sh -o pods -n cattle-system -m "cattle system pods" || echo "failed" > ${POST_DUMP_FAILED_FILE}
        export DIAGNOSTIC_LOG="${WORKSPACE}/verrazzano-platform-operator/scripts/${logDirectory}/build/logs/rancher.log"
        ./scripts/install/k8s-dump-objects.sh -o pods -n cattle-system -r "rancher-*" -m "Rancher logs" -l || echo "failed" > ${POST_DUMP_FAILED_FILE}
    """
}

def dumpNginxIngressControllerLogs(logDirectory) {
    sh """
        cd ${GO_REPO_PATH}/verrazzano/platform-operator
        export DIAGNOSTIC_LOG="${WORKSPACE}/verrazzano-platform-operator/scripts/${logDirectory}/build/logs/nginx-ingress-controller.log"
        ./scripts/install/k8s-dump-objects.sh -o pods -n ingress-nginx -r "nginx-ingress-controller-*" -m "Nginx Ingress Controller" -c controller -l || echo "failed" > ${POST_DUMP_FAILED_FILE}
    """
}

def dumpVerrazzanoPlatformOperatorLogs(logDirectory) {
    sh """
        ## dump out verrazzano-platform-operator logs
        mkdir -p ${WORKSPACE}/verrazzano-platform-operator/logs/${logDirectory}
        kubectl -n verrazzano-install logs --selector=app=verrazzano-platform-operator > ${WORKSPACE}/verrazzano-platform-operator/logs/${logDirectory}/verrazzano-platform-operator-pod.log --tail -1 || echo "failed" > ${POST_DUMP_FAILED_FILE}
        kubectl -n verrazzano-install describe pod --selector=app=verrazzano-platform-operator > ${WORKSPACE}/verrazzano-platform-operator/logs/${logDirectory}/verrazzano-platform-operator-pod.out || echo "failed" > ${POST_DUMP_FAILED_FILE}
        echo "verrazzano-platform-operator logs dumped to verrazzano-platform-operator-pod.log"
        echo "verrazzano-platform-operator pod description dumped to verrazzano-platform-operator-pod.out"
        echo "------------------------------------------"
    """
}

def dumpVerrazzanoApplicationOperatorLogs(logDirectory) {
    sh """
        ## dump out verrazzano-application-operator logs
        mkdir -p ${WORKSPACE}/verrazzano-application-operator/logs/${logDirectory}
        kubectl -n verrazzano-system logs --selector=app=verrazzano-application-operator > ${WORKSPACE}/verrazzano-application-operator/logs/${logDirectory}/verrazzano-application-operator-pod.log --tail -1 || echo "failed" > ${POST_DUMP_FAILED_FILE}
        kubectl -n verrazzano-system describe pod --selector=app=verrazzano-application-operator > ${WORKSPACE}/verrazzano-application-operator/logs/${logDirectory}/verrazzano-application-operator-pod.out || echo "failed" > ${POST_DUMP_FAILED_FILE}
        echo "verrazzano-application-operator logs dumped to verrazzano-application-operator-pod.log"
        echo "verrazzano-application-operator pod description dumped to verrazzano-application-operator-pod.out"
        echo "------------------------------------------"
        """
}

def dumpOamKubernetesRuntimeLogs(logDirectory) {
    sh """
        ## dump out oam-kubernetes-runtime logs
        mkdir -p ${WORKSPACE}/oam-kubernetes-runtime/logs/${logDirectory}
        kubectl -n verrazzano-system logs --selector=app.kubernetes.io/instance=oam-kubernetes-runtime > ${WORKSPACE}/oam-kubernetes-runtime/logs/${logDirectory}/oam-kubernetes-runtime-pod.log --tail -1 || echo "failed" > ${POST_DUMP_FAILED_FILE}
        kubectl -n verrazzano-system describe pod --selector=app.kubernetes.io/instance=oam-kubernetes-runtime > ${WORKSPACE}/verrazzano-application-operator/logs/${logDirectory}/oam-kubernetes-runtime-pod.out || echo "failed" > ${POST_DUMP_FAILED_FILE}
        echo "verrazzano-application-operator logs dumped to oam-kubernetes-runtime-pod.log"
        echo "verrazzano-application-operator pod description dumped to oam-kubernetes-runtime-pod.out"
        echo "------------------------------------------"
    """
}

def dumpVerrazzanoApiLogs(logDirectory) {
    sh """
        cd ${GO_REPO_PATH}/verrazzano/platform-operator
        export DIAGNOSTIC_LOG="${WORKSPACE}/verrazzano-platform-operator/scripts/${logDirectory}/build/logs/verrazzano-authproxy.log"
        ./scripts/install/k8s-dump-objects.sh -o pods -n verrazzano-system -r "verrazzano-authproxy-*" -m "verrazzano api" -c verrazzano-authproxy -l || echo "failed" > ${POST_DUMP_FAILED_FILE}
    """
}

def listNamepacesAndPods(customMessage) {
    sh """
        echo "Listing all the namespaces and pods the namespaces ${customMessage}."
        kubectl get namespaces
        kubectl get pods -A
        echo "-----------------------------------------------------"
    """
}

def listHelmReleases(customMessage) {
    sh """
        echo "Listing the releases across all namespaces ${customMessage}."
        helm list -A
        echo "-----------------------------------------------------"
    """
}

def getEffectiveDumpOnSuccess() {
    def effectiveValue = params.DUMP_K8S_CLUSTER_ON_SUCCESS
    if (FORCE_DUMP_K8S_CLUSTER_ON_SUCCESS.equals("true") && (env.BRANCH_NAME.equals("master"))) {
        effectiveValue = true
        echo "Forcing dump on success based on global override setting"
    }
    return effectiveValue
}

def setDisplayName() {
    echo "Start setDisplayName"
    def causes = currentBuild.getBuildCauses()
    echo "causes: " + causes.toString()
    for (cause in causes) {
        def causeString = cause.toString()
        echo "current cause: " + causeString
        if (causeString.contains("UpstreamCause") && causeString.contains("Started by upstream project")) {
             echo "This job was caused by " + causeString
             if (causeString.contains("verrazzano-periodic-triggered-tests")) {
                 currentBuild.displayName = env.BUILD_NUMBER + " : PERIODIC"
             } else if (causeString.contains("verrazzano-flaky-tests")) {
                 currentBuild.displayName = env.BUILD_NUMBER + " : FLAKY"
             }
         }
    }
    echo "End setDisplayName"
}
