// Copyright (c) 2021, Oracle and/or its affiliates.
// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.

def DOCKER_IMAGE_TAG
def SKIP_ACCEPTANCE_TESTS = false
def availableRegions = [ "us-ashburn-1", "ap-chuncheon-1", "ap-hyderabad-1", "ap-melbourne-1", "ap-mumbai-1", "ap-osaka-1", "ap-seoul-1", "ap-sydney-1",
                          "ap-tokyo-1", "ca-montreal-1", "ca-toronto-1", "eu-amsterdam-1", "eu-frankfurt-1", "eu-zurich-1", "me-jeddah-1",
                          "sa-saopaulo-1", "uk-london-1", "us-phoenix-1" ]
Collections.shuffle(availableRegions)
def zoneId = UUID.randomUUID().toString().substring(0,3).replace('-','')
def dns_zone_ocid = 'dummy'

pipeline {
    options {
        skipDefaultCheckout true
    }

    agent {
       docker {
            image "${RUNNER_DOCKER_IMAGE}"
            args "${RUNNER_DOCKER_ARGS}"
            registryUrl "${RUNNER_DOCKER_REGISTRY_URL}"
            registryCredentialsId 'ocir-pull-and-push-account'
            label "VM.Standard2.8"
        }
    }

    parameters {
        choice (description: 'Number of Cluster', name: 'TOTAL_CLUSTERS',
                        choices: ["1", "2", "3"])
        choice (description: 'Verrazzano Test Environment', name: 'TEST_ENV',
                choices: ["kind", "magicdns_oke", "ocidns_oke"])
        choice (description: 'OCI region to launch OKE clusters', name: 'OKE_CLUSTER_REGION',
            // 1st choice is the default value
            choices: availableRegions )
        choice (description: 'OKE node pool configuration', name: 'OKE_NODE_POOL',
            // 1st choice is the default value
            choices: [ "VM.Standard2.4-2", "VM.Standard.E3.Flex-8-2" ])
        choice (description: 'Kubernetes Version for OKE Cluster', name: 'OKE_CLUSTER_VERSION',
                // 1st choice is the default value
                choices: [ "v1.18.10", "v1.17.13" ])
         choice (name: 'KUBERNETES_CLUSTER_VERSION',
                         description: 'Kubernetes Version for KIND Cluster',
                         // 1st choice is the default value
                         choices: [ "1.18", "1.17" ])
        string defaultValue: 'dev', description: 'Verrazzano install profile name', name: "INSTALL_PROFILE", trim: true
        booleanParam (description: 'Whether to dump k8s cluster on success (off by default can be useful to capture for comparing to failed cluster)', name: 'DUMP_K8S_CLUSTER_ON_SUCCESS', defaultValue: false)
    }

    environment {
        DOCKER_PLATFORM_CI_IMAGE_NAME = 'verrazzano-platform-operator-jenkins'
        DOCKER_PLATFORM_PUBLISH_IMAGE_NAME = 'verrazzano-platform-operator'
        DOCKER_PLATFORM_IMAGE_NAME = "${env.BRANCH_NAME == 'master' ? env.DOCKER_PLATFORM_PUBLISH_IMAGE_NAME : env.DOCKER_PLATFORM_CI_IMAGE_NAME}"
        DOCKER_OAM_CI_IMAGE_NAME = 'verrazzano-application-operator-jenkins'
        DOCKER_OAM_PUBLISH_IMAGE_NAME = 'verrazzano-application-operator'
        DOCKER_OAM_IMAGE_NAME = "${env.BRANCH_NAME == 'master' ? env.DOCKER_OAM_PUBLISH_IMAGE_NAME : env.DOCKER_OAM_CI_IMAGE_NAME}"
        CREATE_LATEST_TAG = "${env.BRANCH_NAME == 'master' ? '1' : '0'}"
        GOPATH = '/home/opc/go'
        GO_REPO_PATH = "${GOPATH}/src/github.com/verrazzano"
        DOCKER_CREDS = credentials('github-packages-credentials-rw')
        DOCKER_EMAIL = credentials('github-packages-email')
        DOCKER_REPO = 'ghcr.io'
        DOCKER_NAMESPACE = 'verrazzano'
        NETRC_FILE = credentials('netrc')
        GITHUB_API_TOKEN = credentials('github-api-token-release-assets')
        GITHUB_RELEASE_USERID = credentials('github-userid-release')
        GITHUB_RELEASE_EMAIL = credentials('github-email-release')
        SERVICE_KEY = credentials('PAGERDUTY_SERVICE_KEY')

        CLUSTER_NAME_PREFIX = 'verrazzano'
        TESTS_EXECUTED_FILE = "${WORKSPACE}/tests_executed_file.tmp"
        KUBECONFIG_DIR = "${WORKSPACE}/kubeconfig"

        OCR_CREDS = credentials('ocr-pull-and-push-account')
        OCR_REPO = 'container-registry.oracle.com'
        IMAGE_PULL_SECRET = 'verrazzano-container-registry'
        INSTALL_CONFIG_FILE_KIND = "${GO_REPO_PATH}/verrazzano/tests/e2e/config/scripts/install-verrazzano-kind.yaml"

        TEST_ENV = "${params.TEST_ENV}"
        INSTALL_PROFILE = "${params.INSTALL_PROFILE}"

        // Find a better way to handle this
        // OKE_CLUSTER_VERSION = "${params.KUBERNETES_VERSION == '1.17' ? 'v1.17.13' : 'v1.18.10'}"
        TF_VAR_compartment_id = credentials('oci-tiburon-dev-compartment-ocid')
        TF_VAR_tenancy_id = credentials('oci-tenancy')
        TF_VAR_tenancy_name = credentials('oci-tenancy-name')
        TF_VAR_user_id = credentials('oci-user-ocid')
        TF_VAR_region = "${params.OKE_CLUSTER_REGION}"
        TF_VAR_kubernetes_version = "${params.OKE_CLUSTER_VERSION}"
        TF_VAR_nodepool_config = "${params.OKE_NODE_POOL}"
        TF_VAR_api_fingerprint = credentials('oci-api-key-fingerprint')
        TF_VAR_api_private_key_path = credentials('oci-api-key')
        TF_VAR_s3_bucket_access_key = credentials('oci-s3-bucket-access-key')
        TF_VAR_s3_bucket_secret_key = credentials('oci-s3-bucket-secret-key')
        TF_VAR_ssh_public_key_path = credentials('oci-tf-pub-ssh-key')

        OCI_CLI_TENANCY = credentials('oci-tenancy')
        OCI_CLI_USER = credentials('oci-user-ocid')
        OCI_CLI_FINGERPRINT = credentials('oci-api-key-fingerprint')
        OCI_CLI_KEY_FILE = credentials('oci-api-key')
        OCI_CLI_REGION = "${params.OKE_CLUSTER_REGION}"
        OCI_CLI_SUPPRESS_FILE_PERMISSIONS_WARNING = 'True'
        INSTALL_CONFIG_FILE_OCIDNS = "${GO_REPO_PATH}/verrazzano/tests/e2e/config/scripts/install-verrazzano-ocidns.yaml"
        INSTALL_CONFIG_FILE_XIPIO = "${GO_REPO_PATH}/verrazzano/tests/e2e/config/scripts/install-verrazzano-xipio.yaml"
        OCI_DNS_ZONE_SUFFIX=credentials('oci-dns-zone')
        OCI_DNS_ZONE_NAME="z${zoneId}." + "${OCI_DNS_ZONE_SUFFIX}"
        VZ_ENVIRONMENT_NAME = "${params.TEST_ENV == 'ocidns_oke' ? 'b' + env.BUILD_NUMBER : 'default'}"
        TIMESTAMP = sh(returnStdout: true, script: "date +%Y%m%d%H%M%S").trim()
        TEST_SCRIPTS_DIR = "${GO_REPO_PATH}/verrazzano/tests/e2e/config/scripts"
    }

    stages {
        stage('Clean workspace and checkout') {
            steps {
                sh """
                    echo "${NODE_LABELS}"
                """

                script {
                    checkout scm
                }
                sh """
                    cp -f "${NETRC_FILE}" $HOME/.netrc
                    chmod 600 $HOME/.netrc
                """

                script {
                    try {
                        sh """
                            echo "${DOCKER_CREDS_PSW}" | docker login ${env.DOCKER_REPO} -u ${DOCKER_CREDS_USR} --password-stdin
                        """
                    } catch(error) {
                        echo "docker login failed, retrying after sleep"
                        retry(4) {
                            sleep(30)
                            sh """
                                echo "${DOCKER_CREDS_PSW}" | docker login ${env.DOCKER_REPO} -u ${DOCKER_CREDS_USR} --password-stdin
                            """
                        }
                    }
	            }
                script {
                    try {
                        sh """
                            echo "${OCR_CREDS_PSW}" | docker login -u ${OCR_CREDS_USR} ${OCR_REPO} --password-stdin
                        """
                    } catch(error) {
                        echo "OCR docker login failed, retrying after sleep"
                        retry(4) {
                            sleep(30)
                            sh """
                                echo "${OCR_CREDS_PSW}" | docker login -u ${OCR_CREDS_USR} ${OCR_REPO} --password-stdin
                            """
                        }
                    }
                }
                sh """
                    rm -rf ${GO_REPO_PATH}/verrazzano
                    mkdir -p ${GO_REPO_PATH}/verrazzano
                    tar cf - . | (cd ${GO_REPO_PATH}/verrazzano/ ; tar xf -)
                """
                script {
                    def props = readProperties file: '.verrazzano-development-version'
                    VERRAZZANO_DEV_VERSION = props['verrazzano-development-version']
                    TIMESTAMP = sh(returnStdout: true, script: "date +%Y%m%d%H%M%S").trim()
                    SHORT_COMMIT_HASH = sh(returnStdout: true, script: "git rev-parse --short HEAD").trim()
                    DOCKER_IMAGE_TAG = "${VERRAZZANO_DEV_VERSION}-${TIMESTAMP}-${SHORT_COMMIT_HASH}"
                }
            }
        }

        stage('Acceptance Tests') {
            when {
                allOf {
                    not { buildingTag() }
                    anyOf {
                        branch 'master';
                        expression {SKIP_ACCEPTANCE_TESTS == false};
                    }
                }
            }

            stages {
                stage('Prepare AT environment') {
                    stages {
                        stage('Create Cluster') {
                            steps {
                                script {
                                    sh """
                                        echo "tests will execute" > ${TESTS_EXECUTED_FILE}
                                    """
                                    int clusterCount = params.TOTAL_CLUSTERS.toInteger()
                                    if (env.TEST_ENV == "kind") {
                                        boolean cleanupKindContainers = true
                                        boolean connectJenkinsRunnerToNetwork = true
                                        for(int count=1; count<=clusterCount; count++) {
                                            sh """
                                                echo ${CLUSTER_NAME_PREFIX}-$count
                                                echo ${KUBECONFIG_DIR}/$count/kube_config
                                                mkdir -p ${KUBECONFIG_DIR}/$count
                                                export KUBECONFIG=${KUBECONFIG_DIR}/$count/kube_config
                                                echo "Create Kind cluster"
                                                cd ${TEST_SCRIPTS_DIR}
                                                ./create_kind_cluster.sh "${CLUSTER_NAME_PREFIX}-$count" "${GO_REPO_PATH}/verrazzano/platform-operator" "${KUBECONFIG_DIR}/$count/kube_config" "${KUBERNETES_CLUSTER_VERSION}" "$cleanupKindContainers" "$connectJenkinsRunnerToNetwork"
                                                echo "Install metallb"
                                                cd ${GO_REPO_PATH}/verrazzano
                                                ./tests/e2e/config/scripts/install-metallb.sh
                                            """
                                            cleanupKindContainers = false
                                            connectJenkinsRunnerToNetwork = false
                                        }
                                    } else {
                                        sh """
                                            mkdir -p ${KUBECONFIG_DIR}
                                            echo "Create OKE cluster"
                                            cd ${TEST_SCRIPTS_DIR}
                                            TF_VAR_label_prefix=multicluster-${env.BUILD_NUMBER} TF_VAR_state_name=multicluster-${env.BUILD_NUMBER}-${env.BRANCH_NAME} ./create_oke_multi_cluster.sh "$clusterCount" "${KUBECONFIG_DIR}"
                                        """
                                    }

                                }
                            }
                        }
                    }
                }

                stage("Configure OCI DNS") {
                    when { expression { return params.TEST_ENV == 'ocidns_oke' } }
                    stages {
                        stage('Create dns zone') {
                            steps {
                                script {
                                    dns_zone_ocid = sh(script: "${GO_REPO_PATH}/verrazzano/tests/e2e/config/scripts/oci_dns_ops.sh -o create -c ${TF_VAR_compartment_id} -s z${zoneId}", returnStdout: true)
                                }
                            }
                        }
                        stage('Configure Install profile') {
                              environment {
                                OCI_DNS_COMPARTMENT_OCID = credentials('oci-dns-compartment')
                                OCI_PRIVATE_KEY_FILE = credentials('oci-api-key')
                                OCI_DNS_ZONE_OCID = "${dns_zone_ocid}"
                            }
                            steps {
                                script {
                                    sh """
                                        export PATH=${HOME}/go/bin:${PATH}
                                        cd ${GO_REPO_PATH}/verrazzano
                                        ./tests/e2e/config/scripts/process_oci_dns_install_yaml.sh $INSTALL_CONFIG_FILE_OCIDNS
                                    """
                                    int clusterCount = params.TOTAL_CLUSTERS.toInteger()
                                    for(int count=1; count<=clusterCount; count++) {
                                        sh """
                                            export KUBECONFIG=${KUBECONFIG_DIR}/$count/kube_config
                                            cd ${GO_REPO_PATH}/verrazzano
                                            ./tests/e2e/config/scripts/create-test-oci-config-secret.sh
                                        """
                                    }
                                }
                            }
                        }
                    }
                }
                stage ('Verify Multi-cluster installation') {
                    steps {
                        runGinkgoRandomize('multicluster/verify-install')
                    }
                    post {
                        always {
                            archiveArtifacts artifacts: '**/coverage.html,**/logs/*', allowEmptyArchive: true
                            junit testResults: '**/*test-result.xml', allowEmptyResults: true
                        }
                    }
                }
            }
            post {
                failure {
                    script {
                        if ( fileExists(env.TESTS_EXECUTED_FILE) ) {
                            dumpK8sCluster('multicluster-acceptance-tests-cluster-dump')
                        }
                    }
                }
                success {
                    script {
                        if (params.DUMP_K8S_CLUSTER_ON_SUCCESS == true && fileExists(env.TESTS_EXECUTED_FILE) ) {
                            dumpK8sCluster('multicluster-acceptance-tests-cluster-dump')
                        }
                    }
                }
            }
        }
    }
    post {
        success {
            script {
                if (params.DUMP_K8S_CLUSTER_ON_SUCCESS == true && fileExists(env.TESTS_EXECUTED_FILE) ) {
                    dumpK8sCluster('multicluster-acceptance-tests-cluster-dump')
                }
            }
        }
        failure {
            // sh """
            //    curl -k -u ${JENKINS_READ_USR}:${JENKINS_READ_PSW} -o ${WORKSPACE}/build-console-output.log ${BUILD_URL}consoleText
            // """

            archiveArtifacts artifacts: '**/build-console-output.log', allowEmptyArchive: true
            //mail to: "${env.BUILD_NOTIFICATION_TO_EMAIL}", from: "${env.BUILD_NOTIFICATION_FROM_EMAIL}",
            //subject: "Verrazzano: ${env.JOB_NAME} - Failed",
            //body: "Job Failed - \"${env.JOB_NAME}\" build: ${env.BUILD_NUMBER}\n\nView the log at:\n ${env.BUILD_URL}\n\nBlue Ocean:\n${env.RUN_DISPLAY_URL}"
            //script {
            //    if (env.JOB_NAME == "verrazzano/master") {
            //        pagerduty(resolve: false, serviceKey: "$SERVICE_KEY", incDescription: "Verrazzano: ${env.JOB_NAME} - Failed", incDetails: "Job Failed - \"${env.JOB_NAME}\" build: ${env.BUILD_NUMBER}\n\nView the log at:\n ${env.BUILD_URL}\n\nBlue Ocean:\n${env.RUN_DISPLAY_URL}")
            //        slackSend ( message: "Job Failed - \"${env.JOB_NAME}\" build: ${env.BUILD_NUMBER}\n\nView the log at:\n ${env.BUILD_URL}\n\nBlue Ocean:\n${env.RUN_DISPLAY_URL}" )
            //    }
            //}
        }
        always {
            script {
                if ( fileExists(env.TESTS_EXECUTED_FILE) ) {
                    dumpVerrazzanoSystemPods()
                    dumpCattleSystemPods()
                    dumpNginxIngressControllerLogs()
                    dumpVerrazzanoPlatformOperatorLogs()
                    dumpVerrazzanoApplicationOperatorLogs()
                    dumpOamKubernetesRuntimeLogs()
                    dumpVerrazzanoApiLogs()
                }
            }
            archiveArtifacts artifacts: '**/kube_config,**/coverage.html,**/logs/**,**/verrazzano_images.txt,**/*cluster-dump/**', allowEmptyArchive: true
            junit testResults: '**/*test-result.xml', allowEmptyResults: true
            script {
                int clusterCount = params.TOTAL_CLUSTERS.toInteger()
                if (env.TEST_ENV == "kind") {
                    for(int count=1; count<=clusterCount; count++) {
                        sh """
                            if [ "${env.TEST_ENV}" == "kind" ]
                            then
                                kind delete cluster --name ${CLUSTER_NAME_PREFIX}-$count
                            fi
                        """
                    }
                } else {
                    sh """
                        mkdir -p ${KUBECONFIG_DIR}
                        if [ "${TEST_ENV}" == "ocidns_oke" ]; then
                          cd ${GO_REPO_PATH}/verrazzano
                          ./tests/e2e/config/scripts/oci_dns_ops.sh -o delete -s z${zoneId} || echo "Failed to delete DNS zone z${zoneId}"
                        fi
                        cd ${TEST_SCRIPTS_DIR}
                        TF_VAR_label_prefix=multicluster-${env.BUILD_NUMBER} TF_VAR_state_name=multicluster-${env.BUILD_NUMBER}-${env.BRANCH_NAME} ./delete_oke_cluster.sh "$clusterCount" "${KUBECONFIG_DIR}"
                    """
                }
            }
        }
        cleanup {
            deleteDir()
        }
    }
}

def runGinkgoRandomize(testSuitePath) {
    catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
        script {
            int clusterCount = params.TOTAL_CLUSTERS.toInteger()
            for(int count=1; count<=clusterCount; count++) {
                sh """
                    export KUBECONFIG="${KUBECONFIG_DIR}/${count}/kube_config"
                    cd ${GO_REPO_PATH}/verrazzano/tests/e2e
                    ginkgo -p --randomizeAllSpecs -v -keepGoing --noColor ${testSuitePath}/...
                """
            }
        }
    }
}

def dumpK8sCluster(dumpDirectory) {
    script {
        int clusterCount = params.TOTAL_CLUSTERS.toInteger()
        for(int count=1; count<=clusterCount; count++) {
            sh """
                export KUBECONFIG="${KUBECONFIG_DIR}/${count}/kube_config"
                ${GO_REPO_PATH}/verrazzano/tools/scripts/k8s-dump-cluster.sh -d ${dumpDirectory}-${count}
            """
        }
    }
}

def dumpVerrazzanoSystemPods() {
    script {
        int clusterCount = params.TOTAL_CLUSTERS.toInteger()
        for(int count=1; count<=clusterCount; count++) {
            LOG_DIR="${WORKSPACE}/verrazzano/platform-operator/scripts/install/build/logs/cluster-$count"
            sh """
                export KUBECONFIG=${KUBECONFIG_DIR}/$count/kube_config
                mkdir -p ${LOG_DIR}
                export DIAGNOSTIC_LOG="${LOG_DIR}/verrazzano-system-pods.log"
                ${GO_REPO_PATH}/verrazzano/platform-operator/scripts/install/k8s-dump-objects.sh -o pods -n verrazzano-system -m "verrazzano system pods" || echo "failed" > ${POST_DUMP_FAILED_FILE}
                export DIAGNOSTIC_LOG="${LOG_DIR}/verrazzano-system-certs.log"
                ${GO_REPO_PATH}/verrazzano/platform-operator/scripts/install/k8s-dump-objects.sh -o cert -n verrazzano-system -m "verrazzano system certs" || echo "failed" > ${POST_DUMP_FAILED_FILE}
                export DIAGNOSTIC_LOG="${LOG_DIR}/verrazzano-system-kibana.log"
                ${GO_REPO_PATH}/verrazzano/platform-operator/scripts/install/k8s-dump-objects.sh -o pods -n verrazzano-system -r "vmi-system-kibana-*" -m "verrazzano system kibana log" -l -c kibana || echo "failed" > ${POST_DUMP_FAILED_FILE}
                export DIAGNOSTIC_LOG="${LOG_DIR}/verrazzano-system-es-master.log"
                ${GO_REPO_PATH}/verrazzano/platform-operator/scripts/install/k8s-dump-objects.sh -o pods -n verrazzano-system -r "vmi-system-es-master-*" -m "verrazzano system kibana log" -l -c es-master || echo "failed" > ${POST_DUMP_FAILED_FILE}
            """
        }
    }
}

def dumpCattleSystemPods() {
    script {
        int clusterCount = params.TOTAL_CLUSTERS.toInteger()
        for(int count=1; count<=clusterCount; count++) {
            LOG_DIR="${WORKSPACE}/verrazzano/platform-operator/scripts/install/build/logs/cluster-$count"
            sh """
                export KUBECONFIG=${KUBECONFIG_DIR}/$count/kube_config
                mkdir -p ${LOG_DIR}
                export DIAGNOSTIC_LOG="${LOG_DIR}/cattle-system-pods.log"
                ${GO_REPO_PATH}/verrazzano/platform-operator/scripts/install/k8s-dump-objects.sh -o pods -n cattle-system -m "cattle system pods" || echo "failed" > ${POST_DUMP_FAILED_FILE}
                export DIAGNOSTIC_LOG="${LOG_DIR}/rancher.log"
                ${GO_REPO_PATH}/verrazzano/platform-operator/scripts/install/k8s-dump-objects.sh -o pods -n cattle-system -r "rancher-*" -m "Rancher logs" -l || echo "failed" > ${POST_DUMP_FAILED_FILE}
            """
        }
    }
}

def dumpNginxIngressControllerLogs() {
    script {
        int clusterCount = params.TOTAL_CLUSTERS.toInteger()
        for(int count=1; count<=clusterCount; count++) {
            LOG_DIR="${WORKSPACE}/verrazzano/platform-operator/scripts/install/build/logs/cluster-$count"
            sh """
                export KUBECONFIG=${KUBECONFIG_DIR}/$count/kube_config
                mkdir -p ${LOG_DIR}
                export DIAGNOSTIC_LOG="${LOG_DIR}/nginx-ingress-controller.log"
                ${GO_REPO_PATH}/verrazzano/platform-operator/scripts/install/k8s-dump-objects.sh -o pods -n ingress-nginx -r "nginx-ingress-controller-*" -m "Nginx Ingress Controller" -l || echo "failed" > ${POST_DUMP_FAILED_FILE}
            """
        }
    }
}

def dumpVerrazzanoPlatformOperatorLogs() {
    script {
        int clusterCount = params.TOTAL_CLUSTERS.toInteger()
        for(int count=1; count<=clusterCount; count++) {
            LOG_DIR="${WORKSPACE}/verrazzano-platform-operator/logs/cluster-$count"
            sh """
                ## dump out verrazzano-platform-operator logs
                export KUBECONFIG=${KUBECONFIG_DIR}/$count/kube_config
                mkdir -p ${LOG_DIR}
                kubectl -n verrazzano-install logs --selector=app=verrazzano-platform-operator > ${LOG_DIR}/verrazzano-platform-operator-pod.log --tail -1 || echo "failed" > ${POST_DUMP_FAILED_FILE}
                kubectl -n verrazzano-install describe pod --selector=app=verrazzano-platform-operator > ${LOG_DIR}/verrazzano-platform-operator-pod.out || echo "failed" > ${POST_DUMP_FAILED_FILE}
                echo "verrazzano-platform-operator logs dumped to verrazzano-platform-operator-pod.log"
                echo "verrazzano-platform-operator pod description dumped to verrazzano-platform-operator-pod.out"
                echo "------------------------------------------"
            """
        }
    }
}

def dumpVerrazzanoApplicationOperatorLogs() {
    script {
        int clusterCount = params.TOTAL_CLUSTERS.toInteger()
        for(int count=1; count<=clusterCount; count++) {
            LOG_DIR="${WORKSPACE}/verrazzano-application-operator/logs/cluster-$count"
            sh """
                ## dump out verrazzano-application-operator logs
                export KUBECONFIG=${KUBECONFIG_DIR}/$count/kube_config
                mkdir -p ${LOG_DIR}
                kubectl -n verrazzano-system logs --selector=app=verrazzano-application-operator > ${LOG_DIR}/verrazzano-application-operator-pod.log --tail -1 || echo "failed" > ${POST_DUMP_FAILED_FILE}
                kubectl -n verrazzano-system describe pod --selector=app=verrazzano-application-operator > ${LOG_DIR}/verrazzano-application-operator-pod.out || echo "failed" > ${POST_DUMP_FAILED_FILE}
                echo "verrazzano-application-operator logs dumped to verrazzano-application-operator-pod.log"
                echo "verrazzano-application-operator pod description dumped to verrazzano-application-operator-pod.out"
                echo "------------------------------------------"
            """
        }
    }
}

def dumpOamKubernetesRuntimeLogs() {
    script {
        int clusterCount = params.TOTAL_CLUSTERS.toInteger()
        for(int count=1; count<=clusterCount; count++) {
            LOG_DIR="${WORKSPACE}/oam-kubernetes-runtime/logs/cluster-$count"
            sh """
                ## dump out oam-kubernetes-runtime logs
                export KUBECONFIG=${KUBECONFIG_DIR}/$count/kube_config
                mkdir -p ${LOG_DIR}
                kubectl -n verrazzano-system logs --selector=app.kubernetes.io/instance=oam-kubernetes-runtime > ${LOG_DIR}/oam-kubernetes-runtime-pod.log --tail -1 || echo "failed" > ${POST_DUMP_FAILED_FILE}
                kubectl -n verrazzano-system describe pod --selector=app.kubernetes.io/instance=oam-kubernetes-runtime > ${LOG_DIR}/oam-kubernetes-runtime-pod.out || echo "failed" > ${POST_DUMP_FAILED_FILE}
                echo "verrazzano-application-operator logs dumped to oam-kubernetes-runtime-pod.log"
                echo "verrazzano-application-operator pod description dumped to oam-kubernetes-runtime-pod.out"
                echo "------------------------------------------"
            """
        }
    }
}

def dumpVerrazzanoApiLogs() {
    script {
        int clusterCount = params.TOTAL_CLUSTERS.toInteger()
        for(int count=1; count<=clusterCount; count++) {
            LOG_DIR="${WORKSPACE}/verrazzano/platform-operator/scripts/install/build/logs/cluster-$count"
            sh """
                export KUBECONFIG=${KUBECONFIG_DIR}/$count/kube_config
                mkdir -p ${LOG_DIR}
                export DIAGNOSTIC_LOG="${LOG_DIR}/verrazzano-api.log"
                ${GO_REPO_PATH}/verrazzano/platform-operator/scripts/install/k8s-dump-objects.sh -o pods -n verrazzano-system -r "verrazzano-api-*" -m "verrazzano api" -l || echo "failed" > ${POST_DUMP_FAILED_FILE}
            """
        }
    }
}
