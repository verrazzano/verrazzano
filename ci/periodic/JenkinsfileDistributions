// Copyright (c) 2023, Oracle and/or its affiliates.
// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.

import groovy.transform.Field

@Field def verrazzanoPrefix="verrazzano-"
def agentLabel = env.JOB_NAME.contains('master') ? "2.0-large-phx" : "2.0-large"

pipeline {
    options {
        timeout(time: 4, unit: 'HOURS')
        skipDefaultCheckout true
        timestamps ()
    }

    agent {
       docker {
            image "${RUNNER_DOCKER_IMAGE}"
            args "${RUNNER_DOCKER_ARGS}"
            registryUrl "${RUNNER_DOCKER_REGISTRY_URL}"
            registryCredentialsId 'ocir-pull-and-push-account'
            label "${agentLabel}"
        }
    }

    parameters {
        string (name: 'GIT_COMMIT_TO_USE',
                defaultValue: 'NONE',
                description: 'This is the full git commit hash from the source build to be used for all jobs',
                trim: true)
        string (name: 'TAGGED_TESTS',
                defaultValue: '',
                description: 'A comma separated list of build tags for tests that should be executed (e.g. unstable_test). Default:',
                trim: true)
        string (name: 'INCLUDED_TESTS',
                defaultValue: '.*',
                description: 'A regex matching any fully qualified test file that should be executed (e.g. examples/helidon/). Default: .*',
                trim: true)
        string (name: 'EXCLUDED_TESTS',
                defaultValue: '_excluded_test',
                description: 'A regex matching any fully qualified test file that should not be executed (e.g. multicluster/|_excluded_test). Default: _excluded_test',
                trim: true)
        booleanParam (name: 'BASELINE_IMAGE_SIZES_FILE_UPDATE',
                defaultValue: false,
                description: 'If true, image-sizes.txt file will be updated to reflect latest image sizes. GIT_COMMIT_TO_USE is required when BASELINE_IMAGE_SIZES_FILE_UPDATE is set to true. If true, Use Short Commit ID for GIT_COMMIT_TO_USE.')
        booleanParam (name: 'RUN_TESTS',
                defaultValue: false,
                description: 'If true, the private registry pipeline will run on a development branch. It will automatically run on master and release-* branches.')
    }

    environment {
        IS_PERIODIC_PIPELINE = "true"
        NETRC_FILE = credentials('netrc')
        GOPATH = '/home/opc/go'
        GO_REPO_PATH = "${GOPATH}/src/github.com/verrazzano"

        OCIR_SCAN_COMPARTMENT = credentials('ocir-scan-compartment')
        OCIR_SCAN_TARGET = credentials('ocir-scan-target')
        OCIR_SCAN_REGISTRY = credentials('ocir-scan-registry')
        OCIR_SCAN_REPOSITORY_PATH = credentials('ocir-scan-repository-path')
        DOCKER_SCAN_CREDS = credentials('v8odev-ocir')
        DOCKER_CREDS = credentials('github-packages-credentials-rw')
        DOCKER_EMAIL = credentials('github-packages-email')
        DOCKER_REPO = 'ghcr.io'
        OCR_CREDS = credentials('ocr-pull-and-push-account')
        OCR_REPO = 'container-registry.oracle.com'

        OCI_CLI_AUTH="instance_principal"
        OCI_OS_NAMESPACE = credentials('oci-os-namespace')
        OCI_OS_BUCKET="verrazzano-builds"
        OCI_OS_COMMIT_BUCKET="verrazzano-builds-by-commit"
        CLEAN_BRANCH_NAME = "${env.BRANCH_NAME.replace("/", "%2F")}"
        SERVICE_KEY = credentials('PAGERDUTY_SERVICE_KEY')

        STABLE_COMMIT_OS_LOCATION = "${CLEAN_BRANCH_NAME}/last-stable-commit.txt"
        LAST_PERIODIC_OS_LOCATION = "${CLEAN_BRANCH_NAME}/last-periodic-run-commit.txt"
        CLEAN_PERIODIC_OS_LOCATION = "${CLEAN_BRANCH_NAME}-last-clean-periodic-test/verrazzano_periodic-commit.txt"

        STABLE_COMMIT_LOCATION = "${WORKSPACE}/last-stable-commit.txt"
        LAST_PERIODIC_LOCATION = "${WORKSPACE}/last-periodic-run-commit.txt"
        CLEAN_PERIODIC_LOCATION = "${WORKSPACE}/last-clean-periodic-commit.txt"

        OCI_OS_REGION="us-phoenix-1" // where to download existing artifacts from
        OCI_OS_DIST_REGION="eu-frankfurt-1" // where to upload distributions to

        BASELINE_COMMIT_SHORT_HASH=""
        COMPARISON_URL_ON_FAILURE=""
    }

    stages {
        stage('Clean workspace and checkout') {
            steps {
                cleanWorkspaceAndCheckout()
            }
        }

        stage('Build Release Distributions') {
            when {
                anyOf {
                    expression { params.BASELINE_IMAGE_SIZES_FILE_UPDATE == false };
                }
            }
            steps {
                script {
                    try {
                        sh """
                             echo "${OCR_CREDS_PSW}" | docker login -u ${OCR_CREDS_USR} ${OCR_REPO} --password-stdin
                        """
                    }
                    catch(error) {
                        echo "OCIR docker login at ${OCIR_REPO} failed, retrying after sleep"
                        retry(4) {
                            sleep(30)
                            sh """
                                echo "${OCR_CREDS_PSW}" | docker login -u ${OCR_CREDS_USR} ${OCR_REPO} --password-stdin
                            """
                        }
                    }
                }
                sh """
                    ci/scripts/build_distribution.sh ${env.GIT_COMMIT} ${SHORT_COMMIT_HASH} ${VERRAZZANO_DEV_VERSION}

                    oci --region us-phoenix-1 os object put --force --namespace ${OCI_OS_NAMESPACE} -bn ${OCI_OS_COMMIT_BUCKET} --name ${CLEAN_BRANCH_NAME}/${SHORT_COMMIT_HASH}/image-list --file ${WORKSPACE}/image-sizes.txt
                """
            }
            post {
                always {
                    archiveArtifacts artifacts: '**/image-sizes.txt', allowEmptyArchive: true
                }
            }
        }

        stage('Update Baseline Image-Sizes File') {
            when {
                anyOf {
                    expression { params.BASELINE_IMAGE_SIZES_FILE_UPDATE == true };
                }
            }
            steps {
                script {
                    if (params.GIT_COMMIT_TO_USE == "NONE") {
                        error("Specific GIT commit was not specified. GIT_COMMIT_TO_USE is required when BASELINE_IMAGE_SIZES_FILE_UPDATE is set to true.")
                    }
                   currentBuild.displayName = "${currentBuild.displayName} : Update Baseline image-sizes.txt"
                   sh "oci --region us-phoenix-1 os object get --namespace ${OCI_OS_NAMESPACE} -bn ${OCI_OS_COMMIT_BUCKET} --name ${CLEAN_BRANCH_NAME}/${SHORT_COMMIT_HASH}/image-list --file ${WORKSPACE}/image-sizes.txt"
                   sh "oci --region us-phoenix-1 os object put --force --namespace ${OCI_OS_NAMESPACE} -bn ${OCI_OS_COMMIT_BUCKET} --name ${CLEAN_BRANCH_NAME}/image-list --file ${WORKSPACE}/image-sizes.txt"
                }
            }
        }

        stage('Check Image Sizes') {
            when {
                anyOf {
                    expression { params.BASELINE_IMAGE_SIZES_FILE_UPDATE == false };
                }
            }
            steps {
                script {
                    def commitList = getCommitList()
                    withCredentials([file(credentialsId: 'jenkins-to-slack-users', variable: 'JENKINS_TO_SLACK_JSON')]) {
                        def userMappings = readJSON file: JENKINS_TO_SLACK_JSON
                        SUSPECT_LIST = getSuspectList(commitList, userMappings)
                        echo "Suspect list: ${SUSPECT_LIST}"
                    }
                }
              script {
                    sh """
                        ci/scripts/check_image_sizes.sh
                    """
                    BASELINE_COMMIT_SHORT_HASH = sh(returnStdout: true, script: "cat ${WORKSPACE}/commitID.txt")
                     if ( fileExists("${WORKSPACE}/result.txt") ){
                        COMPARISON_URL_ON_FAILURE = "https://github.com/verrazzano/verrazzano/compare/${BASELINE_COMMIT_SHORT_HASH}...${env.GIT_COMMIT}"
                        slackSend ( channel: "$SLACK_PERF_ALERT_CHANNEL", message: "Image Size Has Increased - \"${env.JOB_NAME}\" build: ${env.BUILD_NUMBER}\n\nView the log at:\n ${env.BUILD_URL}\n\nBlue Ocean:\n${env.RUN_DISPLAY_URL}\n\nSuspects:\n${SUSPECT_LIST}\n\nChange comparison: ${COMPARISON_URL_ON_FAILURE}" )
                     }
               }
            }
            post {
                always {
                    archiveArtifacts artifacts: '**/image-sizes-objectstore.txt', allowEmptyArchive: true
                }
            }
        }

        stage('Private Registry Tests') {
            when {
                allOf {
                    expression { params.BASELINE_IMAGE_SIZES_FILE_UPDATE == false };
                    anyOf {
                        branch 'master';
                        branch 'release-*';
                        expression { params.RUN_TESTS == true };
                    }
                }
            }
            parallel {
                stage('Private Registry - Lite Distribution') {
                    steps {
                        retry(count: JOB_PROMOTION_RETRIES) {
                            script {
                                build job: "verrazzano-private-registry/${CLEAN_BRANCH_NAME}",
                                    parameters: [
                                        string(name: 'GIT_COMMIT_TO_USE', value: env.GIT_COMMIT),
                                        string(name: 'DISTRIBUTION_VARIANT', value: 'Lite'),
                                        string(name: 'ZIPFILE_LOCATION', value: liteBundle)
                                    ], wait: true
                            }
                        }
                    }
                }

                stage('Private Registry - Full Distribution') {
                    steps {
                        retry(count: JOB_PROMOTION_RETRIES) {
                            script {
                                build job: "verrazzano-private-registry/${CLEAN_BRANCH_NAME}",
                                    parameters: [
                                        string(name: 'GIT_COMMIT_TO_USE', value: env.GIT_COMMIT),
                                        string(name: 'DISTRIBUTION_VARIANT', value: 'Full'),
                                        string(name: 'ZIPFILE_LOCATION', value: fullBundle)
                                    ], wait: true
                            }
                        }
                    }
                }

                stage('Start Asynchronous Scan Distributions') {
                    // Only release-* branches scan by default, all other branches including master must enable RUN_TESTS explicitly to get scanning to be done.
                    when {
                        anyOf {
                            branch 'release-*';
                            expression { params.RUN_TESTS == true };
                        }
                    }
                    steps {
                        script {
                            build job: "verrazzano-scan-distribution/${CLEAN_BRANCH_NAME}",
                                parameters: [
                                    string(name: 'GIT_COMMIT_TO_USE', value: env.GIT_COMMIT),
                                    string(name: 'VERRAZZANO_DEV_VERSION', value: "${VERRAZZANO_DEV_VERSION}" ),
                                    booleanParam(name: 'TEST_RUN', value: false)
                                ], wait: false
                        }
                    }
                }

                stage('Push to OCIR for scanning') {
                    environment {
                        OCI_CLI_AUTH="api_key"
                        OCI_CLI_TENANCY = credentials('oci-dev-tenancy')
                        OCI_CLI_USER = credentials('oci-dev-user-ocid')
                        OCI_CLI_FINGERPRINT = credentials('oci-dev-api-key-fingerprint')
                        OCI_CLI_KEY_FILE = credentials('oci-dev-api-key-file')
                        OCI_CLI_REGION = "us-ashburn-1"
                        OCI_REGION = "${env.OCI_CLI_REGION}"
                        // Directory containing the Verrazzano image tar files
                        VERRAZZANO_IMAGES_DIRECTORY = "${WORKSPACE}/vz-full/verrazzano-${VERRAZZANO_DEV_VERSION}/images"
                    }
                    steps {
                        script {
                            sh """
                                echo "Pushing images to OCIR, these are treated as the latest scan results for ${CLEAN_BRANCH_NAME}"
                                ci/scripts/push_to_ocir.sh
                            """
                        }
                    }
                }
            }
        }
    }
  }

// Called in Stage Clean workspace and checkout steps
@NonCPS
def getCommitList() {
    echo "Checking for change sets"
    def commitList = []
    def changeSets = currentBuild.changeSets
    for (int i = 0; i < changeSets.size(); i++) {
        echo "get commits from change set"
        def commits = changeSets[i].items
        for (int j = 0; j < commits.length; j++) {
            def commit = commits[j]
            def id = commit.commitId
            echo "Add commit id: ${id}"
            commitList.add(id)
        }
    }
    return commitList
}

def trimIfGithubNoreplyUser(userIn) {
    if (userIn == null) {
        echo "Not a github noreply user, not trimming: ${userIn}"
        return userIn
    }
    if (userIn.matches(".*\\+.*@users.noreply.github.com.*")) {
        def userOut = userIn.substring(userIn.indexOf("+") + 1, userIn.indexOf("@"))
        return userOut;
    }
    if (userIn.matches(".*<.*@users.noreply.github.com.*")) {
        def userOut = userIn.substring(userIn.indexOf("<") + 1, userIn.indexOf("@"))
        return userOut;
    }
    if (userIn.matches(".*@users.noreply.github.com")) {
        def userOut = userIn.substring(0, userIn.indexOf("@"))
        return userOut;
    }
    echo "Not a github noreply user, not trimming: ${userIn}"
    return userIn
}

def getSuspectList(commitList, userMappings) {
    def retValue = ""
    def suspectList = []
    if (commitList == null || commitList.size() == 0) {
        echo "No commits to form suspect list"
    } else {
        for (int i = 0; i < commitList.size(); i++) {
            def id = commitList[i]
            try {
                def gitAuthor = sh(
                    script: "git log --format='%ae' '$id^!'",
                    returnStdout: true
                ).trim()
                if (gitAuthor != null) {
                    def author = trimIfGithubNoreplyUser(gitAuthor)
                    echo "DEBUG: author: ${gitAuthor}, ${author}, id: ${id}"
                    if (userMappings.containsKey(author)) {
                        def slackUser = userMappings.get(author)
                        if (!suspectList.contains(slackUser)) {
                            echo "Added ${slackUser} as suspect"
                            retValue += " ${slackUser}"
                            suspectList.add(slackUser)
                        }
                    } else {
                        // If we don't have a name mapping use the commit.author, at least we can easily tell if the mapping gets dated
                        if (!suspectList.contains(author)) {
                            echo "Added ${author} as suspect"
                            retValue += " ${author}"
                            suspectList.add(author)
                        }
                    }
                } else {
                    echo "No author returned from git"
                }
            } catch (Exception e) {
                echo "INFO: Problem processing commit ${id}, skipping commit: " + e.toString()
            }
        }
    }
    def startedByUser = "";
    def causes = currentBuild.getBuildCauses()
    echo "causes: " + causes.toString()
    for (cause in causes) {
        def causeString = cause.toString()
        echo "current cause: " + causeString
        def causeInfo = readJSON text: causeString
        if (causeInfo.userId != null) {
            startedByUser = causeInfo.userId
        }
    }

    if (startedByUser.length() > 0) {
        echo "Build was started by a user, adding them to the suspect notification list: ${startedByUser}"
        def author = trimIfGithubNoreplyUser(startedByUser)
        echo "DEBUG: author: ${startedByUser}, ${author}"
        if (userMappings.containsKey(author)) {
            def slackUser = userMappings.get(author)
            if (!suspectList.contains(slackUser)) {
                echo "Added ${slackUser} as suspect"
                retValue += " ${slackUser}"
                suspectList.add(slackUser)
            }
        } else {
            // If we don't have a name mapping use the commit.author, at least we can easily tell if the mapping gets dated
            if (!suspectList.contains(author)) {
               echo "Added ${author} as suspect"
               retValue += " ${author}"
               suspectList.add(author)
            }
        }
    } else {
        echo "Build not started by a user, not adding to notification list"
    }
    echo "returning suspect list: ${retValue}"
    return retValue
}

def setDisplayName() {
    echo "Start setDisplayName"
    def causes = currentBuild.getBuildCauses()
    echo "causes: " + causes.toString()
    for (cause in causes) {
        def causeString = cause.toString()
        echo "current cause: " + causeString
        if (causeString.contains("UpstreamCause") && causeString.contains("Started by upstream project")) {
             echo "This job was caused by " + causeString
             if (causeString.contains("verrazzano-periodic-triggered-tests")) {
                 currentBuild.displayName = env.BUILD_NUMBER + " : PERIODIC"
             } else if (causeString.contains("verrazzano-flaky-tests")) {
                 currentBuild.displayName = env.BUILD_NUMBER + " : FLAKY"
             }
         }
    }
    echo "End setDisplayName"
}

def dockerLogins() {
    try {
        sh """
            echo "${DOCKER_SCAN_CREDS_PSW}" | docker login ${env.OCIR_SCAN_REGISTRY} -u ${DOCKER_SCAN_CREDS_USR} --password-stdin
        """
    } catch(error) {
        echo "docker login failed, retrying after sleep"
        retry(4) {
            sleep(30)
            sh """
            echo "${DOCKER_SCAN_CREDS_PSW}" | docker login ${env.OCIR_SCAN_REGISTRY} -u ${DOCKER_SCAN_CREDS_USR} --password-stdin
            """
        }
    }
    if (!(env.BRANCH_NAME.equals("master") || env.BRANCH_NAME.startsWith("release-1."))) {
        try {
            sh """
                echo "${DOCKER_CREDS_PSW}" | docker login ${env.DOCKER_REPO} -u ${DOCKER_CREDS_USR} --password-stdin
            """
        } catch(error) {
            echo "docker login failed, retrying after sleep"
            retry(4) {
                sleep(30)
                sh """
                    echo "${DOCKER_CREDS_PSW}" | docker login ${env.DOCKER_REPO} -u ${DOCKER_CREDS_USR} --password-stdin
                """
            }
        }
    }
}

def scmCheckout() {
    if (params.GIT_COMMIT_TO_USE == "NONE") {
        echo "Specific GIT commit was not specified, use current head"
        def scmInfo = checkout scm
        env.GIT_COMMIT = scmInfo.GIT_COMMIT
        env.GIT_BRANCH = scmInfo.GIT_BRANCH
    } else {
        echo "SCM checkout of ${params.GIT_COMMIT_TO_USE}"
        def scmInfo = checkout([
        $class: 'GitSCM',
        branches: [[name: params.GIT_COMMIT_TO_USE]],
        doGenerateSubmoduleConfigurations: false,
        extensions: [],
        submoduleCfg: [],
        userRemoteConfigs: [[url: env.SCM_VERRAZZANO_GIT_URL]]])
        env.GIT_COMMIT = scmInfo.GIT_COMMIT
        env.GIT_BRANCH = scmInfo.GIT_BRANCH
        // If the commit we were handed is not what the SCM says we are using, fail
        if (!env.GIT_COMMIT.equals(params.GIT_COMMIT_TO_USE)) {
            echo "SCM didn't checkout the commit we expected. Expected: ${params.GIT_COMMIT_TO_USE}, Found: ${scmInfo.GIT_COMMIT}"
            exit 1
        }
    }
    echo "SCM checkout of ${env.GIT_BRANCH} at ${env.GIT_COMMIT}"
}

def cleanWorkspaceAndCheckout() {
    scmCheckout()

    sh """
        cp -f "${NETRC_FILE}" $HOME/.netrc
        chmod 600 $HOME/.netrc
    """

    dockerLogins()

    sh """
        rm -rf ${GO_REPO_PATH}/verrazzano
        mkdir -p ${GO_REPO_PATH}/verrazzano
        tar cf - . | (cd ${GO_REPO_PATH}/verrazzano/ ; tar xf -)
        cd ${GO_REPO_PATH}/verrazzano
        git config --global credential.helper "!f() { echo username=\\$DOCKER_CREDS_USR; echo password=\\$DOCKER_CREDS_PSW; }; f"
        git config --global user.name $DOCKER_CREDS_USR
        git config --global user.email "${DOCKER_EMAIL}"
        git checkout -b ${env.BRANCH_NAME}
    """

    def props = readProperties file: '.verrazzano-development-version'
    VERRAZZANO_DEV_VERSION = props['verrazzano-development-version']

    TIMESTAMP = sh(returnStdout: true, script: "date +%Y%m%d%H%M%S").trim()
    SHORT_COMMIT_HASH = sh(returnStdout: true, script: "git rev-parse --short=8 HEAD").trim()
    DOCKER_IMAGE_TAG = "${VERRAZZANO_DEV_VERSION}-${TIMESTAMP}-${SHORT_COMMIT_HASH}"

    // update the description with some meaningful info
    setDisplayName()
    currentBuild.description = SHORT_COMMIT_HASH + " : " + env.GIT_COMMIT + " : " + params.GIT_COMMIT_TO_USE

    SHORT_COMMIT_HASH = sh(returnStdout: true, script: "git rev-parse --short=8 HEAD").trim()
    storeLocation="ephemeral/${env.BRANCH_NAME}/${SHORT_COMMIT_HASH}"
    fullBundle="${storeLocation}/${verrazzanoPrefix}${VERRAZZANO_DEV_VERSION}.zip"
    liteBundle="${storeLocation}/${verrazzanoPrefix}${VERRAZZANO_DEV_VERSION}-lite.zip"
}
