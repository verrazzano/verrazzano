// Copyright (c) 2021, Oracle and/or its affiliates.
// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.

def GIT_COMMIT_TO_USE
def VERRAZZANO_DEV_VERSION
def agentLabel = env.JOB_NAME.contains('master') ? "phxlarge" : "VM.Standard2.8"
def TESTS_FAILED = false
def tarfilePrefix="verrazzano_periodic"
def storeLocation=""
def branchSpecificSchedule = getCronSchedule()

pipeline {
    options {
        skipDefaultCheckout true
    }

    agent {
       docker {
            image "${RUNNER_DOCKER_IMAGE}"
            args "${RUNNER_DOCKER_ARGS}"
            registryUrl "${RUNNER_DOCKER_REGISTRY_URL}"
            registryCredentialsId 'ocir-pull-and-push-account'
            label "${agentLabel}"
        }
    }

    triggers {
        cron(branchSpecificSchedule)
    }

    parameters {
        booleanParam (description: 'Skip tests to private registry stage, useful for testing out private registry testing, support and push to OCIR', name: 'SKIP_TO_PRIVATE_REGISTRY', defaultValue: false)
        string (name: 'TAGGED_TESTS',
                defaultValue: '',
                description: 'A comma separated list of build tags for tests that should be executed (e.g. unstable_test). Default:',
                trim: true)
        string (name: 'INCLUDED_TESTS',
                defaultValue: '.*',
                description: 'A regex matching any fully qualified test file that should be executed (e.g. examples/helidon/). Default: .*',
                trim: true)
        string (name: 'EXCLUDED_TESTS',
                defaultValue: '_excluded_test',
                description: 'A regex matching any fully qualified test file that should not be executed (e.g. multicluster/|_excluded_test). Default: _excluded_test',
                trim: true)
    }

    environment {
        IS_PERIODIC_PIPELINE = "true"
        OCIR_SCAN_COMPARTMENT = credentials('ocir-scan-compartment')
        OCIR_SCAN_TARGET = credentials('ocir-scan-target')
        OCIR_SCAN_REGISTRY = credentials('ocir-scan-registry')
        OCIR_SCAN_REPOSITORY_PATH = credentials('ocir-scan-repository-path')
        DOCKER_SCAN_CREDS = credentials('v8odev-ocir')
        OCI_CLI_AUTH="instance_principal"
        OCI_OS_NAMESPACE = credentials('oci-os-namespace')
        OCI_OS_BUCKET="verrazzano-builds"
        CLEAN_BRANCH_NAME = "${env.BRANCH_NAME.replace("/", "%2F")}"
        SERVICE_KEY = credentials('PAGERDUTY_SERVICE_KEY')
    }

    // This job runs against the latest stable master commit. That is defined as the last clean master build and test run whose
    // commit has been stored in object storage. This job will fetch that commit from master and run extended tests using that.
    // This job is NOT currently setup to run extended tests from other branches, if you need to run those extended jobs you will
    // need to run those against your branch individually.

    stages {
        stage('Clean workspace and checkout') {
            steps {
                sh """
                    echo "${NODE_LABELS}"
                    oci --region us-phoenix-1 os object get --namespace ${OCI_OS_NAMESPACE} -bn ${OCI_OS_BUCKET} --name ${CLEAN_BRANCH_NAME}/last-stable-commit.txt --file ${WORKSPACE}/last-stable-commit.txt
                """

                script {
                    def props = readProperties file: "${WORKSPACE}/last-stable-commit.txt"
                    GIT_COMMIT_TO_USE = props['git-commit']
                    echo "SCM checkout of ${GIT_COMMIT_TO_USE}"
                    def scmInfo = checkout([
                        $class: 'GitSCM',
                        branches: [[name: GIT_COMMIT_TO_USE]],
                        doGenerateSubmoduleConfigurations: false,
                        extensions: [],
                        submoduleCfg: [],
                        userRemoteConfigs: [[url: env.SCM_VERRAZZANO_GIT_URL]]])
                    env.GIT_COMMIT = scmInfo.GIT_COMMIT
                    env.GIT_BRANCH = scmInfo.GIT_BRANCH
                    echo "SCM checkout of ${env.GIT_BRANCH} at ${env.GIT_COMMIT}"
                    // If the commit we were handed is not what the SCM says we are using, fail
                    if (!env.GIT_COMMIT.equals(GIT_COMMIT_TO_USE)) {
                        error( "SCM didn't checkout the commit we expected. Expected: ${GIT_COMMIT_TO_USE}, Found: ${scmInfo.GIT_COMMIT}")
                    }
                }

                script {
                    try {
                        sh """
                            echo "${DOCKER_SCAN_CREDS_PSW}" | docker login ${env.OCIR_SCAN_REGISTRY} -u ${DOCKER_SCAN_CREDS_USR} --password-stdin
                        """
                    } catch(error) {
                        echo "docker login failed, retrying after sleep"
                        retry(4) {
                            sleep(30)
                            sh """
                            echo "${DOCKER_SCAN_CREDS_PSW}" | docker login ${env.OCIR_SCAN_REGISTRY} -u ${DOCKER_SCAN_CREDS_USR} --password-stdin
                            """
                        }
                    }
                }

                script {
                    def props = readProperties file: '.verrazzano-development-version'
                    VERRAZZANO_DEV_VERSION = props['verrazzano-development-version']
                    TIMESTAMP = sh(returnStdout: true, script: "date +%Y%m%d%H%M%S").trim()
                    SHORT_COMMIT_HASH = sh(returnStdout: true, script: "git rev-parse --short=8 HEAD").trim()
                    // update the description with some meaningful info
                    currentBuild.description = SHORT_COMMIT_HASH + " : " + env.GIT_COMMIT + " : " + GIT_COMMIT_TO_USE
                    storeLocation="${CLEAN_BRANCH_NAME}-last-clean-periodic-test/${tarfilePrefix}.zip"
                }
            }
        }

        stage ('Periodic Test Suites') {
            when {
                allOf {
                    expression {params.SKIP_TO_PRIVATE_REGISTRY == false}
                }
            }
            parallel {
                stage('Kind Acceptance Tests on 1.19 Non-Calico') {
                    steps {
                        script {
                            // Do not use Calico
                            build job: "verrazzano-new-kind-acceptance-tests/${CLEAN_BRANCH_NAME}",
                                parameters: [
                                    string(name: 'KUBERNETES_CLUSTER_VERSION', value: '1.19'),
                                    string(name: 'GIT_COMMIT_TO_USE', value: env.GIT_COMMIT),
                                    booleanParam(name: 'CREATE_CLUSTER_USE_CALICO', value: false)
                                ], wait: true
                        }
                    }
                    post {
                        failure {
                            script {
                                TESTS_FAILED = true
                            }
                        }
                    }
                }
                stage('Kind Acceptance Tests on 1.19 sslip.io') {
                    steps {
                        script {
                            // test with sslip.io
                            build job: "verrazzano-new-kind-acceptance-tests/${CLEAN_BRANCH_NAME}",
                                parameters: [
                                    string(name: 'KUBERNETES_CLUSTER_VERSION', value: '1.19'),
                                    string(name: 'GIT_COMMIT_TO_USE', value: env.GIT_COMMIT),
                                    string(name: 'WILDCARD_DNS_DOMAIN', value: 'sslip.io')
                                ], wait: true
                        }
                    }
                    post {
                        failure {
                            script {
                                TESTS_FAILED = true
                            }
                        }
                    }
                }
                stage('OCI DNS/ACME-Staging Tests') {
                    steps {
                        script {
                            build job: "verrazzano-new-oci-dns-acceptance-tests/${CLEAN_BRANCH_NAME}",
                                parameters: [
                                    string(name: 'GIT_COMMIT_TO_USE', value: env.GIT_COMMIT),
                                    string(name: 'CERT_ISSUER', value: "acme"),
                                    string(name: 'ACME_ENVIRONMENT', value: "staging"),
                                    booleanParam(name: 'CREATE_CLUSTER_USE_CALICO', value: false)
                                ], wait: true
                        }
                    }
                    post {
                        failure {
                            script {
                                TESTS_FAILED = true
                            }
                        }
                    }
                }
                /*stage('Multi Cluster with OCI DNS/ACME-Staging Tests') {
                    steps {
                        script {
                            build job: "verrazzano-multi-cluster-acceptance-tests/${CLEAN_BRANCH_NAME}",
                                parameters: [
                                    string(name: 'GIT_COMMIT_TO_USE', value: env.GIT_COMMIT),
                                    string(name: 'TEST_ENV', value: 'ocidns_oke'),
                                    string(name: 'ACME_ENVIRONMENT', value: "staging"),
                                    // Disable Calico with these runs temporarily
                                    string(name: 'CREATE_CLUSTER_USE_CALICO', value: false)
                                ], wait: true
                        }
                    }
                    post {
                        failure {
                            script {
                                TESTS_FAILED = true
                            }
                        }
                    }
                }*/
            }
        }
        stage("Private Registry") {
            when {
                allOf {
                    expression {TESTS_FAILED == false}
                }
            }
            stages {
                stage("Upload Periodic Run Artifacts") {
                    steps {
                        sh """
                            ci/scripts/update_periodic_on_success.sh ${env.GIT_COMMIT} ${SHORT_COMMIT_HASH} ${tarfilePrefix}
                        """
                    }
                }
                stage('Private Registry Tests') {
                    when {
                        allOf {
                            not { buildingTag() }
                            anyOf {
                                branch 'master';
                                branch 'release-*';
                            }
                        }
                    }
                    steps {
                        script {
                            build job: "verrazzano-private-registry/${CLEAN_BRANCH_NAME}",
                                parameters: [
                                    string(name: 'GIT_COMMIT_TO_USE', value: env.GIT_COMMIT),
                                    string(name: 'ZIPFILE_LOCATION', value: storeLocation)
                                ], wait: true
                        }
                    }
                }
                stage('Push to OCIR') {
                    environment {
                        OCI_CLI_AUTH="api_key"
                        OCI_CLI_TENANCY = credentials('oci-dev-tenancy')
                        OCI_CLI_USER = credentials('oci-dev-user-ocid')
                        OCI_CLI_FINGERPRINT = credentials('oci-dev-api-key-fingerprint')
                        OCI_CLI_KEY_FILE = credentials('oci-dev-api-key-file')
                        OCI_CLI_REGION = "us-ashburn-1"
                        OCI_REGION = "${env.OCI_CLI_REGION}"
                    }
                    steps {
                        script {
                            sh """
                                echo "Pushing images to OCIR, these are treated as the latest scan results for ${CLEAN_BRANCH_NAME}"
                                ci/scripts/push_to_ocir.sh
                            """
                        }
                    }
                }
                stage('Release Candidate Validation Checks') {
                    environment {
                        JIRA_USERNAME = credentials('jira-username')
                        JIRA_PASSWORD = credentials('jira-password')
                    }
                    steps {
                        script {
                            sh """
                                set +e
                                cd ${WORKSPACE}
                                echo "Performing pre-release validation checks for target version ${VERRAZZANO_DEV_VERSION}"
                                ./release/scripts/prerelease_validation.sh $VERRAZZANO_DEV_VERSION > $WORKSPACE/prerelease_validation.out
                                if [ \$? -eq 0 ]; then
                                    echo "Passed pre-release checks for ${VERRAZZANO_DEV_VERSION}, promoting this to the latest releasable candidate"
                                    echo "git-commit=${env.GIT_COMMIT}" > $WORKSPACE/last-${VERRAZZANO_DEV_VERSION}-releasable-candidate-commit.txt
                                    oci --region us-phoenix-1 os object put --force --namespace ${OCI_OS_NAMESPACE} -bn ${OCI_OS_BUCKET} --name ${CLEAN_BRANCH_NAME}/last-$VERRAZZANO_DEV_VERSION-releasable-candidate-commit.txt --file $WORKSPACE/last-${VERRAZZANO_DEV_VERSION}-releasable-candidate-commit.txt
                                    echo "${env.BUILD_NUMBER} : RELEASE CANDIDATE" > release_status.out
                                else
                                    echo "Failed pre-release checks for ${VERRAZZANO_DEV_VERSION}"
                                    echo "${env.BUILD_NUMBER} : NOT RELEASABLE" > release_status.out
                                fi
                                set -e
                            """
                            currentBuild.displayName = readFile file: "release_status.out"
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            archiveArtifacts artifacts: '**/prerelease_validation.out', allowEmptyArchive: true
        }
        failure {
            script {
                if (isAlertingEnabled()) {
                    if (isPagerDutyEnabled()) {
                        pagerduty(resolve: false, serviceKey: "$SERVICE_KEY",
                        incDescription: "Verrazzano Periodic Tests: ${env.JOB_NAME} - Failed",
                        incDetails: "Job Failed - \"${env.JOB_NAME}\" build: ${env.BUILD_NUMBER}\n\nView the log at:\n ${env.BUILD_URL}\n\nBlue Ocean:\n${env.RUN_DISPLAY_URL}")
                    }
                    slackSend ( channel: "$SLACK_ALERT_CHANNEL", message: "Job Failed - \"${env.JOB_NAME}\" build: ${env.BUILD_NUMBER}\n\nView the log at:\n ${env.BUILD_URL}\n\nBlue Ocean:\n${env.RUN_DISPLAY_URL}\n" )
                    echo "done alerts"
                }
            }
        }
        cleanup {
            deleteDir()
        }
    }
}

def isAlertingEnabled() {
    // this controls whether any alerting happens for these tests
    if (NOTIFY_PERIODIC_FAILURES.equals("true") && (env.BRANCH_NAME.equals("master") || env.BRANCH_NAME.equals("release-1.*"))) {
        echo "Alert notifications enabled for master"
        return true
    }
    return false
}

def isPagerDutyEnabled() {
    // this additionally controls whether PD alerts are enabled (note that you must also enable alerting in general as well if you want these)
    if (NOTIFY_PAGERDUTY_PERIODIC_FAILURES.equals("true")) {
        echo "Pager-Duty notifications enabled via global override setting"
        return true
    }
    return false
}

def getCronSchedule() {
    if (env.BRANCH_NAME.equals("master")) {
        return "H */2 * * *"
    } else if (env.BRANCH_NAME.startsWith("release-1")) {
        return "@daily"
    }
    return ""
}
