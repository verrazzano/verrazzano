// Copyright (c) 2021, Oracle and/or its affiliates.
// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.

def GIT_COMMIT_TO_USE
def agentLabel = env.JOB_NAME.contains('master') ? "phxlarge" : "VM.Standard2.8"
def TESTS_FAILED = false
def tarfilePrefix="verrazzano_periodic"
def storeLocation=""

pipeline {
    options {
        skipDefaultCheckout true
        timestamps ()
    }

    agent {
       docker {
            image "${RUNNER_DOCKER_IMAGE}"
            args "${RUNNER_DOCKER_ARGS}"
            registryUrl "${RUNNER_DOCKER_REGISTRY_URL}"
            registryCredentialsId 'ocir-pull-and-push-account'
            label "${agentLabel}"
        }
    }

    environment {
        OCI_CLI_AUTH="instance_principal"
        OCI_OS_NAMESPACE = credentials('oci-os-namespace')
        OCI_OS_BUCKET="verrazzano-builds"
        BRANCH_NAME="master"
    }

    // This job runs against the latest stable master commit. That is defined as the last clean master build and test run whose
    // commit has been stored in object storage. This job will fetch that commit from master and run extended tests using that.
    // This job is NOT currently setup to run extended tests from other branches, if you need to run those extended jobs you will
    // need to run those against your branch individually.

    stages {
        stage('Clean workspace and checkout') {
            steps {
                sh """
                    echo "${NODE_LABELS}"
                    oci --region us-phoenix-1 os object get --namespace ${OCI_OS_NAMESPACE} -bn ${OCI_OS_BUCKET} --name master/last-stable-commit.txt --file ${WORKSPACE}/last-stable-commit.txt
                """

                script {
                    def props = readProperties file: "${WORKSPACE}/last-stable-commit.txt"
                    GIT_COMMIT_TO_USE = props['git-commit']
                    echo "SCM checkout of ${GIT_COMMIT_TO_USE}"
                    def scmInfo = checkout([
                        $class: 'GitSCM',
                        branches: [[name: GIT_COMMIT_TO_USE]],
                        doGenerateSubmoduleConfigurations: false,
                        extensions: [],
                        submoduleCfg: [],
                        userRemoteConfigs: [[url: env.SCM_VERRAZZANO_GIT_URL]]])
                    env.GIT_COMMIT = scmInfo.GIT_COMMIT
                    env.GIT_BRANCH = scmInfo.GIT_BRANCH
                    echo "SCM checkout of ${env.GIT_BRANCH} at ${env.GIT_COMMIT}"
                    // If the commit we were handed is not what the SCM says we are using, fail
                    if (!env.GIT_COMMIT.equals(GIT_COMMIT_TO_USE)) {
                        error( "SCM didn't checkout the commit we expected. Expected: ${GIT_COMMIT_TO_USE}, Found: ${scmInfo.GIT_COMMIT}")
                    }
                }

                script {
                    def props = readProperties file: '.verrazzano-development-version'
                    VERRAZZANO_DEV_VERSION = props['verrazzano-development-version']
                    TIMESTAMP = sh(returnStdout: true, script: "date +%Y%m%d%H%M%S").trim()
                    SHORT_COMMIT_HASH = sh(returnStdout: true, script: "git rev-parse --short=8 HEAD").trim()
                    // update the description with some meaningful info
                    currentBuild.description = SHORT_COMMIT_HASH + " : " + env.GIT_COMMIT + " : " + GIT_COMMIT_TO_USE
                    storeLocation="${env.BRANCH_NAME}-last-clean-periodic-test/${tarfilePrefix}.zip"
                }
            }
        }

        stage ('Periodic Test Suites') {
            parallel {
                stage('Multi Cluster Tests') {
                    steps {
                        script {
                            build job: "/verrazzano-multi-cluster-acceptance-tests/${BRANCH_NAME.replace("/", "%2F")}",
                                parameters: [
                                    string(name: 'GIT_COMMIT_TO_USE', value: env.GIT_COMMIT),
                                    string(name: 'VERRAZZANO_OPERATOR_IMAGE', value: params.VERRAZZANO_OPERATOR_IMAGE),
                                    string(name: 'WILDCARD_DNS_DOMAIN', value: params.WILDCARD_DNS_DOMAIN),
                                    booleanParam(name: 'EMIT_METRICS', value: params.EMIT_METRICS)
                                ], wait: true
                        }
                    }
                }
                stage('Uninstall Tests') {
                    steps {
                        script {
                            build job: "/verrazzano-uninstall-test/${BRANCH_NAME.replace("/", "%2F")}",
                                parameters: [
                                    string(name: 'GIT_COMMIT_TO_USE', value: env.GIT_COMMIT),
                                    string(name: 'VERRAZZANO_OPERATOR_IMAGE', value: params.VERRAZZANO_OPERATOR_IMAGE),
                                    string(name: 'WILDCARD_DNS_DOMAIN', value: params.WILDCARD_DNS_DOMAIN),
                                    booleanParam(name: 'EMIT_METRICS', value: params.EMIT_METRICS)
                                ], wait: true
                        }
                    }
                }
                stage('OCI DNS tests') {
                    steps {
                        script {
                            build job: "/verrazzano-new-oci-dns-acceptance-tests/${BRANCH_NAME.replace("/", "%2F")}",
                                parameters: [
                                    string(name: 'GIT_COMMIT_TO_USE', value: env.GIT_COMMIT),
                                    string(name: 'VERRAZZANO_OPERATOR_IMAGE', value: params.VERRAZZANO_OPERATOR_IMAGE),
                                    booleanParam(name: 'CREATE_CLUSTER_USE_CALICO', value: true),
                                    booleanParam(name: 'EMIT_METRICS', value: params.EMIT_METRICS)
                                ], wait: true
                        }
                    }
                }
                stage('Kind Acceptance Tests on 1.17') {
                    steps {
                        script {
                            build job: "verrazzano-new-kind-acceptance-tests/${BRANCH_NAME.replace("/", "%2F")}",
                                parameters: [
                                    string(name: 'KUBERNETES_CLUSTER_VERSION', value: '1.17'),
                                    string(name: 'GIT_COMMIT_TO_USE', value: env.GIT_COMMIT),
                                    string(name: 'VERRAZZANO_OPERATOR_IMAGE', value: params.VERRAZZANO_OPERATOR_IMAGE),
                                    string(name: 'WILDCARD_DNS_DOMAIN', value: params.WILDCARD_DNS_DOMAIN),
                                    booleanParam(name: 'EMIT_METRICS', value: params.EMIT_METRICS)
                                ], wait: true
                        }
                    }
                }
                stage('Kind Acceptance Tests on 1.18') {
                    steps {
                        script {
                            build job: "/verrazzano-new-kind-acceptance-tests/${BRANCH_NAME.replace("/", "%2F")}",
                                parameters: [
                                    string(name: 'KUBERNETES_CLUSTER_VERSION', value: '1.18'),
                                    string(name: 'GIT_COMMIT_TO_USE', value: env.GIT_COMMIT),
                                    string(name: 'VERRAZZANO_OPERATOR_IMAGE', value: params.VERRAZZANO_OPERATOR_IMAGE),
                                    string(name: 'WILDCARD_DNS_DOMAIN', value: params.WILDCARD_DNS_DOMAIN),
                                    booleanParam(name: 'EMIT_METRICS', value: params.EMIT_METRICS)
                                ], wait: true
                        }
                    }
                }
                stage('Kind Acceptance Tests on 1.19') {
                    steps {
                        script {
                            build job: "/verrazzano-new-kind-acceptance-tests/${BRANCH_NAME.replace("/", "%2F")}",
                                parameters: [
                                    string(name: 'KUBERNETES_CLUSTER_VERSION', value: '1.19'),
                                    string(name: 'GIT_COMMIT_TO_USE', value: env.GIT_COMMIT),
                                    string(name: 'VERRAZZANO_OPERATOR_IMAGE', value: params.VERRAZZANO_OPERATOR_IMAGE),
                                    string(name: 'WILDCARD_DNS_DOMAIN', value: params.WILDCARD_DNS_DOMAIN),
                                    booleanParam(name: 'EMIT_METRICS', value: params.EMIT_METRICS)
                                ], wait: true
                        }
                    }
                }
                stage('Kind Acceptance Tests on 1.20') {
                    steps {
                        script {
                            build job: "/verrazzano-new-kind-acceptance-tests/${BRANCH_NAME.replace("/", "%2F")}",
                                parameters: [
                                    string(name: 'KUBERNETES_CLUSTER_VERSION', value: '1.20'),
                                    string(name: 'GIT_COMMIT_TO_USE', value: env.GIT_COMMIT),
                                    string(name: 'VERRAZZANO_OPERATOR_IMAGE', value: params.VERRAZZANO_OPERATOR_IMAGE),
                                    string(name: 'WILDCARD_DNS_DOMAIN', value: params.WILDCARD_DNS_DOMAIN),
                                    booleanParam(name: 'EMIT_METRICS', value: params.EMIT_METRICS)
                                ], wait: true
                        }
                    }
                }
                stage('Upgrade tests') {
                    steps {
                        script {
                            build job: "/verrazzano-upgrade-tests/${BRANCH_NAME.replace("/", "%2F")}",
                                    parameters: [
                                            string(name: 'GIT_COMMIT_FOR_UPGRADE', value: env.GIT_COMMIT),
                                            string(name: 'VERRAZZANO_OPERATOR_IMAGE', value: params.VERRAZZANO_OPERATOR_IMAGE),
                                            string(name: 'WILDCARD_DNS_DOMAIN', value: params.WILDCARD_DNS_DOMAIN),
                                            booleanParam(name: 'EMIT_METRICS', value: params.EMIT_METRICS)
                                    ], wait: true
                        }
                    }
                }
                stage('Kind Acceptance Tests on 1.19 Non-Calico') {
                    steps {
                        script {
                            // Do not use Calico
                            build job: "verrazzano-new-kind-acceptance-tests/${BRANCH_NAME.replace("/", "%2F")}",
                                parameters: [
                                    string(name: 'KUBERNETES_CLUSTER_VERSION', value: '1.19'),
                                    string(name: 'GIT_COMMIT_TO_USE', value: env.GIT_COMMIT),
                                    booleanParam(name: 'CREATE_CLUSTER_USE_CALICO', value: false)
                                ], wait: true
                        }
                    }
                    post {
                        failure {
                            script {
                                TESTS_FAILED = true
                            }
                        }
                    }
                }
                stage('Kind Acceptance Tests on 1.19 sslip.io') {
                    steps {
                        script {
                            // test with sslip.io
                            build job: "verrazzano-new-kind-acceptance-tests/${BRANCH_NAME.replace("/", "%2F")}",
                                parameters: [
                                    string(name: 'KUBERNETES_CLUSTER_VERSION', value: '1.19'),
                                    string(name: 'GIT_COMMIT_TO_USE', value: env.GIT_COMMIT),
                                    string(name: 'WILDCARD_DNS_DOMAIN', value: 'sslip.io')
                                ], wait: true
                        }
                    }
                    post {
                        failure {
                            script {
                                TESTS_FAILED = true
                            }
                        }
                    }
                }
                stage('OCI DNS/ACME-Staging Tests') {
                    steps {
                        script {
                            build job: "verrazzano-new-oci-dns-acceptance-tests/${BRANCH_NAME.replace("/", "%2F")}",
                                parameters: [
                                    string(name: 'GIT_COMMIT_TO_USE', value: env.GIT_COMMIT),
                                    string(name: 'CERT_ISSUER', value: "acme"),
                                    string(name: 'ACME_ENVIRONMENT', value: "staging"),
                                    booleanParam(name: 'CREATE_CLUSTER_USE_CALICO', value: false)
                                ], wait: true
                        }
                    }
                    post {
                        failure {
                            script {
                                TESTS_FAILED = true
                            }
                        }
                    }
                }
                /*stage('Multi Cluster with OCI DNS/ACME-Staging Tests') {
                    steps {
                        script {
                            build job: "verrazzano-multi-cluster-acceptance-tests/${BRANCH_NAME.replace("/", "%2F")}",
                                parameters: [
                                    string(name: 'GIT_COMMIT_TO_USE', value: env.GIT_COMMIT),
                                    string(name: 'TEST_ENV', value: 'ocidns_oke'),
                                    string(name: 'ACME_ENVIRONMENT', value: "staging"),
                                    // Disable Calico with these runs temporarily
                                    booleanParam(name: 'CREATE_CLUSTER_USE_CALICO', value: true)
                                ], wait: true
                        }
                    }
                    post {
                        failure {
                            script {
                                TESTS_FAILED = true
                            }
                        }
                    }
                }*/
            }
        }
        stage("Private Registry") {
            when {
                allOf {
                    expression {TESTS_FAILED == false}
                }
            }
            stages {
                stage("Upload Periodic Run Artifacts") {
                    steps {
                        sh """
                            if [ "${env.BRANCH_NAME}" == "master" ]; then
                                ci/scripts/update_periodic_on_success.sh ${env.GIT_COMMIT} ${SHORT_COMMIT_HASH} ${tarfilePrefix}
                            fi
                        """
                    }
                }
                stage('Private Registry Tests') {
                    steps {
                        script {
                            build job: "verrazzano-private-registry/${BRANCH_NAME.replace("/", "%2F")}",
                                parameters: [
                                    string(name: 'GIT_COMMIT_TO_USE', value: env.GIT_COMMIT),
                                    string(name: 'ZIPFILE_LOCATION', value: storeLocation)
                                ], wait: true
                        }
                    }
                }
            }
        }
    }
    post {
        failure {
            script {
                if (isAlertingEnabled()) {
                    mail to: "${env.BUILD_NOTIFICATION_TO_EMAIL}", from: "${env.BUILD_NOTIFICATION_FROM_EMAIL}",
                    subject: "Verrazzano Periodic Tests: ${env.JOB_NAME} - Failed",
                    body: "Job Failed - \"${env.JOB_NAME}\" build: ${env.BUILD_NUMBER}\n\nView the log at:\n ${env.BUILD_URL}\n\nBlue Ocean:\n${env.RUN_DISPLAY_URL}\n"
                    if (env.JOB_NAME == "verrazzano-periodic-triggered-tests/master") {
                        pagerduty(resolve: false, serviceKey: "$SERVICE_KEY",
                            incDescription: "Verrazzano Periodic Tests: ${env.JOB_NAME} - Failed",
                            incDetails: "Job Failed - \"${env.JOB_NAME}\" build: ${env.BUILD_NUMBER}\n\nView the log at:\n ${env.BUILD_URL}\n\nBlue Ocean:\n${env.RUN_DISPLAY_URL}")
                        slackSend ( channel: "$SLACK_ALERT_CHANNEL", message: "Job Failed - \"${env.JOB_NAME}\" build: ${env.BUILD_NUMBER}\n\nView the log at:\n ${env.BUILD_URL}\n\nBlue Ocean:\n${env.RUN_DISPLAY_URL}\n" )
                    }
                }
            }
        }
        cleanup {
            deleteDir()
        }
    }
}

def isAlertingEnabled() {
    if (NOTIFY_PERIODIC_FAILURES.equals("true") && (env.BRANCH_NAME.equals("master"))) {
        echo "Slack/Pager-Duty notifications enabled via global override setting"
        return true
    }
    return false
}
