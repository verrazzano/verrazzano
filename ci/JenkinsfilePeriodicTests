// Copyright (c) 2021, 2022, Oracle and/or its affiliates.
// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.

def GIT_COMMIT_TO_USE
def LAST_CLEAN_PERIODIC_COMMIT
def VERRAZZANO_DEV_VERSION
def RELEASABLE_IMAGES_OBJECT_STORE
def agentLabel = env.JOB_NAME.contains('master') ? "phxsmall" : "VM.Standard2.2"
def TESTS_FAILED = false
def storeLocation=""
def verrazzanoPrefix="verrazzano-"
def fullBundle=""
def liteBundle=""
def branchSpecificSchedule = getCronSchedule()
def SUSPECT_LIST = ""
def COMPARISON_URL_ON_FAILURE = ""

// The job name from which the verrazzano_images file is available to be copied to this job
// We will copy over and make it part of the artifacts of the periodic job, available when we want to release a candidate
def verrazzanoImagesJobProjectName = "verrazzano-examples"
def verrazzanoImagesFile           = "verrazzano_images.txt"
def verrazzanoImagesBuildNumber    = 0     // will be set to actual build number when the job is run
periodicsUpToDate                  = false // If true, indicates that the periodics already passed at the latest commit

pipeline {
    options {
        timeout(time: 6, unit: 'HOURS')
        skipDefaultCheckout true
        disableConcurrentBuilds()
        timestamps ()
    }

    agent {
       docker {
            image "${RUNNER_DOCKER_IMAGE}"
            args "${RUNNER_DOCKER_ARGS}"
            registryUrl "${RUNNER_DOCKER_REGISTRY_URL}"
            registryCredentialsId 'ocir-pull-and-push-account'
            label "${agentLabel}"
        }
    }

    triggers {
        cron(branchSpecificSchedule)
    }

    parameters {
        booleanParam (description: 'Skip tests to private registry stage, useful for testing out private registry testing, support and push to OCIR', name: 'SKIP_TO_PRIVATE_REGISTRY', defaultValue: false)
        string (name: 'TAGGED_TESTS',
                defaultValue: '',
                description: 'A comma separated list of build tags for tests that should be executed (e.g. unstable_test). Default:',
                trim: true)
        string (name: 'INCLUDED_TESTS',
                defaultValue: '.*',
                description: 'A regex matching any fully qualified test file that should be executed (e.g. examples/helidon/). Default: .*',
                trim: true)
        string (name: 'EXCLUDED_TESTS',
                defaultValue: '_excluded_test',
                description: 'A regex matching any fully qualified test file that should not be executed (e.g. multicluster/|_excluded_test). Default: _excluded_test',
                trim: true)
        booleanParam (description: 'Force execution of the tests even if up-to-date', name: 'FORCE', defaultValue: false)
        booleanParam (description: 'Skip test execution (for debugging)', name: 'DRY_RUN', defaultValue: false)
    }

    environment {
        IS_PERIODIC_PIPELINE = "true"
        OCIR_SCAN_COMPARTMENT = credentials('ocir-scan-compartment')
        OCIR_SCAN_TARGET = credentials('ocir-scan-target')
        OCIR_SCAN_REGISTRY = credentials('ocir-scan-registry')
        OCIR_SCAN_REPOSITORY_PATH = credentials('ocir-scan-repository-path')
        DOCKER_SCAN_CREDS = credentials('v8odev-ocir')
        DOCKER_CREDS = credentials('github-packages-credentials-rw')
        DOCKER_REPO = 'ghcr.io'

        OCI_CLI_AUTH="instance_principal"
        OCI_OS_NAMESPACE = credentials('oci-os-namespace')
        OCI_OS_BUCKET="verrazzano-builds"
        OCI_OS_COMMIT_BUCKET="verrazzano-builds-by-commit"
        CLEAN_BRANCH_NAME = "${env.BRANCH_NAME.replace("/", "%2F")}"
        SERVICE_KEY = credentials('PAGERDUTY_SERVICE_KEY')

        STABLE_COMMIT_OS_LOCATION = "${CLEAN_BRANCH_NAME}/last-stable-commit.txt"
        CLEAN_PERIODIC_OS_LOCATION = "${CLEAN_BRANCH_NAME}-last-clean-periodic-test/verrazzano_periodic-commit.txt"

        STABLE_COMMIT_LOCATION = "${WORKSPACE}/last-stable-commit.txt"
        CLEAN_PERIODIC_LOCATION = "${WORKSPACE}/last-clean-periodic-commit.txt"

        OCI_OS_REGION="us-phoenix-1"
    }

    // This job runs against the latest stable master commit. That is defined as the last clean master build and test run whose
    // commit has been stored in object storage. This job will fetch that commit from master and run extended tests using that.
    // This job is NOT currently setup to run extended tests from other branches, if you need to run those extended jobs you will
    // need to run those against your branch individually.

    stages {
        stage('Check last clean periodic') {
            steps {
                sh """
                    oci --region us-phoenix-1 os object get --namespace ${OCI_OS_NAMESPACE} -bn ${OCI_OS_BUCKET} --name ${STABLE_COMMIT_OS_LOCATION} --file ${STABLE_COMMIT_LOCATION}
                """

                script {

                    // Get the last stable commit ID to pass the triggered tests
                    def stableCommitProps = readProperties file: "${STABLE_COMMIT_LOCATION}"
                    GIT_COMMIT_TO_USE = stableCommitProps['git-commit']
                    echo "Last stable commit: ${GIT_COMMIT_TO_USE}"

                    LAST_CLEAN_PERIODIC_COMMIT=getLastCleanPeriodicCommit()
                    echo "Last clean periodics commit: ${LAST_CLEAN_PERIODIC_COMMIT}"

                    if (LAST_CLEAN_PERIODIC_COMMIT == GIT_COMMIT_TO_USE) {
                        periodicsUpToDate = true
                    }

                    echo "Up to date: ${periodicsUpToDate}"
                    echo "Dry run: ${params.DRY_RUN}"
                    echo "Force run: ${params.FORCE}"
                    echo "Execute tests: " + runTests()

                    // Indicate in title if run is up-to-date or dry-run
                    if (params.DRY_RUN) {
                        currentBuild.displayName = "${currentBuild.displayName} : DRY-RUN"
                    }
                    if (periodicsUpToDate) {
                        currentBuild.displayName = "${currentBuild.displayName} : UP-TO-DATE"
                    }
                    if (params.FORCE) {
                        currentBuild.displayName = "${currentBuild.displayName} : FORCE"
                    }

                    if (runTests()) {
                        echo "Executing periodic tests for commit ${GIT_COMMIT_TO_USE}"
                    }
                }
            }
        }
        stage('Clean workspace and checkout') {
            when {
                allOf {
                    expression { return runTests() }
                }
            }
            steps {
                script {
                    echo "${NODE_LABELS}"
                    echo "SCM checkout of ${GIT_COMMIT_TO_USE}"
                    def scmInfo = checkout([
                        $class: 'GitSCM',
                        branches: [[name: GIT_COMMIT_TO_USE]],
                        doGenerateSubmoduleConfigurations: false,
                        extensions: [],
                        submoduleCfg: [],
                        userRemoteConfigs: [[url: env.SCM_VERRAZZANO_GIT_URL]]])
                    env.GIT_COMMIT = scmInfo.GIT_COMMIT
                    env.GIT_BRANCH = scmInfo.GIT_BRANCH
                    echo "SCM checkout of ${env.GIT_BRANCH} at ${env.GIT_COMMIT}"
                    // If the commit we were handed is not what the SCM says we are using, fail
                    if (!env.GIT_COMMIT.equals(GIT_COMMIT_TO_USE)) {
                        error( "SCM didn't checkout the commit we expected. Expected: ${GIT_COMMIT_TO_USE}, Found: ${scmInfo.GIT_COMMIT}")
                    }

                    if (LAST_CLEAN_PERIODIC_COMMIT != null) {
                        COMPARISON_URL_ON_FAILURE = "https://github.com/verrazzano/verrazzano/compare/${LAST_CLEAN_PERIODIC_COMMIT}...${GIT_COMMIT_TO_USE}"
                        def lastClean = "${LAST_CLEAN_PERIODIC_COMMIT}"
                        def currentStable = "${GIT_COMMIT_TO_USE}"
                        def commitList = getCommitListFromGitLog(lastClean, currentStable)
                        withCredentials([file(credentialsId: 'jenkins-to-slack-users', variable: 'JENKINS_TO_SLACK_JSON')]) {
                            def userMappings = readJSON file: JENKINS_TO_SLACK_JSON
                            SUSPECT_LIST = getSuspectList(commitList, userMappings)
                            echo "Suspect list: ${SUSPECT_LIST}"
                        }
                    }
                    echo "URL if fails: ${COMPARISON_URL_ON_FAILURE}"
                }

                script {
                    try {
                        sh """
                            echo "${DOCKER_SCAN_CREDS_PSW}" | docker login ${env.OCIR_SCAN_REGISTRY} -u ${DOCKER_SCAN_CREDS_USR} --password-stdin
                        """
                    } catch(error) {
                        echo "docker login failed, retrying after sleep"
                        retry(4) {
                            sleep(30)
                            sh """
                            echo "${DOCKER_SCAN_CREDS_PSW}" | docker login ${env.OCIR_SCAN_REGISTRY} -u ${DOCKER_SCAN_CREDS_USR} --password-stdin
                            """
                        }
                    }
                    if (!(env.BRANCH_NAME.equals("master") || env.BRANCH_NAME.startsWith("release-1."))) {
                        try {
                            sh """
                                echo "${DOCKER_CREDS_PSW}" | docker login ${env.DOCKER_REPO} -u ${DOCKER_CREDS_USR} --password-stdin
                            """
                        } catch(error) {
                            echo "docker login failed, retrying after sleep"
                            retry(4) {
                                sleep(30)
                                sh """
                                    echo "${DOCKER_CREDS_PSW}" | docker login ${env.DOCKER_REPO} -u ${DOCKER_CREDS_USR} --password-stdin
                                """
                            }
                        }
                    }
                }

                script {
                    def props = readProperties file: '.verrazzano-development-version'
                    VERRAZZANO_DEV_VERSION = props['verrazzano-development-version']
                    TIMESTAMP = sh(returnStdout: true, script: "date +%Y%m%d%H%M%S").trim()
                    SHORT_COMMIT_HASH = sh(returnStdout: true, script: "git rev-parse --short=8 HEAD").trim()
                    // update the description with some meaningful info
                    currentBuild.description = SHORT_COMMIT_HASH + " : " + env.GIT_COMMIT + " : " + GIT_COMMIT_TO_USE
                    storeLocation="ephemeral/${env.BRANCH_NAME}/${SHORT_COMMIT_HASH}"
                    fullBundle="${storeLocation}/${verrazzanoPrefix}${VERRAZZANO_DEV_VERSION}.zip"
                    liteBundle="${storeLocation}/${verrazzanoPrefix}${VERRAZZANO_DEV_VERSION}-lite.zip"
                    RELEASABLE_IMAGES_OBJECT_STORE = "verrazzano_${VERRAZZANO_DEV_VERSION}-images.txt"
                }
            }
        }

        stage ('Periodic Test Suites') {
            when {
                allOf {
                    expression { return runTests() }
                    expression { params.SKIP_TO_PRIVATE_REGISTRY == false }
                }
            }
            parallel {
                stage('Multi Cluster Tests') {
                    steps {
                        retry(count: JOB_PROMOTION_RETRIES) {
                            script {
                                build job: "/verrazzano-multi-cluster-acceptance-tests/${CLEAN_BRANCH_NAME}",
                                    parameters: [
                                        booleanParam(name: 'UPGRADE_VERRAZZANO', value: false),
                                        string(name: 'GIT_COMMIT_TO_USE', value: env.GIT_COMMIT),
                                        string(name: 'TAGGED_TESTS', value: params.TAGGED_TESTS),
                                        string(name: 'INCLUDED_TESTS', value: params.INCLUDED_TESTS),
                                        string(name: 'EXCLUDED_TESTS', value: params.EXCLUDED_TESTS)
                                    ], wait: true
                            }
                        }
                    }
                }
                stage('Uninstall Tests') {
                    steps {
                        retry(count: JOB_PROMOTION_RETRIES) {
                            script {
                                build job: "/verrazzano-uninstall-test/${CLEAN_BRANCH_NAME}",
                                    parameters: [
                                        string(name: 'GIT_COMMIT_TO_USE', value: env.GIT_COMMIT),
                                        string(name: 'TAGGED_TESTS', value: params.TAGGED_TESTS),
                                        string(name: 'INCLUDED_TESTS', value: params.INCLUDED_TESTS),
                                        string(name: 'EXCLUDED_TESTS', value: params.EXCLUDED_TESTS)
                                    ], wait: true
                            }
                        }
                    }
                }
                stage('OCI DNS tests') {
                    steps {
                        retry(count: JOB_PROMOTION_RETRIES) {
                            script {
                                build job: "/verrazzano-new-oci-dns-acceptance-tests/${CLEAN_BRANCH_NAME}",
                                    parameters: [
                                        string(name: 'GIT_COMMIT_TO_USE', value: env.GIT_COMMIT),
                                        booleanParam(name: 'CREATE_CLUSTER_USE_CALICO', value: true),
                                        string(name: 'TAGGED_TESTS', value: params.TAGGED_TESTS),
                                        string(name: 'INCLUDED_TESTS', value: params.INCLUDED_TESTS),
                                        string(name: 'EXCLUDED_TESTS', value: params.EXCLUDED_TESTS)
                                    ], wait: true
                            }
                        }
                    }
                }
                stage('OCI DNS tests with instance principal') {
                    steps {
                        retry(count: JOB_PROMOTION_RETRIES) {
                            script {
                                build job: "/verrazzano-new-oci-dns-acceptance-tests/${CLEAN_BRANCH_NAME}",
                                    parameters: [
                                        string(name: 'OCI_DNS_AUTH', value: 'instance_principal'),
                                        string(name: 'GIT_COMMIT_TO_USE', value: env.GIT_COMMIT),
                                        string(name: 'VERRAZZANO_OPERATOR_IMAGE', value: params.VERRAZZANO_OPERATOR_IMAGE),
                                        booleanParam(name: 'CREATE_CLUSTER_USE_CALICO', value: true),
                                        string(name: 'TAGGED_TESTS', value: params.TAGGED_TESTS),
                                        string(name: 'INCLUDED_TESTS', value: params.INCLUDED_TESTS),
                                        string(name: 'EXCLUDED_TESTS', value: params.EXCLUDED_TESTS),
                                        booleanParam(name: 'EMIT_METRICS', value: params.EMIT_METRICS)
                                    ], wait: true
                            }
                        }
                    }
               }
                stage('Verrazzano in OCNE environment') {
                    steps {
                        retry(count: JOB_PROMOTION_RETRIES) {
                            script {
                                build job: "/verrazzano-ocne/${CLEAN_BRANCH_NAME}",
                                    parameters: [
                                        string(name: 'GIT_COMMIT_TO_USE', value: env.GIT_COMMIT),
                                        string(name: 'VERRAZZANO_OPERATOR_IMAGE', value: params.VERRAZZANO_OPERATOR_IMAGE),
                                        booleanParam(name: 'CREATE_CLUSTER_USE_CALICO', value: false),
                                        string(name: 'TAGGED_TESTS', value: params.TAGGED_TESTS),
                                        string(name: 'INCLUDED_TESTS', value: params.INCLUDED_TESTS),
                                        string(name: 'EXCLUDED_TESTS', value: params.EXCLUDED_TESTS),
                                        booleanParam(name: 'EMIT_METRICS', value: params.EMIT_METRICS)
                                    ], wait: true
                            }
                        }
                    }
                }
               stage('Backup and Restore Tests') {
                   steps {
                       retry(count: JOB_PROMOTION_RETRIES) {
                           script {
                               build job: "/verrazzano-backup-all-test-oke/${CLEAN_BRANCH_NAME}",
                                   parameters: [
                                       string(name: 'GIT_COMMIT_TO_USE', value: env.GIT_COMMIT),
                                       string(name: 'VERRAZZANO_OPERATOR_IMAGE', value: 'NONE'),
                                       string(name: 'TAGGED_TESTS', value: params.TAGGED_TESTS),
                                       string(name: 'INCLUDED_TESTS', value: params.INCLUDED_TESTS),
                                       string(name: 'EXCLUDED_TESTS', value: params.EXCLUDED_TESTS),
                                       booleanParam(name: 'EMIT_METRICS', value: params.EMIT_METRICS)
                                   ], wait: true
                           }
                       }
                   }
               }
                stage('Kind Acceptance Tests With Grafana DB on 1.23') {
                    steps {
                        retry(count: JOB_PROMOTION_RETRIES) {
                            script {
                                build job: "/verrazzano-new-kind-acceptance-tests/${CLEAN_BRANCH_NAME}",
                                    parameters: [
                                        string(name: 'KUBERNETES_CLUSTER_VERSION', value: '1.23'),
                                        string(name: 'GIT_COMMIT_TO_USE', value: env.GIT_COMMIT),
                                        string(name: 'TAGGED_TESTS', value: params.TAGGED_TESTS),
                                        string(name: 'INCLUDED_TESTS', value: params.INCLUDED_TESTS),
                                        string(name: 'EXCLUDED_TESTS', value: params.EXCLUDED_TESTS),
                                        booleanParam(name: 'ENABLE_JWT_TESTING', value: true),
                                        booleanParam(name: 'USE_DB_FOR_GRAFANA', value: true)
                        ], wait: true
                            }
                        }
                    }
                }
                stage('Kind Acceptance Tests on 1.21') {
                    steps {
                        retry(count: JOB_PROMOTION_RETRIES) {
                            script {
                                build job: "/verrazzano-new-kind-acceptance-tests/${CLEAN_BRANCH_NAME}",
                                    parameters: [
                                        string(name: 'KUBERNETES_CLUSTER_VERSION', value: '1.21'),
                                        string(name: 'GIT_COMMIT_TO_USE', value: env.GIT_COMMIT),
                                        string(name: 'TAGGED_TESTS', value: params.TAGGED_TESTS),
                                        string(name: 'INCLUDED_TESTS', value: params.INCLUDED_TESTS),
                                        string(name: 'EXCLUDED_TESTS', value: params.EXCLUDED_TESTS),
                                        booleanParam(name: 'ENABLE_JWT_TESTING', value: true)
                                   ], wait: true
                            }
                        }
                    }
                }
                stage('Kind Acceptance Tests on 1.22') {
                    steps {
                        retry(count: JOB_PROMOTION_RETRIES) {
                            script {
                                build job: "/verrazzano-new-kind-acceptance-tests/${CLEAN_BRANCH_NAME}",
                                        parameters: [
                                                string(name: 'KUBERNETES_CLUSTER_VERSION', value: '1.22'),
                                                string(name: 'GIT_COMMIT_TO_USE', value: env.GIT_COMMIT),
                                                string(name: 'TAGGED_TESTS', value: params.TAGGED_TESTS),
                                                string(name: 'INCLUDED_TESTS', value: params.INCLUDED_TESTS),
                                                string(name: 'EXCLUDED_TESTS', value: params.EXCLUDED_TESTS),
                                                booleanParam(name: 'ENABLE_JWT_TESTING', value: true)
                                       ], wait: true
                            }
                        }
                    }
                }
                stage('Kind Acceptance Tests on 1.23') {
                    steps {
                        retry(count: JOB_PROMOTION_RETRIES) {
                            script {
                                build job: "/verrazzano-new-kind-acceptance-tests/${CLEAN_BRANCH_NAME}",
                                        parameters: [
                                                string(name: 'KUBERNETES_CLUSTER_VERSION', value: '1.23'),
                                                string(name: 'GIT_COMMIT_TO_USE', value: env.GIT_COMMIT),
                                                string(name: 'TAGGED_TESTS', value: params.TAGGED_TESTS),
                                                string(name: 'INCLUDED_TESTS', value: params.INCLUDED_TESTS),
                                                string(name: 'EXCLUDED_TESTS', value: params.EXCLUDED_TESTS),
                                                booleanParam(name: 'ENABLE_JWT_TESTING', value: true)
                                        ], wait: true
                            }
                        }
                    }
                }
                stage('Kind Acceptance Tests on 1.24') {
                    steps {
                        retry(count: JOB_PROMOTION_RETRIES) {
                            script {
                                build job: "/verrazzano-new-kind-acceptance-tests/${CLEAN_BRANCH_NAME}",
                                        parameters: [
                                                string(name: 'KUBERNETES_CLUSTER_VERSION', value: '1.24'),
                                                string(name: 'GIT_COMMIT_TO_USE', value: env.GIT_COMMIT),
                                                string(name: 'TAGGED_TESTS', value: params.TAGGED_TESTS),
                                                string(name: 'INCLUDED_TESTS', value: params.INCLUDED_TESTS),
                                                string(name: 'EXCLUDED_TESTS', value: params.EXCLUDED_TESTS),
                                                booleanParam(name: 'ENABLE_JWT_TESTING', value: true)
                                        ], wait: true
                            }
                        }
                    }
                }
                stage('Upgrade tests') {
                    steps {
                        retry(count: JOB_PROMOTION_RETRIES) {
                            script {
                                build job: "/verrazzano-upgrade-tests/${CLEAN_BRANCH_NAME}",
                                    parameters: [
                                        string(name: 'GIT_COMMIT_FOR_UPGRADE', value: env.GIT_COMMIT),
                                        string(name: 'TAGGED_TESTS', value: params.TAGGED_TESTS),
                                        string(name: 'INCLUDED_TESTS', value: params.INCLUDED_TESTS),
                                        string(name: 'EXCLUDED_TESTS', value: params.EXCLUDED_TESTS)
                                    ], wait: true
                            }
                        }
                    }
                }
                stage('Upgrade Path Minor Release Tests') {
                    steps {
                            script {
                                build job: "/verrazzano-push-triggered-upgrade-minor-release-tests/${CLEAN_BRANCH_NAME}",
                                    parameters: [
                                        string(name: 'GIT_COMMIT_TO_USE', value: env.GIT_COMMIT),
                                        string(name: 'TAGGED_TESTS', value: params.TAGGED_TESTS),
                                        string(name: 'INCLUDED_TESTS', value: params.INCLUDED_TESTS),
                                        string(name: 'EXCLUDED_TESTS', value: params.EXCLUDED_TESTS),
                                        booleanParam(name: 'EMIT_METRICS', value: params.EMIT_METRICS)
                                    ], wait: true
                            }
                    }
                }
                /*
                stage('Upgrade Resiliency tests') {
                    steps {
                        retry(count: JOB_PROMOTION_RETRIES) {
                            script {
                                build job: "/verrazzano-upgrade-resiliency-tests/${CLEAN_BRANCH_NAME}",
                                    parameters: [
                                        string(name: 'GIT_COMMIT_FOR_UPGRADE', value: env.GIT_COMMIT),
                                        string(name: 'TAGGED_TESTS', value: params.TAGGED_TESTS),
                                        string(name: 'INCLUDED_TESTS', value: params.INCLUDED_TESTS),
                                        string(name: 'EXCLUDED_TESTS', value: params.EXCLUDED_TESTS)
                                    ], wait: true
                            }
                        }
                    }
                }
                */
                stage('Kind Acceptance Tests on 1.22 Non-Calico') {
                    steps {
                        retry(count: JOB_PROMOTION_RETRIES) {
                            script {
                                // Do not use Calico
                                build job: "verrazzano-new-kind-acceptance-tests/${CLEAN_BRANCH_NAME}",
                                    parameters: [
                                        string(name: 'KUBERNETES_CLUSTER_VERSION', value: '1.22'),
                                        string(name: 'GIT_COMMIT_TO_USE', value: env.GIT_COMMIT),
                                        booleanParam(name: 'CREATE_CLUSTER_USE_CALICO', value: false),
                                        string(name: 'TAGGED_TESTS', value: params.TAGGED_TESTS),
                                        string(name: 'INCLUDED_TESTS', value: params.INCLUDED_TESTS),
                                        string(name: 'EXCLUDED_TESTS', value: params.EXCLUDED_TESTS)
                                    ], wait: true
                            }
                        }
                    }
                    post {
                        failure {
                            script {
                                TESTS_FAILED = true
                            }
                        }
                    }
                }
                stage('Kind Acceptance Tests on 1.22 sslip.io') {
                    steps {
                        retry(count: JOB_PROMOTION_RETRIES) {
                            script {
                                // test with sslip.io
                                build job: "verrazzano-new-kind-acceptance-tests/${CLEAN_BRANCH_NAME}",
                                    parameters: [
                                        string(name: 'KUBERNETES_CLUSTER_VERSION', value: '1.22'),
                                        string(name: 'GIT_COMMIT_TO_USE', value: env.GIT_COMMIT),
                                        string(name: 'WILDCARD_DNS_DOMAIN', value: 'sslip.io'),
                                        string(name: 'TAGGED_TESTS', value: params.TAGGED_TESTS),
                                        string(name: 'INCLUDED_TESTS', value: params.INCLUDED_TESTS),
                                        string(name: 'EXCLUDED_TESTS', value: params.EXCLUDED_TESTS)
                                    ], wait: true
                            }
                        }
                    }
                    post {
                        failure {
                            script {
                                TESTS_FAILED = true
                            }
                        }
                    }
                }
                stage('Dynamic Configuration Tests') {
                    steps {
                        retry(count: JOB_PROMOTION_RETRIES) {
                            script {
                                build job: "verrazzano-dynamic-config-tests/${CLEAN_BRANCH_NAME}",
                                    parameters: [
                                        string(name: 'KUBERNETES_CLUSTER_VERSION', value: '1.22'),
                                        string(name: 'GIT_COMMIT_TO_USE', value: env.GIT_COMMIT),
                                        string(name: 'TAGGED_TESTS', value: params.TAGGED_TESTS),
                                        string(name: 'INCLUDED_TESTS', value: params.INCLUDED_TESTS),
                                        string(name: 'EXCLUDED_TESTS', value: params.EXCLUDED_TESTS)
                                    ], wait: true
                            }
                        }
                    }
                    post {
                        failure {
                            script {
                                TESTS_FAILED = true
                            }
                        }
                    }
                }
                stage('OCI DNS/ACME-Staging Tests') {
                    steps {
                        retry(count: JOB_PROMOTION_RETRIES) {
                            script {
                                build job: "verrazzano-new-oci-dns-acceptance-tests/${CLEAN_BRANCH_NAME}",
                                    parameters: [
                                        string(name: 'GIT_COMMIT_TO_USE', value: env.GIT_COMMIT),
                                        string(name: 'CERT_ISSUER', value: "acme"),
                                        string(name: 'ACME_ENVIRONMENT', value: "staging"),
                                        booleanParam(name: 'CREATE_CLUSTER_USE_CALICO', value: false),
                                        string(name: 'TAGGED_TESTS', value: params.TAGGED_TESTS),
                                        string(name: 'INCLUDED_TESTS', value: params.INCLUDED_TESTS),
                                        string(name: 'EXCLUDED_TESTS', value: params.EXCLUDED_TESTS)
                                    ], wait: true
                            }
                        }
                    }
                    post {
                        failure {
                            script {
                                TESTS_FAILED = true
                            }
                        }
                    }
                }
                stage('OCI Service Integration Tests') {
                    steps {
                        retry(count: JOB_PROMOTION_RETRIES) {
                            script {
                                build job: "/verrazzano-oci-integration-tests/${CLEAN_BRANCH_NAME}",
                                    parameters: [
                                        string(name: 'GIT_COMMIT_TO_USE', value: env.GIT_COMMIT),
                                        string(name: 'TAGGED_TESTS', value: params.TAGGED_TESTS),
                                        string(name: 'INCLUDED_TESTS', value: params.INCLUDED_TESTS),
                                        string(name: 'EXCLUDED_TESTS', value: params.EXCLUDED_TESTS)
                                    ], wait: true
                            }
                        }
                    }
                    post {
                        failure {
                            script {
                                TESTS_FAILED = true
                            }
                        }
                    }
                }
                stage('Verrazzano Examples') {
                    steps {
                        retry(count: JOB_PROMOTION_RETRIES) {
                            script {
                                def builtExamples = build job: "/verrazzano-examples/${CLEAN_BRANCH_NAME}",
                                    parameters: [
                                        string(name: 'KUBERNETES_CLUSTER_VERSION', value: '1.22'),
                                        string(name: 'GIT_COMMIT_TO_USE', value: env.GIT_COMMIT),
                                        string(name: 'TAGGED_TESTS', value: params.TAGGED_TESTS),
                                        string(name: 'INCLUDED_TESTS', value: params.INCLUDED_TESTS),
                                        string(name: 'EXCLUDED_TESTS', value: params.EXCLUDED_TESTS)
                                    ], wait: true
                                // The verrazzano-examples job is the one from which we get the verrazzano images file
                                verrazzanoImagesBuildNumber = builtExamples.number
                            }
                        }
                    }
                    post {
                        failure {
                            script {
                                TESTS_FAILED = true
                            }
                        }
                    }
                }
            }
        }

        stage("Private Registry") {
            when {
                allOf {
                    expression { return runTests() }
                    expression { TESTS_FAILED == false }
                }
            }
            stages {
                stage("Upload Periodic Run Artifacts") {
                    steps {
                        sh """
                            ci/scripts/update_periodic_on_success.sh ${env.GIT_COMMIT} ${SHORT_COMMIT_HASH} ${VERRAZZANO_DEV_VERSION}
                        """
                    }
                }

                stage('Private Registry Tests') {
                    when {
                        allOf {
                            not { buildingTag() }
                            anyOf {
                                branch 'master';
                                branch 'release-*';
                            }
                        }
                    }
                    parallel {
                        stage('Verrazzano Lite Distribution') {
                            steps {
                                retry(count: JOB_PROMOTION_RETRIES) {
                                    script {
                                        build job: "verrazzano-private-registry/${CLEAN_BRANCH_NAME}",
                                            parameters: [
                                                string(name: 'GIT_COMMIT_TO_USE', value: env.GIT_COMMIT),
                                                string(name: 'DISTRIBUTION_VARIANT', value: 'Lite'),
                                                string(name: 'ZIPFILE_LOCATION', value: liteBundle)
                                            ], wait: true
                                    }
                                }
                            }
                        }
                        /*
                        stage('Verrazzano Full Distribution') {
                            steps {
                                retry(count: JOB_PROMOTION_RETRIES) {
                                    script {
                                        build job: "verrazzano-private-registry/${CLEAN_BRANCH_NAME}",
                                            parameters: [
                                                string(name: 'GIT_COMMIT_TO_USE', value: env.GIT_COMMIT),
                                                string(name: 'DISTRIBUTION_VARIANT', value: 'Full'),
                                                string(name: 'ZIPFILE_LOCATION', value: fullBundle)
                                            ], wait: true
                                    }
                                }
                            }
                        }
                        */
                    }
                }

                stage('Push to OCIR') {
                    environment {
                        OCI_CLI_AUTH="api_key"
                        OCI_CLI_TENANCY = credentials('oci-dev-tenancy')
                        OCI_CLI_USER = credentials('oci-dev-user-ocid')
                        OCI_CLI_FINGERPRINT = credentials('oci-dev-api-key-fingerprint')
                        OCI_CLI_KEY_FILE = credentials('oci-dev-api-key-file')
                        OCI_CLI_REGION = "us-ashburn-1"
                        OCI_REGION = "${env.OCI_CLI_REGION}"
                        // Directory containing the Verrazzano image tar files
                        VERRAZZANO_IMAGES_DIRECTORY = "${WORKSPACE}/vz-full/verrazzano-${VERRAZZANO_DEV_VERSION}/images"
                    }
                    steps {
                        script {
                            sh """
                                echo "Pushing images to OCIR, these are treated as the latest scan results for ${CLEAN_BRANCH_NAME}"
                                ci/scripts/push_to_ocir.sh
                            """
                        }
                    }
                }

                stage('Release Candidate Validation Checks') {
                    steps {
                        script {
                            def built = build job: "verrazzano-prerelease-check/${CLEAN_BRANCH_NAME}",
                                parameters: [
                                    string(name: 'GIT_COMMIT_TO_USE', value: env.GIT_COMMIT)
                                ], wait: true, propagate: false
                            println("Result of verrazzano-prerelease-check is ${built.result}")
                            dir ("${WORKSPACE}") {
                                copyArtifacts(projectName: "verrazzano-prerelease-check/${CLEAN_BRANCH_NAME}",
                                        selector: specific("${built.number}"));
                                def releaseStatus = readFile file: "release_status.out"
                                currentBuild.displayName = "${currentBuild.displayName} : ${releaseStatus}"
                            }
                        }
                    }
                }

                stage('Update Last Clean Periodic Test') {
                    steps {
                        script {
                            sh """
                                ci/scripts/update_last_clean_periodic_test.sh ${VERRAZZANO_DEV_VERSION}
                            """
                        }
                    }
                }

            }
        }
    }
    post {
        always {
            script {
                if (verrazzanoImagesBuildNumber > 0) {
                    copyArtifacts(projectName: "${verrazzanoImagesJobProjectName}/${CLEAN_BRANCH_NAME}",
                            selector: specific("${verrazzanoImagesBuildNumber}"),
                            filter: verrazzanoImagesFile)
                    sh """
                        OCI_CLI_AUTH="instance_principal" oci --region us-phoenix-1 os object put --force --namespace ${OCI_OS_NAMESPACE} -bn ${OCI_OS_BUCKET} --name ${CLEAN_BRANCH_NAME}/${RELEASABLE_IMAGES_OBJECT_STORE} --file ${verrazzanoImagesFile}
                    """
                } else {
                    println("Cannot copy ${verrazzanoImagesFile} from the project ${verrazzanoImagesJobProjectName} - no build number is available to copy from.")
                }
            }
            archiveArtifacts artifacts: "**/prerelease_validation.out,**/release_status.out,**/${verrazzanoImagesFile}", allowEmptyArchive: true
        }
        failure {
            script {
                if (isAlertingEnabled()) {
                    if (isPagerDutyEnabled()) {
                        pagerduty(resolve: false, serviceKey: "$SERVICE_KEY",
                        incDescription: "Verrazzano Periodic Tests: ${env.JOB_NAME} - Failed",
                        incDetails: "Job Failed - \"${env.JOB_NAME}\" build: ${env.BUILD_NUMBER}\n\nView the log at:\n ${env.BUILD_URL}\n\nBlue Ocean:\n${env.RUN_DISPLAY_URL}")
                    }
                    slackSend ( channel: "$SLACK_ALERT_CHANNEL", message: "Job Failed - \"${env.JOB_NAME}\" build: ${env.BUILD_NUMBER}\n\nView the log at:\n ${env.BUILD_URL}\n\nBlue Ocean:\n${env.RUN_DISPLAY_URL}\n\nSuspects:\n${SUSPECT_LIST}\n\nChange comparison: ${COMPARISON_URL_ON_FAILURE}" )
                    echo "done alerts"
                }
            }
        }
        cleanup {
            deleteDir()
        }
    }
}

// Returns the last clean commit for the periodics, or null if the commit file does not exist yet.
// - fails the pipeline if any error other than 404 is returned by the OCI CLI
def getLastCleanPeriodicCommit() {
    lastPeriodicCommitCommandOutput = sh (
        label: "Get last clean periodic commit ID",
        script: "oci --region us-phoenix-1 os object get --namespace ${OCI_OS_NAMESPACE} -bn ${OCI_OS_BUCKET} --name ${CLEAN_PERIODIC_OS_LOCATION} --file ${CLEAN_PERIODIC_LOCATION} 2>&1 || true",
        returnStdout: true
        ).trim()
    echo "command out: ${lastPeriodicCommitCommandOutput}"
    if (lastPeriodicCommitCommandOutput.length() > 0) {
        // We can get warning messages here as well even when the command succeeded, so be more precise on the checking
        if (lastPeriodicCommitCommandOutput =~ /(.*)status(.*)\d{1,4}(.*)/) {
            // If we think we had a status: NNN, we ignore 404 and fail for others
            assert lastPeriodicCommitCommandOutput =~ /(.*)status(.*)404(.*)/ : "An unexpected error occurred getting last periodic commit from ObjectStore: ${lastPeriodicCommitCommandOutput}"
        } else {
            // If we got here, we have some message that may or may not be an error. If we don't see the file, we assume it was an error
            sh """
                if [ ! -f ${CLEAN_PERIODIC_LOCATION} ]; then
                    echo "An unexpected error occurred getting last periodic commit from ObjectStore: ${lastPeriodicCommitCommandOutput}"
                    exit 1
                fi
            """
        }
    }
    // Get the commit ID for the last known clean pass of the Periodic tests
    def cleanPeriodicsCommitProps = readProperties file: "${CLEAN_PERIODIC_LOCATION}"
    return cleanPeriodicsCommitProps['git-commit']
}

// Checks all the conditions gating test execution and coallates the result
def runTests() {
  return params.FORCE || ( ! periodicsUpToDate && ! params.DRY_RUN )
}

def isAlertingEnabled() {
    // this controls whether any alerting happens for these tests
    if (NOTIFY_PERIODIC_FAILURES.equals("true") && (env.BRANCH_NAME.equals("master") || env.BRANCH_NAME.startsWith("release-1."))) {
        echo "Alert notifications enabled for ${env.BRANCH_NAME}"
        return true
    }
    return false
}

def isPagerDutyEnabled() {
    // this additionally controls whether PD alerts are enabled (note that you must also enable alerting in general as well if you want these)
    if (NOTIFY_PAGERDUTY_PERIODIC_FAILURES.equals("true")) {
        echo "Pager-Duty notifications enabled via global override setting"
        return true
    }
    return false
}

def getCronSchedule() {
    if (env.BRANCH_NAME.equals("master")) {
        return "H */6 * * *"
    } else if (env.BRANCH_NAME.startsWith("release-1")) {
        return "@daily"
    }
    return ""
}

// Called in Stage Clean workspace and checkout steps
def getCommitListFromGitLog(lastClean, currentStable) {
    echo "Checking for change sets"
    def commitList = sh(returnStdout: true, script: "git log ${lastClean}...${currentStable} --oneline | cut -d \" \" -f 1").trim().split('\n')
    for (int i = 0; i < commitList.size(); i++) {
        echo "Found commit id: ${commitList[i]}"
    }
    return commitList
}

def trimIfGithubNoreplyUser(userIn) {
    if (userIn == null) {
        echo "Not a github noreply user, not trimming: ${userIn}"
        return userIn
    }
    if (userIn.matches(".*\\+.*@users.noreply.github.com.*")) {
        def userOut = userIn.substring(userIn.indexOf("+") + 1, userIn.indexOf("@"))
        return userOut;
    }
    if (userIn.matches(".*<.*@users.noreply.github.com.*")) {
        def userOut = userIn.substring(userIn.indexOf("<") + 1, userIn.indexOf("@"))
        return userOut;
    }
    if (userIn.matches(".*@users.noreply.github.com")) {
        def userOut = userIn.substring(0, userIn.indexOf("@"))
        return userOut;
    }
    echo "Not a github noreply user, not trimming: ${userIn}"
    return userIn
}

def getSuspectList(commitList, userMappings) {
    def retValue = ""
    def suspectList = []
    if (commitList == null || commitList.size() == 0) {
        echo "No commits to form suspect list"
    } else {
        for (int i = 0; i < commitList.size(); i++) {
            def id = commitList[i]
            try {
                def gitAuthor = sh(
                    script: "git log --format='%ae' '$id^!'",
                    returnStdout: true
                ).trim()
                if (gitAuthor != null) {
                    def author = trimIfGithubNoreplyUser(gitAuthor)
                    echo "DEBUG: author: ${gitAuthor}, ${author}, id: ${id}"
                    if (userMappings.containsKey(author)) {
                        def slackUser = userMappings.get(author)
                        if (!suspectList.contains(slackUser)) {
                            echo "Added ${slackUser} as suspect"
                            retValue += " ${slackUser}"
                            suspectList.add(slackUser)
                        }
                    } else {
                        // If we don't have a name mapping use the commit.author, at least we can easily tell if the mapping gets dated
                        if (!suspectList.contains(author)) {
                            echo "Added ${author} as suspect"
                            retValue += " ${author}"
                            suspectList.add(author)
                        }
                    }
                } else {
                    echo "No author returned from git"
                }
            } catch (Exception e) {
                echo "INFO: Problem processing commit ${id}, skipping commit: " + e.toString()
            }
        }
    }
    def startedByUser = "";
    def causes = currentBuild.getBuildCauses()
    echo "causes: " + causes.toString()
    for (cause in causes) {
        def causeString = cause.toString()
        echo "current cause: " + causeString
        def causeInfo = readJSON text: causeString
        if (causeInfo.userId != null) {
            startedByUser = causeInfo.userId
        }
    }

    if (startedByUser.length() > 0) {
        echo "Build was started by a user, adding them to the suspect notification list: ${startedByUser}"
        def author = trimIfGithubNoreplyUser(startedByUser)
        echo "DEBUG: author: ${startedByUser}, ${author}"
        if (userMappings.containsKey(author)) {
            def slackUser = userMappings.get(author)
            if (!suspectList.contains(slackUser)) {
                echo "Added ${slackUser} as suspect"
                retValue += " ${slackUser}"
                suspectList.add(slackUser)
            }
        } else {
            // If we don't have a name mapping use the commit.author, at least we can easily tell if the mapping gets dated
            if (!suspectList.contains(author)) {
               echo "Added ${author} as suspect"
               retValue += " ${author}"
               suspectList.add(author)
            }
        }
    } else {
        echo "Build not started by a user, not adding to notification list"
    }
    echo "returning suspect list: ${retValue}"
    return retValue
}

@NonCPS
List extractReleaseTags(final String fileContent) {
    List releases = []
    fileContent.eachLine { tag ->
        releases << tag
    }
    return releases
}

def getLatestReleaseVersion() {
    final String releaseTags = readFile(file: "${workspace}/tags.txt")
    list gitTags = extractReleaseTags(releaseTags)
    echo "gitTags = ${gitTags}"
    return gitTags.pop()
}