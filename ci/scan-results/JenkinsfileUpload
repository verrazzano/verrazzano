// Copyright (c) 2022, 2023, Oracle and/or its affiliates.
// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.

pipeline {
    options {
        skipDefaultCheckout true
        timestamps ()
    }

    agent {
        docker {
            image "${RUNNER_DOCKER_IMAGE_1_5}"
            args "${RUNNER_DOCKER_ARGS_1_5}"
            registryUrl "${RUNNER_DOCKER_REGISTRY_URL}"
            label 'internal'
        }
    }

    parameters {
        string (name: 'UPSTREAM_JOB', defaultValue: 'NONE', description: 'Name of the upstream job')
        string (name: 'UPSTREAM_BUILD', defaultValue: 'NONE', description: 'Build number to copy the upload file from')
    }

    environment {
        upload_filename = "consolidated-upload.json"
        copy_artifact_filter = "scan-results/latest-periodic/${upload_filename}"
        upload_url = "${env.SCANMANAGER_URL}"
        PIPELINE_OWNERS = credentials('scanning-owners')
    }

    stages {
        stage('Fetch Scan Report') {
            steps {
                script {
                    sh """
                        echo "Copying ${copy_artifact_filter} from upstream pipeline"
                        echo "UPSTREAM_JOB = ${params.UPSTREAM_JOB}"
                        echo "UPSTREAM_BUILD = ${params.UPSTREAM_BUILD}"
                    """
                    copyArtifacts(
                        projectName: "/${params.UPSTREAM_JOB}",
                        selector: specific("${params.UPSTREAM_BUILD}"),
                        filter: "${copy_artifact_filter}",
                        flatten: true,
                        optional: false,
                        fingerprintArtifacts: false
                    )
                    sh """
                        echo "Got file ${upload_filename}:"
                        ls -l
                        head -8 ${upload_filename}
                    """
                }
            }
        }

        stage("Upload Scan Report") {
            steps {
                script {
                    sh '''
                    echo "Uploading ${upload_filename} to ${upload_url}"
                    uploadstatus=\$(curl -w "%{http_code}" -k -v -X POST -H "Content-Type: application/json" -d@${upload_filename} ${upload_url})
                    if [[ $uploadstatus -lt 400 ]];then
                      echo "File uploaded"
                    else
                      exit 1
                    fi
                    '''
                }
            }
        }

    }

    post {
        failure {
            slackSend ( channel: "$SLACK_ALERT_CHANNEL", message: "Job Failed - \"${env.JOB_NAME}\" build: ${env.BUILD_NUMBER}\n\nView the log at:\n ${env.BUILD_URL}\n\nBlue Ocean:\n${env.RUN_DISPLAY_URL}\n\nSuspects:\n${PIPELINE_OWNERS}" )
        }
        cleanup {
            sh """
                echo "Removing upload file ${upload_filename}"
                rm -f ${upload_filename}
            """
        }
    }
}

