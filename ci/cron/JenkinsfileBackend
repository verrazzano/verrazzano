// Copyright (c) 2023, Oracle and/or its affiliates.
// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.

import groovy.transform.Field

@Field
<<<<<<< HEAD
def GIT_COMMIT_TO_USE = ""
@Field
def LAST_CLEAN_BACKEND_COMMIT = ""
@Field
def backendTestsUpToDate = false // If true, indicates that the backend tests already passed at the latest commit
@Field
def backendTestsUpToDateFailed = false // If true, indicates that the backend tests already ran and failed at the latest commit
=======
def LAST_BACKEND_COMMIT = ""
>>>>>>> 193ab1b1d... VZ-10259 URL Trigger is not working as we expect (#6672)

def agentLabel = env.JOB_NAME.contains('master') ? "phx-small" : "small"

// Non Fields
def branchSpecificSchedule = getCronSchedule()

pipeline {
    options {
        timeout(time: 12, unit: 'HOURS')
        skipDefaultCheckout true
        disableConcurrentBuilds()
        timestamps ()
    }

    agent {
       docker {
            image "${RUNNER_DOCKER_IMAGE}"
            args "${RUNNER_DOCKER_ARGS}"
            registryUrl "${RUNNER_DOCKER_REGISTRY_URL}"
            registryCredentialsId 'ocir-pull-and-push-account'
            label "${agentLabel}"
        }
    }

    triggers {
        cron(branchSpecificSchedule)
    }

    parameters {
            booleanParam (description: 'Skip test execution (for debugging)', name: 'DRY_RUN', defaultValue: false)
        }

    environment {
<<<<<<< HEAD
        OCI_CLI_AUTH = "instance_principal"
        OCI_OS_NAMESPACE = credentials('oci-os-namespace')

        OCI_OS_BUCKET = "verrazzano-builds"
        OCI_OS_COMMIT_BUCKET = "verrazzano-builds-by-commit"
        CLEAN_BRANCH_NAME = "${env.BRANCH_NAME.replace("/", "%2F")}"

        STABLE_COMMIT_OS_LOCATION = "${CLEAN_BRANCH_NAME}/last-stable-commit.txt"
        LAST_BACKEND_OS_LOCATION = "${CLEAN_BRANCH_NAME}/last-backend-run-commit.txt"
        CLEAN_BACKEND_OS_LOCATION = "${CLEAN_BRANCH_NAME}-last-clean-backend-test/verrazzano_backend-commit.txt"

        STABLE_COMMIT_LOCATION = "${WORKSPACE}/last-stable-commit.txt"
        LAST_BACKEND_LOCATION = "${WORKSPACE}/last-backend-run-commit.txt"
        CLEAN_BACKEND_LOCATION = "${WORKSPACE}/last-clean-backend-commit.txt"

        OCI_OS_REGION = "us-phoenix-1"
    }

    stages {

        stage('Check last clean backend') {
            steps {
                sh """
                    oci --region us-phoenix-1 os object get --namespace ${OCI_OS_NAMESPACE} -bn ${OCI_OS_BUCKET} --name ${STABLE_COMMIT_OS_LOCATION} --file ${STABLE_COMMIT_LOCATION}
                """

                script {
                    // Check if there is already a clean backend run at this commit already, and set the display name if
                    // it already is tested, or if doing a special run type (dry run, etc...)
                    preliminaryChecks()
                }
            }
        }

        stage('Clean workspace and checkout') {
            when {
                allOf {
                    expression { return runPipeline() }
                }
            }
=======
        OCI_CLI_AUTH="instance_principal"
        OCI_OS_NAMESPACE = credentials('oci-os-namespace')

        OCI_OS_BUCKET="verrazzano-builds"
        OCI_OS_COMMIT_BUCKET="verrazzano-builds-by-commit"
        CLEAN_BRANCH_NAME = "${env.BRANCH_NAME.replace("/", "%2F")}"

        LAST_BACKEND_OS_LOCATION = "${CLEAN_BRANCH_NAME}/last-backend-run-commit.txt"
        LAST_BACKEND_LOCATION = "${WORKSPACE}/last-backend-run-commit.txt"

        OCI_OS_REGION="us-phoenix-1"
    }

    stages {
        stage('Clean workspace and checkout') {
>>>>>>> 193ab1b1d... VZ-10259 URL Trigger is not working as we expect (#6672)
                steps {
                    script {
                        cleanWorkspaceAndCheckout()
                    }
                }
        }

<<<<<<< HEAD
=======
        stage('Get most recent backend commit') {
            steps {
                getLastBackendRunCommit()
                echo("Last backend commit: ${LAST_BACKEND_COMMIT}")
            }
        }

>>>>>>> 193ab1b1d... VZ-10259 URL Trigger is not working as we expect (#6672)
        stage ('Run Backend Test Suite') {
            when {
                allOf {
                    expression { return runPipeline() }
<<<<<<< HEAD
=======
                    expression { !params.DRY_RUN }
>>>>>>> 193ab1b1d... VZ-10259 URL Trigger is not working as we expect (#6672)
                }
            }

            steps {
                script {
<<<<<<< HEAD
                    echo("Running backend suite with commit ${GIT_COMMIT_TO_USE}")
=======
                    echo("Running backend suite with commit ${SHORT_COMMIT_HASH}")
>>>>>>> 193ab1b1d... VZ-10259 URL Trigger is not working as we expect (#6672)
                    build job: "/verrazzano-backend-tests/${CLEAN_BRANCH_NAME}", wait: true
                }
            }
        }
    }
}

def cleanWorkspaceAndCheckout() {
    scmCheckout()
    def props = readProperties file: '.verrazzano-development-version'
    VERRAZZANO_DEV_VERSION = props['verrazzano-development-version']
    TIMESTAMP = sh(returnStdout: true, script: "date +%Y%m%d%H%M%S").trim()
    SHORT_COMMIT_HASH = sh(returnStdout: true, script: "git rev-parse --short=8 HEAD").trim()
    // update the description with some meaningful info
    currentBuild.description = SHORT_COMMIT_HASH + " : " + env.GIT_COMMIT
}

<<<<<<< HEAD
// Returns the last clean commit for the backends, or null if the commit file does not exist yet.
// - fails the pipeline if any error other than 404 is returned by the OCI CLI
def getLastCleanBackendCommit() {
    lastBackendCommitCommandOutput = sh (
        label: "Get last clean backend commit ID",
        script: "oci --region us-phoenix-1 os object get --namespace ${OCI_OS_NAMESPACE} -bn ${OCI_OS_BUCKET} --name ${CLEAN_BACKEND_OS_LOCATION} --file ${CLEAN_BACKEND_LOCATION} 2>&1 || true",
        returnStdout: true
        ).trim()
    echo "command out: ${lastBackendCommitCommandOutput}"
    if (lastBackendCommitCommandOutput.length() > 0) {
        // We can get warning messages here as well even when the command succeeded, so be more precise on the checking
        if (lastBackendCommitCommandOutput =~ /(.*)status(.*)\d{1,4}(.*)/) {
            // If we think we had a status: NNN, we ignore 404 and fail for others
            assert lastBackendCommitCommandOutput =~ /(.*)status(.*)404(.*)/ : "An unexpected error occurred getting last backend commit from ObjectStore: ${lastBackendCommitCommandOutput}"
        } else {
            // If we got here, we have some message that may or may not be an error. If we don't see the file, we assume it was an error
            sh """
                if [ ! -f ${CLEAN_BACKEND_LOCATION} ]; then
                    echo "An unexpected error occurred getting last backend commit from ObjectStore: ${lastBackendCommitCommandOutput}"
                    exit 1
                fi
            """
        }
    }
    // Get the commit ID for the last known clean pass of the Backend tests
    def cleanBackendsCommitProps = readProperties file: "${CLEAN_BACKEND_LOCATION}"
    return cleanBackendsCommitProps['git-commit']
}

// Returns the last run commit for the Backend, or null if the commit file does not exist yet.
// - fails the pipeline if any error other than 404 is returned by the OCI CLI
def getLastBackendRunCommit() {
    lastBackendCommitCommandOutput = sh (
        label: "Get last clean backend commit ID",
=======
// Returns the last run commit for the backend suite, or null if the commit file does not exist yet.
// - fails the pipeline if any error other than 404 is returned by the OCI CLI
def getLastBackendRunCommit() {
    lastBackendCommitCommandOutput = sh (
        label: "Get last clean backend suite commit ID",
>>>>>>> 193ab1b1d... VZ-10259 URL Trigger is not working as we expect (#6672)
        script: "oci --region us-phoenix-1 os object get --namespace ${OCI_OS_NAMESPACE} -bn ${OCI_OS_BUCKET} --name ${LAST_BACKEND_OS_LOCATION} --file ${LAST_BACKEND_LOCATION} 2>&1 || true",
        returnStdout: true
        ).trim()
    echo "command out: ${lastBackendCommitCommandOutput}"
    if (lastBackendCommitCommandOutput.length() > 0) {
        // We can get warning messages here as well even when the command succeeded, so be more precise on the checking
        if (lastBackendCommitCommandOutput =~ /(.*)status(.*)\d{1,4}(.*)/) {
            // If we think we had a status: NNN, we ignore 404 and fail for others
<<<<<<< HEAD
            assert lastBackendCommitCommandOutput =~ /(.*)status(.*)404(.*)/ : "An unexpected error occurred getting last backend commit from ObjectStore: ${lastBackendCommitCommandOutput}"
=======
            assert lastBackendCommitCommandOutput =~ /(.*)status(.*)404(.*)/ : "An unexpected error occurred getting last backend suite commit from ObjectStore: ${lastBackendCommitCommandOutput}"
>>>>>>> 193ab1b1d... VZ-10259 URL Trigger is not working as we expect (#6672)
        } else {
            // If we got here, we have some message that may or may not be an error. If we don't see the file, we assume it was an error
            sh """
                if [ ! -f ${LAST_BACKEND_LOCATION} ]; then
<<<<<<< HEAD
                    echo "An unexpected error occurred getting last backend run commit from ObjectStore: ${lastBackendCommitCommandOutput}"
=======
                    echo "An unexpected error occurred getting last backend suite run commit from ObjectStore: ${lastBackendCommitCommandOutput}"
>>>>>>> 193ab1b1d... VZ-10259 URL Trigger is not working as we expect (#6672)
                    exit 1
                fi
            """
        }
    }
<<<<<<< HEAD
    // Get the commit ID for the last known clean pass of the Backend tests
    def lastBackendCommitProps = readProperties file: "${LAST_BACKEND_LOCATION}"
    return lastBackendCommitProps['git-commit']
}

// Preliminary job checks and display updates
def preliminaryChecks() {
    // Get the last stable commit ID to pass the triggered tests
    def stableCommitProps = readProperties file: "${STABLE_COMMIT_LOCATION}"
    GIT_COMMIT_TO_USE = stableCommitProps['git-commit']
    echo "Last stable commit: ${GIT_COMMIT_TO_USE}"

    LAST_CLEAN_BACKEND_COMMIT=getLastCleanBackendCommit()
    echo "Last clean backend commit: ${LAST_CLEAN_BACKEND_COMMIT}"

    if (LAST_CLEAN_BACKEND_COMMIT == GIT_COMMIT_TO_USE) {
        backendTestsUpToDate = true
    } else {
        // Check if we are still at the same commit previously run (if so we know it wasn't clean and it failed in some way)
        LAST_BACKEND_RUN_COMMIT=getLastBackendRunCommit()
        if (LAST_BACKEND_RUN_COMMIT != null && LAST_BACKEND_RUN_COMMIT == GIT_COMMIT_TO_USE) {
            backendTestsUpToDateFailed = true
        }
    }
=======
    // Get the commit ID for the last known clean pass of the backend tests
    def lastBackendCommitProps = readProperties file: "${LAST_BACKEND_LOCATION}"
    LAST_BACKEND_COMMIT = lastBackendCommitProps['git-commit']
>>>>>>> 193ab1b1d... VZ-10259 URL Trigger is not working as we expect (#6672)
}

def scmCheckout() {
    echo "${NODE_LABELS}"
    echo "Specific GIT commit was not specified, use current head"
    def scmInfo = checkout([
        $class: 'GitSCM',
        branches: [[name: env.BRANCH_NAME]],
        doGenerateSubmoduleConfigurations: false,
        extensions: [],
        submoduleCfg: [],
        userRemoteConfigs: [[url: env.SCM_VERRAZZANO_GIT_URL]]])
    env.GIT_COMMIT = scmInfo.GIT_COMMIT
    env.GIT_BRANCH = scmInfo.GIT_BRANCH
    echo "SCM checkout of ${env.GIT_BRANCH} at ${env.GIT_COMMIT}"
}

<<<<<<< HEAD
// Checks all the conditions gating test execution and collates the result
def runPipeline() {
  return ! backendTestsUpToDate && ! backendTestsUpToDateFailed && ! params.DRY_RUN
=======
// Checks if the commit has changed since last run
def runPipeline() {
  return LAST_BACKEND_COMMIT != SHORT_COMMIT_HASH
>>>>>>> 193ab1b1d... VZ-10259 URL Trigger is not working as we expect (#6672)
}

def getCronSchedule() {
    if (env.BRANCH_NAME.equals("master")) {
        // scheduled for every 6 hours
<<<<<<< HEAD
        return "H */6 * * *"
    } else if (env.BRANCH_NAME.startsWith("release-")) {
        return "@daily"
=======
        return "0 */6 * * *"
    } else if (env.BRANCH_NAME.startsWith("release-")) {
        return "0 */6 * * *"
>>>>>>> 193ab1b1d... VZ-10259 URL Trigger is not working as we expect (#6672)
    }
    return ""
}