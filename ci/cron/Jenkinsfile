// Copyright (c) 2023, Oracle and/or its affiliates.
// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.

import groovy.transform.Field

@Field
def LAST_RUN_COMMIT = ""

// Non Fields
def branchSpecificSchedule = getCronSchedule()

pipeline {
    options {
        timeout(time: 12, unit: 'HOURS')
        skipDefaultCheckout true
        disableConcurrentBuilds()
        timestamps ()
    }

    agent {
       docker {
            image "${RUNNER_DOCKER_IMAGE}"
            args "${RUNNER_DOCKER_ARGS}"
            registryUrl "${RUNNER_DOCKER_REGISTRY_URL}"
            registryCredentialsId 'ocir-pull-and-push-account'
            label "${agentLabel}"
        }
    }

    triggers {
        cron(branchSpecificSchedule)
    }

    parameters {
            booleanParam (description: 'Skip test execution (for debugging)', name: 'DRY_RUN', defaultValue: false)
        }

    environment {
        OCIR_SCAN_COMPARTMENT = credentials('ocir-scan-compartment')
        OCIR_SCAN_TARGET = credentials('ocir-scan-target')
        OCIR_SCAN_REGISTRY = credentials('ocir-scan-registry')
        OCIR_SCAN_REPOSITORY_PATH = credentials('ocir-scan-repository-path')
        DOCKER_SCAN_CREDS = credentials('v8odev-ocir')
        DOCKER_CREDS = credentials('github-packages-credentials-rw')
        DOCKER_REPO = 'ghcr.io'

        OCI_CLI_AUTH="instance_principal"
        OCI_OS_NAMESPACE = credentials('oci-os-namespace')
        OCI_OS_BUCKET="verrazzano-builds"
        OCI_OS_COMMIT_BUCKET="verrazzano-builds-by-commit"
        CLEAN_BRANCH_NAME = "${env.BRANCH_NAME.replace("/", "%2F")}"
        SERVICE_KEY = credentials('PAGERDUTY_SERVICE_KEY')

        STABLE_COMMIT_OS_LOCATION = "${CLEAN_BRANCH_NAME}/last-stable-commit.txt"
        LAST_PERIODIC_OS_LOCATION = "${CLEAN_BRANCH_NAME}/last-periodic-run-commit.txt"
        CLEAN_PERIODIC_OS_LOCATION = "${CLEAN_BRANCH_NAME}-last-clean-periodic-test/verrazzano_periodic-commit.txt"

        STABLE_COMMIT_LOCATION = "${WORKSPACE}/last-stable-commit.txt"
        LAST_PERIODIC_LOCATION = "${WORKSPACE}/last-periodic-run-commit.txt"
        CLEAN_PERIODIC_LOCATION = "${WORKSPACE}/last-clean-periodic-commit.txt"

        OCI_OS_REGION="us-phoenix-1"

        PIPELINE_OWNERS = credentials('periodictests-owners')
    }

    stages {
    stage('Clean workspace and checkout') {
                steps {
                    script {
                        cleanWorkspaceAndCheckout()
                    }
                }
            }

        stage('Get last commit ran') {
            steps {
                script {
                    try {
                        LAST_RUN_COMMIT = params.LAST_RUN_COMMIT
                        echo("Last run commit: ${LAST_RUN_COMMIT}")
                    }
                    catch (Exception e) {
                        echo("Could not read variable from parameters, assuming this is the first run of the pipeline. Exception: ${e}")
                        LAST_RUN_COMMIT = ""
                    }
                }
            }
        }

        stage ('Run Periodic Test Suite') {
            when {
                allOf {
                    expression { return runPipeline() }
                    expression { !params.DRY_RUN }
                }
            }

            steps {
                script {
                    LAST_RUN_COMMIT = SHORT_COMMIT_HASH
                    echo("Running periodics with commit ${LAST_RUN_COMMIT}")
                    //build job: "/verrazzano-periodic-triggered-tests/${CLEAN_BRANCH_NAME}", wait: true
                }
            }
        }

        stage('Store last commit ran') {
            steps {
                script {
                    echo("Storing last run commit as ${LAST_RUN_COMMIT}")
//                     properties:([
//                         parameters:([
//                             string(defaultValue: "${LAST_RUN_COMMIT}", description: 'Variable description', name: 'LAST_RUN_COMMIT', trim: true)
//                         ])
//                     ])
                }
            }
        }
    }
}

def cleanWorkspaceAndCheckout() {
    scmCheckout()
    def props = readProperties file: '.verrazzano-development-version'
    VERRAZZANO_DEV_VERSION = props['verrazzano-development-version']
    TIMESTAMP = sh(returnStdout: true, script: "date +%Y%m%d%H%M%S").trim()
    SHORT_COMMIT_HASH = sh(returnStdout: true, script: "git rev-parse --short=8 HEAD").trim()
    // update the description with some meaningful info
    currentBuild.description = SHORT_COMMIT_HASH + " : " + env.GIT_COMMIT
}

def scmCheckout() {
    echo "${NODE_LABELS}"
    echo "Specific GIT commit was not specified, use current head"
    def scmInfo = checkout([
        $class: 'GitSCM',
        branches: [[name: env.BRANCH_NAME]],
        doGenerateSubmoduleConfigurations: false,
        extensions: [],
        submoduleCfg: [],
        userRemoteConfigs: [[url: env.SCM_VERRAZZANO_GIT_URL]]])
    env.GIT_COMMIT = scmInfo.GIT_COMMIT
    env.GIT_BRANCH = scmInfo.GIT_BRANCH
    echo "SCM checkout of ${env.GIT_BRANCH} at ${env.GIT_COMMIT}"
}

// Checks if the commit has changed since last run
def runPipeline() {
  return LAST_RUN_COMMIT != SHORT_COMMIT_HASH
}

def getCronSchedule() {
    if (env.BRANCH_NAME.equals("master")) {
        // scheduled for every 6 hours
        return "0 */6 * * *"
    } else if (env.BRANCH_NAME.startsWith("release-")) {
        return "0 */6 * * *"
    }
    return ""
}