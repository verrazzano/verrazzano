// Copyright (c) 2023, Oracle and/or its affiliates.
// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.

pipeline {
    options {
        timeout(time: 1, unit: 'HOURS')
        skipDefaultCheckout true
        timestamps()
    }

    agent {
        label "cli-rpm-${params.BUILD_OS}-${params.BUILD_PLAT}"
    }

    parameters {
        string(name: 'GIT_COMMIT_TO_USE',
                defaultValue: 'NONE',
                description: 'This is the full git commit hash from the source build to be used for all jobs',
                trim: true)
        choice(name: 'BUILD_PLAT',
                description: 'Platform architecture',
                // 1st choice is the default value
                choices: ["amd64", "arm64"])
        choice(name: 'BUILD_OS',
                description: 'Build os. Eg: ol8',
                // 1st choice is the default value
                choices: ["ol8", "ol9"])
    }

    environment {
        GOPATH = '/home/opc/go'
        GO_REPO_PATH = "${GOPATH}/src/github.com/verrazzano"

        OCI_CLI_AUTH = "instance_principal"
        OCI_OS_NAMESPACE = credentials('oci-os-namespace')
        OCI_OS_BUCKET = "verrazzano-builds"
        OCI_OS_COMMIT_BUCKET = "verrazzano-builds-by-commit"
    }

    stages {
        stage('Clean workspace and checkout') {
            steps {
                sh """
                    echo "${NODE_LABELS}"
                """

                script {
                    if (params.GIT_COMMIT_TO_USE == "NONE") {
                        echo "Specific GIT commit was not specified, use current head"
                        def scmInfo = checkout scm
                        env.GIT_COMMIT = scmInfo.GIT_COMMIT
                        env.GIT_BRANCH = scmInfo.GIT_BRANCH
                    } else {
                        echo "SCM checkout of ${params.GIT_COMMIT_TO_USE}"
                        def scmInfo = checkout([
                                $class                           : 'GitSCM',
                                branches                         : [[name: params.GIT_COMMIT_TO_USE]],
                                doGenerateSubmoduleConfigurations: false,
                                extensions                       : [],
                                submoduleCfg                     : [],
                                userRemoteConfigs                : [[url: env.SCM_VERRAZZANO_GIT_URL]]])
                        env.GIT_COMMIT = scmInfo.GIT_COMMIT
                        env.GIT_BRANCH = scmInfo.GIT_BRANCH
                        // If the commit we were handed is not what the SCM says we are using, fail
                        if (!env.GIT_COMMIT.equals(params.GIT_COMMIT_TO_USE)) {
                            echo "SCM didn't checkout the commit we expected. Expected: ${params.GIT_COMMIT_TO_USE}, Found: ${scmInfo.GIT_COMMIT}"
                            exit 1
                        }
                    }
                    echo "SCM checkout of ${env.GIT_BRANCH} at ${env.GIT_COMMIT}"
                }
                moveContentToGoRepoPath()

                script {
                    env.MODULE_VERSION = sh(returnStdout: true, script: "date +%Y%m%d%H%M%S").trim()
                    SHORT_COMMIT_HASH = sh(returnStdout: true, script: "git rev-parse --short=8 HEAD").trim()
                }
            }
        }


        stage('Create Verrazzano CLI source tar file') {
            steps {
                createCliRPMSource("${env.GO_REPO_PATH}")
            }
        }

        stage('Prepare CLI RPM environment') {
            steps {
                sh """
                    ${WORKSPACE}/ci/scripts/prepare_vz_cli_rpm_pipeline.sh
                """
            }
        }

        stage('Build RPM') {
            steps {
                script {
                    env.MODULE_STREAM_VERSION = sh(returnStdout: true, script: "cat \"${GO_REPO_PATH}/verrazzano/tools/vz/out/verrazzano-cli-stream.yaml\"|grep \"stream:\"|cut -d ' ' -f 4").trim()
                }
                invokeMBS()
            }
            post {
                always {
                    script {
                        // TODO: Point module build directory to a directory under WORKSPACE while invoking module build service.
                        MODULE_REPO_DIR = sh(returnStdout: true, script: "sudo find /root/modulebuild/builds -name module-verrazzano-cli-${MODULE_STREAM_VERSION}-*${MODULE_VERSION}").trim()
                        archiveMBSLogs()
                        env.MODULE_REPO_ARCHIVE_DIR = sh(returnStdout: true, script: "find ${WORKSPACE}/modulerepo -name module-verrazzano-cli-${MODULE_STREAM_VERSION}-*${MODULE_VERSION}").trim()
                    }
                }
            }
        }

        stage('Test RPM') {
            environment {
                BUILD_OS = "${params.BUILD_OS}"
            }
            steps {
                sh """
                    ${WORKSPACE}/ci/scripts/test_vz_cli_rpm.sh
                """
            }
        }

        stage('Save CLI binary and module stream repo') {
            environment {
                BUILD_OS = "${params.BUILD_OS}"
                BUILD_PLAT = "${params.BUILD_PLAT}"
            }
            steps {
                sh """
                    ${WORKSPACE}/ci/scripts/save_cli_from_rpm.sh ${env.BRANCH_NAME} ${SHORT_COMMIT_HASH}
                """
            }
        }
    }
    post {
        cleanup {
            deleteDir()
        }
    }
}

// Called in Stage Clean workspace and checkout steps
def moveContentToGoRepoPath() {
    sh """
        rm -rf ${GO_REPO_PATH}/verrazzano
        mkdir -p ${GO_REPO_PATH}/verrazzano
        tar cf - . | (cd ${GO_REPO_PATH}/verrazzano/ ; tar xf -)
    """
}

def createCliRPMSource(GO_REPO_PATH) {
    sh """
        cd ${GO_REPO_PATH}/verrazzano/tools/vz
        make cli-rpm-source 
    """
}

def archiveMBSLogs() {
    sh """
        mkdir -p ${WORKSPACE}/modulerepo
        sudo mv ${MODULE_REPO_DIR} ${WORKSPACE}/modulerepo
        sudo chown -R opc:opc ${WORKSPACE}/modulerepo
    """
    archiveArtifacts artifacts: '**/module-verrazzano-cli*/**', allowEmptyArchive: true
}

def invokeMBS() {
    sh """
        ## Invoke MBS to build RPM
        cat "${GO_REPO_PATH}/verrazzano/tools/vz/out/verrazzano-cli-stream.yaml"
        sudo mbs-manager build_module_locally --offline --stream "${MODULE_STREAM_VERSION}" --file "${GO_REPO_PATH}/verrazzano/tools/vz/out/verrazzano-cli-stream.yaml"
    """
}
