// Copyright (c) 2023, Oracle and/or its affiliates.
// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.

properties([[$class: 'ThrottleJobProperty', categories: [], limitOneJobWithMatchingParams: false, maxConcurrentPerNode: 1,
    maxConcurrentTotal: 1, paramsToUseForLimit: '', throttleEnabled: true, throttleOption: 'project'],
    [$class: 'BuildDiscarderProperty',    strategy: [$class: 'LogRotator', numToKeepStr: '10']],
    pipelineTriggers([cron('0 11 * * *')]),])

pipeline {
    options {
        skipDefaultCheckout true
        timestamps ()
    }

    agent {
        docker {
            image "${RUNNER_DOCKER_IMAGE}"
            args "${RUNNER_DOCKER_ARGS}"
            registryUrl "${RUNNER_DOCKER_REGISTRY_URL}"
            label 'internal'
        }
    }

    parameters {
        choice (name: 'LRE_CLUSTER',
                description: 'Which LRE cluster to run the test against',
                // 1st choice is the default value
                // Currently, dev is the only option
                choices: [ "dev" ])
        booleanParam (name: 'UPGRADE_VZ',
                description: 'If true, upgrade Verrazzano to the most recent stable commit',
                defaultValue: true)
        booleanParam (name: 'RUN_TESTS',
                description: 'If true, run tests to verify the status of the cluster',
                defaultValue: true)
    }

    environment {
        LRE_CLUSTER_ENV = "${params.LRE_CLUSTER}"

        OCI_OS_NAMESPACE = credentials('oci-os-namespace')
        OCI_OS_BUCKET = "verrazzano-builds"
        OCI_OS_COMMIT_BUCKET = "verrazzano-builds-by-commit"

        OCI_CLI_TENANCY = credentials('oci-dev-tenancy')
        OCI_CLI_USER = credentials('oci-dev-user-ocid')
        OCI_CLI_FINGERPRINT = credentials('oci-dev-api-key-fingerprint')
        OCI_CLI_KEY_FILE = credentials('oci-dev-api-key-file')
        OCI_CLI_REGION = "us-ashburn-1"

        STABLE_COMMIT_OS_LOCATION = "master/last-stable-commit.txt"
        STABLE_COMMIT_LOCATION = "${WORKSPACE}/last-stable-commit.txt"
        OPERATOR_YAML_LOCATION = "${WORKSPACE}/operator.yaml"

        DOCKER_CREDS = credentials('github-packages-credentials-rw')
        DOCKER_REPO = 'ghcr.io'
        NETRC_FILE = credentials('netrc')
        GOPATH = '/home/opc/go'
        GO_REPO_PATH = "${GOPATH}/src/github.com/verrazzano"
        TEST_DUMP_ROOT="${WORKSPACE}/test-cluster-snapshots"

        DEV_LRE_SUSPECT_LIST = credentials('dev_lre_suspect_list')
        PIPELINE_OWNERS = credentials('lretests-owners')
        DEV_LRE_KUBECONFIG = credentials('dev-lre-kubeconfig')
        KUBECONFIG = "${WORKSPACE}/.kube/config"
        VZ_CLI_TARGZ="vz-linux-amd64.tar.gz"
        TEST_ENV = "LRE"

        // Environment variable for Verrazzano CLI executable
        VZ_COMMAND="${GO_REPO_PATH}/vz"
    }

    stages {
        stage('Clean workspace and checkout') {
            steps {
                sh """
                    echo "${NODE_LABELS}"
                """

                script {
                    def scmInfo = checkout scm
                    env.GIT_BRANCH = scmInfo.GIT_BRANCH
                }
                sh """
                    cp -f "${NETRC_FILE}" $HOME/.netrc
                    chmod 600 $HOME/.netrc
                """

                script {
                    try {
                        sh """
                            echo "${DOCKER_CREDS_PSW}" | docker login ${env.DOCKER_REPO} -u ${DOCKER_CREDS_USR} --password-stdin
                        """
                    } catch(error) {
                        echo "docker login failed, retrying after sleep"
                        retry(4) {
                            sleep(30)
                            sh """
                                echo "${DOCKER_CREDS_PSW}" | docker login ${env.DOCKER_REPO} -u ${DOCKER_CREDS_USR} --password-stdin
                            """
                        }
                    }
                }
                sh """
                    rm -rf ${GO_REPO_PATH}/verrazzano
                    mkdir -p ${GO_REPO_PATH}/verrazzano
                    tar cf - . | (cd ${GO_REPO_PATH}/verrazzano/ ; tar xf -)
                """
                sh """
                    echo "Downloading VZ CLI from object storage, lre is special only get latest one from master"
                    oci --region us-phoenix-1 os object get --namespace ${OCI_OS_NAMESPACE} -bn ${OCI_OS_BUCKET} --name master/${VZ_CLI_TARGZ} --file ${VZ_CLI_TARGZ}
                    tar xzf ${VZ_CLI_TARGZ} -C ${GO_REPO_PATH}
                    ${VZ_COMMAND} version
                """
            }
        }

        stage('Set kubeconfig') {
            steps {
                script {
                    sh """
                        mkdir -p ${WORKSPACE}/.kube
                        rm -rf ${KUBECONFIG}
                        cp ${DEV_LRE_KUBECONFIG} ${KUBECONFIG}
                        cat ${KUBECONFIG}
                    """
                }
            }
        }

        stage ("Run kubectl commands") {
            steps {
                script {
                    sh """
                        kubectl get nodes
                        kubectl get pods -A
                        kubectl get vz -A
                    """
                }
            }
        }

        stage("Create OCI config file") {
            when {
                expression {
                    return params.UPGRADE_VZ
                }
            }
            steps {
                script{
                    sh """
                        mkdir -p ~/.oci
                        cp ${OCI_CLI_KEY_FILE} ~/.oci
                        rm -rf ~/.oci/config
                        {
                          echo '[DEFAULT]'
                          echo 'user=${OCI_CLI_USER}'
                          echo 'fingerprint=${OCI_CLI_FINGERPRINT}'
                          echo 'tenancy=${OCI_CLI_TENANCY}'
                          echo 'region=${OCI_CLI_REGION}'
                          echo 'key_file=~/.oci/alm.pem'
                        } >> ~/.oci/config
                        oci setup repair-file-permissions --file /home/opc/.oci/config
                    """
                }
            }
        }

        stage('Upgrade to stable commit') {
            when {
                expression {
                    return params.UPGRADE_VZ
                }
            }
            steps {
                script {
                    // Get the last stable commit ID that passed the triggered tests
                    sh """
                        oci --region us-phoenix-1 os object get --namespace ${OCI_OS_NAMESPACE} -bn ${OCI_OS_BUCKET} --name ${STABLE_COMMIT_OS_LOCATION} --file ${STABLE_COMMIT_LOCATION}
                    """
                    def stableCommitProps = readProperties file: "${STABLE_COMMIT_LOCATION}"
                    GIT_COMMIT_TO_USE = stableCommitProps['git-commit']
                    SHORT_COMMIT_HASH = sh(returnStdout: true, script: "git rev-parse --short=8 ${GIT_COMMIT_TO_USE}").trim()
                    echo "Last stable short commit: ${SHORT_COMMIT_HASH}"

                    // Get the running version of Verrazzano
                    RUNNING_VERSION = sh(returnStdout: true, script: "kubectl get verrazzano -A -o jsonpath='{.items[0].status.version}'").trim()
                    echo "Current version of Verrazzano: ${RUNNING_VERSION}"

                    // Get the version we are upgrading to
                    VERRAZZANO_UPGRADE_VERSION = sh(returnStdout: true, script: "oci --region us-phoenix-1 os object get --namespace ${OCI_OS_NAMESPACE} -bn ${OCI_OS_COMMIT_BUCKET} --name ephemeral/master/${SHORT_COMMIT_HASH}/generated-verrazzano-bom.json --file - | jq -r '.version'").trim()
                    echo "Version to upgrade to: ${VERRAZZANO_UPGRADE_VERSION}"

                    // Only do an upgrade if the running version and version to upgrade are different.
                    if (VERRAZZANO_UPGRADE_VERSION != RUNNING_VERSION)  {
                        sh """
                            echo "Downloading operator.yaml from object storage"
                            oci --region us-phoenix-1 os object get --namespace ${OCI_OS_NAMESPACE} -bn ${OCI_OS_COMMIT_BUCKET} --name ephemeral/master/${SHORT_COMMIT_HASH}/operator.yaml --file ${OPERATOR_YAML_LOCATION}
                        """

                        downloadCLI()

                        sh """
                            echo "Upgrading the Verrazzano installation to version" ${VERRAZZANO_UPGRADE_VERSION}
                            ${GO_REPO_PATH}/vz upgrade --version ${VERRAZZANO_UPGRADE_VERSION} --manifests ${OPERATOR_YAML_LOCATION} --timeout 45m
                        """
                    } else {
                        echo "No upgrade is needed.  Verrazzano is already at the expected version."
                    }
                }
            }
            post {
                failure {
                    dumpK8sCluster('lre-upgrade-failure-cluster-snapshot')
                }
            }
        }

        stage('Verify Install') {
            when {
               expression {
                   return params.RUN_TESTS
               }
            }
            steps {
                runGinkgoRandomize('verify-install')
            }
            post {
                always {
                    archiveArtifacts artifacts: '**/coverage.html,**/logs/*,**/test-cluster-snapshots/**', allowEmptyArchive: true
                    junit testResults: '**/*test-result.xml', allowEmptyResults: true
                }
                failure {
                    dumpK8sCluster('lre-verify-install-failure-cluster-snapshot')
                }
            }
        }

        stage('Run Acceptance Tests Infra') {
            when {
               expression {
                   return params.RUN_TESTS
               }
            }
            parallel {
                stage('verify-scripts') {
                    steps {
                        runGinkgoRandomize('scripts', "${KUBECONFIG}")
                    }
                }
                stage('verify-infra restapi') {
                    steps {
                        runGinkgoRandomize('verify-infra/restapi')
                    }
                }
                stage('verify-infra oam') {
                    steps {
                        runGinkgoRandomize('verify-infra/oam')
                    }
                }

                stage('verify-infra vmi') {
                    steps {
                        runGinkgoRandomize('verify-infra/vmi')
                    }
                }

                stage('system component metrics') {
                    steps {
                        runGinkgo('metrics/syscomponents')
                    }
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: '**/coverage.html,**/logs/*,**/test-cluster-snapshots/**', allowEmptyArchive: true
                    junit testResults: '**/*test-result.xml', allowEmptyResults: true
                }
                failure {
                    dumpK8sCluster('lre-verify-infra-failure-cluster-snapshot')
                }
            }
        }

        stage('examples helidon') {
            when {
               expression {
                   return params.RUN_TESTS
               }
            }
            steps {
                script {
                    runGinkgoAppTest('examples/helidon', "hello-helidon", "${TEST_DUMP_ROOT}/examples-helidon", 'true', 'true')
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: '**/coverage.html,**/logs/*,**/test-cluster-snapshots/**', allowEmptyArchive: true
                    junit testResults: '**/*test-result.xml', allowEmptyResults: true
                }
                failure {
                    dumpK8sCluster('lre-hello-helidon-failure-cluster-snapshot')
                }
            }
        }

    }
    post {
        failure {
            script {
                if (env.GIT_BRANCH == "master") {
                    slackSend ( channel: "$SLACK_ALERT_CHANNEL", message: "Job Failed - \"${env.JOB_NAME}\" build: ${env.BUILD_NUMBER}\n\nView the log at:\n ${env.BUILD_URL}\n\nBlue Ocean:\n${env.RUN_DISPLAY_URL}\n\nSuspects:\n${DEV_LRE_SUSPECT_LIST} ${PIPELINE_OWNERS}\n" )
                }
            }
        }
    }
}

def downloadCLI() {
    script {
        sh """
            echo "Downloading vz CLI from object storage"
            oci --region us-phoenix-1 os object get --namespace ${OCI_OS_NAMESPACE} -bn ${OCI_OS_COMMIT_BUCKET} --name ephemeral/master/${SHORT_COMMIT_HASH}/${VZ_CLI_TARGZ} --file ${VZ_CLI_TARGZ}
            tar xzf ${VZ_CLI_TARGZ} -C ${GO_REPO_PATH}
            ${GO_REPO_PATH}/vz version
        """
    }
}

def runGinkgoRandomize(testSuitePath, kubeconfig = '') {
    catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
        sh """
            if [ ! -z "${kubeConfig}" ]; then
                export KUBECONFIG="${kubeConfig}"
            fi
            cd ${GO_REPO_PATH}/verrazzano/tests/e2e
            ginkgo -p --randomize-all -v --keep-going --no-color ${testSuitePath}/...
        """
    }
}

def runGinkgo(testSuitePath) {
    catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
        sh """
            cd ${GO_REPO_PATH}/verrazzano/tests/e2e
            ginkgo -v --keep-going --no-color ${testSuitePath}/...
        """
    }
}

def runGinkgoAppTest(testSuitePath, namespace, dumpDir='', skipDeploy='false', skipUndeploy='false') {
    catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
        sh """
            if [ ! -z "${dumpDir}" ]; then
                export DUMP_DIRECTORY=${dumpDir}
            fi
            cd ${GO_REPO_PATH}/verrazzano/tests/e2e
            ginkgo -v --keep-going --no-color ${testSuitePath}/... -- --skipDeploy=${skipDeploy} --skipUndeploy=${skipUndeploy} --namespace=${namespace}
        """
    }
}

def dumpK8sCluster(dumpDirectory) {
    sh """
        ${GO_REPO_PATH}/verrazzano/ci/scripts/capture_cluster_snapshot.sh ${dumpDirectory}
    """
}
