// Copyright (c) 2022, Oracle and/or its affiliates.
// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.

properties([[$class: 'ThrottleJobProperty', categories: [], limitOneJobWithMatchingParams: false, maxConcurrentPerNode: 1,
    maxConcurrentTotal: 1, paramsToUseForLimit: '', throttleEnabled: true, throttleOption: 'project'],
    [$class: 'BuildDiscarderProperty',    strategy: [$class: 'LogRotator', numToKeepStr: '10']],
    pipelineTriggers([cron('0 11 * * *')]),])

pipeline {
    options {
        skipDefaultCheckout true
        timestamps ()
    }

    agent {
        docker {
            image "${RUNNER_DOCKER_IMAGE}"
            args "${RUNNER_DOCKER_ARGS}"
            registryUrl "${RUNNER_DOCKER_REGISTRY_URL}"
            label 'internal'
        }
    }

    parameters {
        choice (name: 'LRE_CLUSTER',
                description: 'Which LRE cluster to run the test against',
                // 1st choice is the default value
                // Currently, dev is the only option
                choices: [ "dev" ])
    }

    environment {
        LRE_CLUSTER_ENV = "${params.LRE_CLUSTER}"

        OCI_OS_NAMESPACE = credentials('oci-os-namespace')
        OCI_OS_BUCKET="verrazzano-builds"
        OCI_OS_COMMIT_BUCKET="verrazzano-builds-by-commit"
        OCI_CLI_TENANCY = credentials('oci-dev-tenancy')
        OCI_CLI_USER = credentials('oci-dev-user-ocid')
        OCI_CLI_FINGERPRINT = credentials('oci-dev-api-key-fingerprint')
        OCI_CLI_KEY_FILE = credentials('oci-dev-api-key-file')
        OCI_CLI_REGION = "us-ashburn-1"

        STABLE_COMMIT_OS_LOCATION = "master/last-stable-commit.txt"
        STABLE_COMMIT_LOCATION = "${WORKSPACE}/last-stable-commit.txt"
        OPERATOR_YAML_LOCATION = "${WORKSPACE}/operator.yaml"

        DOCKER_CREDS = credentials('github-packages-credentials-rw')
        DOCKER_REPO = 'ghcr.io'
        NETRC_FILE = credentials('netrc')
        GOPATH = '/home/opc/go'
        GO_REPO_PATH = "${GOPATH}/src/github.com/verrazzano"

        DEV_LRE_KUBECONFIG = credentials('dev-lre-kubeconfig')
        KUBECONFIG = "${WORKSPACE}/.kube/config"
        VZ_CLI_TARGZ="vz-linux-amd64.tar.gz"
    }

    stages {
        stage('Clean workspace and checkout') {
            steps {
                sh """
                    echo "${NODE_LABELS}"
                """

                script {
                    checkout scm
                }
                sh """
                    cp -f "${NETRC_FILE}" $HOME/.netrc
                    chmod 600 $HOME/.netrc
                """

                script {
                    try {
                        sh """
                            echo "${DOCKER_CREDS_PSW}" | docker login ${env.DOCKER_REPO} -u ${DOCKER_CREDS_USR} --password-stdin
                        """
                    } catch(error) {
                        echo "docker login failed, retrying after sleep"
                        retry(4) {
                            sleep(30)
                            sh """
                                echo "${DOCKER_CREDS_PSW}" | docker login ${env.DOCKER_REPO} -u ${DOCKER_CREDS_USR} --password-stdin
                            """
                        }
                    }
                }
                sh """
                    rm -rf ${GO_REPO_PATH}/verrazzano
                    mkdir -p ${GO_REPO_PATH}/verrazzano
                    tar cf - . | (cd ${GO_REPO_PATH}/verrazzano/ ; tar xf -)
                """
            }
        }

        stage('Set kubeconfig') {
            steps {
                script {
                    sh """
                        mkdir -p ${WORKSPACE}/.kube
                        cp ${DEV_LRE_KUBECONFIG} ${KUBECONFIG}
                        cat ${KUBECONFIG}
                    """
                }
            }
        }

        stage ("Run kubectl commands") {
            steps {
                script {
                    sh """
                        kubectl get nodes
                        kubectl get pods -A
                        kubectl get vz -A
                    """
                }
            }
        }

        stage("Create OCI config file") {
            steps {
                script{
                    sh """
                        mkdir -p ~/.oci
                        cp ${OCI_CLI_KEY_FILE} ~/.oci
                        rm -rf ~/.oci/config
                        {
                          echo '[DEFAULT]'
                          echo 'user=${OCI_CLI_USER}'
                          echo 'fingerprint=${OCI_CLI_FINGERPRINT}'
                          echo 'tenancy=${OCI_CLI_TENANCY}'
                          echo 'region=${OCI_CLI_REGION}'
                          echo 'key_file=~/.oci/alm.pem'
                        } >> ~/.oci/config
                        oci setup repair-file-permissions --file /home/opc/.oci/config
                    """
                }
            }
       }

       stage('Upgrade to stable commit') {
            steps {
                script {
                    // Get the last stable commit ID that passed the triggered tests
                    sh """
                        oci --region us-phoenix-1 os object get --namespace ${OCI_OS_NAMESPACE} -bn ${OCI_OS_BUCKET} --name ${STABLE_COMMIT_OS_LOCATION} --file ${STABLE_COMMIT_LOCATION}
                    """
                    def stableCommitProps = readProperties file: "${STABLE_COMMIT_LOCATION}"
                    GIT_COMMIT_TO_USE = stableCommitProps['git-commit']
                    SHORT_COMMIT_HASH = sh(returnStdout: true, script: "git rev-parse --short=8 ${GIT_COMMIT_TO_USE}").trim()
                    echo "Last stable short commit: ${SHORT_COMMIT_HASH}"

                    // Get the running version of Verrazzano
                    RUNNING_VERSION = sh(returnStdout: true, script: "kubectl get verrazzano -A -o jsonpath='{.items[0].status.version}'").trim()
                    echo "Current version of Verrazzano: ${RUNNING_VERSION}"

                    // Get the version we are upgrading to
                    VERRAZZANO_UPGRADE_VERSION = sh(returnStdout: true, script: "oci --region us-phoenix-1 os object get --namespace ${OCI_OS_NAMESPACE} -bn ${OCI_OS_COMMIT_BUCKET} --name ephemeral/master/${SHORT_COMMIT_HASH}/generated-verrazzano-bom.json --file - | jq -r '.version'").trim()
                    echo "Version to upgrade to: ${VERRAZZANO_UPGRADE_VERSION}"

                    // Only do an upgrade if the running version and version to upgrade are different.
                    if (VERRAZZANO_UPGRADE_VERSION != RUNNING_VERSION)  {
                        sh """
                            echo "Downloading operator.yaml from object storage"
                            oci --region us-phoenix-1 os object get --namespace ${OCI_OS_NAMESPACE} -bn ${OCI_OS_COMMIT_BUCKET} --name ephemeral/master/${SHORT_COMMIT_HASH}/operator.yaml --file ${OPERATOR_YAML_LOCATION}
                        """

                        downloadCLI()

                        sh """
                            echo "Upgrading the Verrazzano installation to version" ${VERRAZZANO_UPGRADE_VERSION}
                            ${GO_REPO_PATH}/vz upgrade --version ${VERRAZZANO_UPGRADE_VERSION} --operator-file ${OPERATOR_YAML_LOCATION}
                        """
                    } else {
                        echo "No upgrade is needed.  Verrazzano is already at the expected version."
                    }
                }
            }
       }

    }
    post {
        cleanup {
            emitJobMetrics()
        }
    }
}

def downloadCLI() {
    script {
        sh """
            echo "Downloading vz CLI from object storage"
            oci --region us-phoenix-1 os object get --namespace ${OCI_OS_NAMESPACE} -bn ${OCI_OS_COMMIT_BUCKET} --name ephemeral/master/${SHORT_COMMIT_HASH}/${VZ_CLI_TARGZ} --file ${VZ_CLI_TARGZ}
            tar xzf ${VZ_CLI_TARGZ} -C ${GO_REPO_PATH}
            ${GO_REPO_PATH}/vz version
        """
    }
}

def runGinkgoRandomize(testSuitePath) {
    catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
        sh """
            cd ${GO_REPO_PATH}/verrazzano/tests/e2e
            ginkgo -p --randomize-all -v --keep-going --no-color ${testSuitePath}/...
        """
    }
}

def runGinkgo(testSuitePath) {
    catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
        sh """
            cd ${GO_REPO_PATH}/verrazzano/tests/e2e
            ginkgo -v --keep-going --no-color ${testSuitePath}/...
        """
    }
}

def emitJobMetrics() {
    env.JOB_STATUS = "${currentBuild.currentResult}".trim()
    long duration = "${currentBuild.duration}" as long;
    env.DURATION = duration
    long timeInMillis = "${currentBuild.timeInMillis}" as long;
    long startTimeInMillis = "${currentBuild.startTimeInMillis}" as long;
    env.TIME_WAITING = startTimeInMillis-timeInMillis
    runGinkgoRandomize('jobmetrics')
}
