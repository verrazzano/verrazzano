// Copyright (c) 2022, Oracle and/or its affiliates.
// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.

pipeline {
    options {
        skipDefaultCheckout true
        timestamps ()
    }

    agent {
        docker {
            image "${RUNNER_DOCKER_IMAGE}"
            args "${RUNNER_DOCKER_ARGS}"
            registryUrl "${RUNNER_DOCKER_REGISTRY_URL}"
            label 'internal'
        }
    }

    environment {
        TEST_ENV = "LRE"
        DOCKER_CREDS = credentials('github-packages-credentials-rw')
        DOCKER_EMAIL = credentials('github-packages-email')
        DOCKER_REPO = 'ghcr.io'
        DOCKER_NAMESPACE = 'verrazzano'
        NETRC_FILE = credentials('netrc')
        OCR_CREDS = credentials('ocr-pull-and-push-account')
        OCR_REPO = 'container-registry.oracle.com'
        IMAGE_PULL_SECRET = 'verrazzano-container-registry'
        GOPATH = '/home/opc/go'
        GO_REPO_PATH = "${GOPATH}/src/github.com/verrazzano"
        dev_lre_compartment_id = credentials('dev-lre-compartment-id')
        dev2_lre_compartment_id = credentials('dev2-lre-compartment-id')
        dev2_lre_cluster_id = credentials('dev2-lre-cluster-id')
        dev_lre_bastion_ip = credentials('dev-lre-bastion-ip')
        OCI_CLI_REGION = "us-ashburn-1"
        KUBECONFIG = "${WORKSPACE}/.kube/config"
        ssh_public_key_path = "${WORKSPACE}/.ssh/id_rsa.pub"
        ssh_private_key_path = "${WORKSPACE}/.ssh/id_rsa"

        OCI_CLI_AUTH="api_key"
        OCI_CLI_TENANCY = credentials('oci-dev-tenancy')
        OCI_CLI_USER = credentials('oci-dev-user-ocid')
        OCI_CLI_FINGERPRINT = credentials('oci-dev-api-key-fingerprint')
        OCI_CLI_KEY_FILE = credentials('oci-dev-api-key-file')
        NO_PROXY = ".nip.io"

	WEBLOGIC_PSW = credentials('weblogic-example-domain-password') // Needed by ToDoList example test
        DATABASE_PSW = credentials('todo-mysql-password') // Needed by ToDoList example test
    }

    stages {
        stage('Clean workspace and checkout') {
            steps {
                sh """
                    echo "${NODE_LABELS}"
                """

                script {
                    checkout scm
                }
                sh """
                    cp -f "${NETRC_FILE}" $HOME/.netrc
                    chmod 600 $HOME/.netrc
                """

                script {
                    try {
                        sh """
                    echo "${DOCKER_CREDS_PSW}" | docker login ${env.DOCKER_REPO} -u ${DOCKER_CREDS_USR} --password-stdin
                        """
                    } catch(error) {
                        echo "docker login failed, retrying after sleep"
                        retry(4) {
                            sleep(30)
                            sh """
                    echo "${DOCKER_CREDS_PSW}" | docker login ${env.DOCKER_REPO} -u ${DOCKER_CREDS_USR} --password-stdin
                            """
                        }
                    }
                }
                script {
                    try {
                        sh """
                    echo "${OCR_CREDS_PSW}" | docker login -u ${OCR_CREDS_USR} ${OCR_REPO} --password-stdin
                        """
                    } catch(error) {
                        echo "OCR docker login failed, retrying after sleep"
                        retry(4) {
                            sleep(30)
                            sh """
                    echo "${OCR_CREDS_PSW}" | docker login -u ${OCR_CREDS_USR} ${OCR_REPO} --password-stdin
                            """
                        }
                    }
                }
                sh """
                    rm -rf ${GO_REPO_PATH}/verrazzano
                    mkdir -p ${GO_REPO_PATH}/verrazzano
                    tar cf - . | (cd ${GO_REPO_PATH}/verrazzano/ ; tar xf -)
                """

                script {
                    def props = readProperties file: '.verrazzano-development-version'
                    VERRAZZANO_DEV_VERSION = props['verrazzano-development-version']
                    TIMESTAMP = sh(returnStdout: true, script: "date +%Y%m%d%H%M%S").trim()
                    SHORT_COMMIT_HASH = sh(returnStdout: true, script: "git rev-parse --short=8 HEAD").trim()
                    DOCKER_IMAGE_TAG = "${VERRAZZANO_DEV_VERSION}-${TIMESTAMP}-${SHORT_COMMIT_HASH}"
                }
            }
        }

        stage("create oci config file") {
            steps {
                script{
                    sh """
                        mkdir -p ~/.oci
                        cp ${OCI_CLI_KEY_FILE} ~/.oci
                        ls -ls ~/.oci
                        cat ~/.oci/alm.pem
                        rm -rf ~/.oci/config
                        {
                          echo '[DEFAULT]'
                          echo 'user=${OCI_CLI_USER}'
                          echo 'fingerprint=${OCI_CLI_FINGERPRINT}'
                          echo 'tenancy=${OCI_CLI_TENANCY}'
                          echo 'region=${OCI_CLI_REGION}'
                          echo 'key_file=~/.oci/alm.pem'
                        } >> ~/.oci/config
                        oci setup repair-file-permissions --file /home/opc/.oci/config
                        cat ~/.oci/config
                    """
                }
            }
        }

        stage('Download kubeconfig') {
            steps {
                script {
                    sh """
                        mkdir -p ${WORKSPACE}/.kube
                        rm -rf ${KUBECONFIG}
                        # get kubeconfig from OCI
                        oci ce cluster create-kubeconfig \
                        --cluster-id ${dev2_lre_cluster_id} \
                        --file ${KUBECONFIG} \
                        --region ${OCI_CLI_REGION} \
                        --token-version 2.0.0  \
                        --kube-endpoint PRIVATE_ENDPOINT
                    """
                }
            }
        }

        stage('call ssh-keygen to create public and private keys') {
            steps {
                script {
                    sh """
                        #remove old key
                        #ssh-keygen -R ${dev_lre_bastion_ip}
                        # delete the key file if it exists
                        rm -f ${WORKSPACE}/.ssh/id_rsa*
                        mkdir -p ${WORKSPACE}/.ssh
                        # call ssh-keygen to create the keys
                        ssh-keygen -m PEM -N '' -f ${WORKSPACE}/.ssh/id_rsa
                        # export the ssh public key value for LRE cluster
                        export ssh_public_key_path=${WORKSPACE}/.ssh/id_rsa.pub
                        # export the ssh private key file for LRE cluster
                        export ssh_private_key_path=${WORKSPACE}/.ssh/id_rsa
                        ls -ls ${WORKSPACE}/.ssh
                    """
                }
            }
        }

        stage('set up ssh tunnel') {
            steps {
                script {
                    sh '''
                        echo "create ssh tunnel"
                        cd ${GO_REPO_PATH}/verrazzano/
                        ci/scripts/lre_setup_ssh_tunnel.sh
                        #wait a bit for the tunnel to be setup
                        sleep 60
                        ls -ls ${KUBECONFIG}
                        sed -i 's|server:.*|server: https://127.0.0.1:6443|g' $KUBECONFIG
                        cat ${KUBECONFIG}

			# updating kubeconfig with sa
                        cd ${GO_REPO_PATH}/verrazzano/
                        ci/scripts/update_lre_kubeconfig.sh

                        echo "run kubectl get nodes"
                        kubectl get nodes
                        echo "run kubectl get pods"
                        kubectl get pods
                    '''
                }
            }
        }

        stage ("run kubectl commands") {
            steps {
                script {
                    sh '''
                        cat ${KUBECONFIG}
                        echo "run kubectl get nodes"
                        kubectl get nodes
                        echo "run kubectl get pods"
                        kubectl get pods
                        '''
                }
            }
        }

        stage('Run Acceptance Tests') {
            parallel {
                stage('verify-infra restapi') {
                    steps {
                        runGinkgoRandomize('verify-infra/restapi')
                    }
                }
                stage('verify-infra vmi') {
                    steps {
                        runGinkgoRandomize('verify-infra/vmi')
                    }
                }
                stage('examples helidon') {
                    steps {
                        runGinkgo('examples/helidon')
                    }
                }
                stage('examples todo') {
                    steps {
                        runGinkgo('examples/todo')
                    }
                }
                stage('examples bobs') {
                    steps {
                        runGinkgo('examples/bobsbooks')
                    }
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: '**/coverage.html,**/logs/*', allowEmptyArchive: true
                    junit testResults: '**/*test-result.xml', allowEmptyResults: true
                }
            }
        }
    }
}

def runGinkgoRandomize(testSuitePath) {
    catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
        sh """
            cd ${GO_REPO_PATH}/verrazzano/tests/e2e
            ginkgo -p --randomize-all -v --keep-going --no-color ${testSuitePath}/...
        """
    }
}

def runGinkgo(testSuitePath) {
    catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
        sh """
            cd ${GO_REPO_PATH}/verrazzano/tests/e2e
            ginkgo -v --keep-going --no-color ${testSuitePath}/...
        """
    }
}

