// Copyright (c) 2023, 2024, Oracle and/or its affiliates.
// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.

def DEFAULT_REPO_URL
def zoneId = UUID.randomUUID().toString().substring(0,6).replace('-','')
def agentLabel = env.JOB_NAME.contains('-dns-') ? "pipeline-job-single-large" : env.JOB_NAME.contains('master') ? "2.0-large-phx" : "2.0-large"

// pulling "ap-*" from the test regions given discovery of image pull issues
def availableRegions = [  "us-ashburn-1", "ca-montreal-1", "ca-toronto-1", "eu-amsterdam-1", "eu-zurich-1", "uk-london-1" ]
Collections.shuffle(availableRegions)
def keepOKEClusterOnFailure = "false"
def OKE_CLUSTER_PREFIX = ""
def EFFECTIVE_DUMP_K8S_CLUSTER_ON_SUCCESS = false
def OCNEClusterNameSuffix = UUID.randomUUID().toString().substring(0,6).replace('-','')

pipeline {
    options {
        skipDefaultCheckout true
        copyArtifactPermission('*');
        timestamps ()
    }

    agent {
        docker {
            image "${RUNNER_DOCKER_IMAGE}"
            args "${RUNNER_DOCKER_ARGS} --cap-add=NET_ADMIN"
            registryUrl "${RUNNER_DOCKER_REGISTRY_URL}"
            label "${agentLabel}"
        }
    }

    parameters {
        // OKE_CLUSTER_REGION parameter will be ignored for private DNS tests. They get overwritten with runner region
        choice (description: 'OCI region to launch OKE clusters in. This parameter will be ignored for private DNS tests', name: 'OKE_CLUSTER_REGION',
            // 1st choice is the default value
            choices: availableRegions )
        choice (description: 'OKE node pool configuration', name: 'OKE_NODE_POOL',
            // 1st choice is the default value
            choices: [ "VM.Standard.E3.Flex-4-2", "VM.Standard2.4-2", "VM.Standard.E3.Flex-8-2", "VM.Standard.E2.2" ])
        choice (description: 'Specifies  Nginx LoadBalancer scope. Values: GLOBAL, PRIVATE. Default: GLOBAL',name: 'NGINX_LB_SCOPE',
                    // 1st choice is the default value
                    choices: [ "GLOBAL","PRIVATE" ])
        choice (description: 'Specifies  Istio LoadBalancer scope. Values: GLOBAL, PRIVATE. Default: GLOBAL',name: 'ISTIO_LB_SCOPE',
                    // 1st choice is the default value
                    choices: [ "GLOBAL","PRIVATE" ])
        choice (description: 'Kubernetes Version for OKE Cluster', name: 'OKE_CLUSTER_VERSION',
                // 1st choice is the default value
                choices: [ "v1.27.2", "v1.26.2", "v1.25.4", "v1.24.1" ])
        choice (name: 'CRD_API_VERSION',
                description: 'This is the API crd version.',
                // 1st choice is the default value
                choices: [ "v1beta1", "v1alpha1"])
        string defaultValue: 'prod', description: 'Verrazzano install profile name', name: "INSTALL_PROFILE", trim: true
        string defaultValue: 'NONE', description: 'Verrazzano platform operator image name (within ghcr.io/verrazzano repo)', name: 'VERRAZZANO_OPERATOR_IMAGE', trim: true
        string (name: 'GIT_COMMIT_TO_USE',
                        defaultValue: 'NONE',
                        description: 'This is the full git commit hash from the source build to be used for all jobs',
                        trim: true)
        booleanParam (description: 'Whether to create the cluster with Calico for AT testing', name: 'CREATE_CLUSTER_USE_CALICO', defaultValue: true)
        booleanParam (description: 'Whether to dump k8s cluster on success (off by default can be useful to capture for comparing to failed cluster)', name: 'DUMP_K8S_CLUSTER_ON_SUCCESS', defaultValue: false)
        string (name: 'TAGGED_TESTS',
                defaultValue: '',
                description: 'A comma separated list of build tags for tests that should be executed (e.g. unstable_test). Default:',
                trim: true)
        string (name: 'INCLUDED_TESTS',
                defaultValue: '.*',
                description: 'A regex matching any fully qualified test file that should be executed (e.g. examples/helidon/). Default: .*',
                trim: true)
        string (name: 'EXCLUDED_TESTS',
                defaultValue: '_excluded_test',
                description: 'A regex matching any fully qualified test file that should not be executed (e.g. multicluster/|_excluded_test). Default: _excluded_test',
                trim: true)
        booleanParam (description: 'Whether to run all the OCNE Cluster Driver tests (true), or just the 1 bare minimum test case (false).', name: 'RUN_ALL_TESTS', defaultValue: false)

        // Optional parameters to the Ginkgo test suite
        string (name: 'DOCKER_ROOT_DIR',
                defaultValue: '',
                description: 'An optional override to be passed into the OCNE cluster creation request.',
                trim: true)
        string (name: 'ENABLE_CLUSTER_ALERTING',
                defaultValue: '',
                description: 'An optional override to be passed into the OCNE cluster creation request.',
                trim: true)
        string (name: 'ENABLE_CLUSTER_MONITORING',
                defaultValue: '',
                description: 'An optional override to be passed into the OCNE cluster creation request.',
                trim: true)
        string (name: 'ENABLE_NETWORK_POLICY',
                defaultValue: '',
                description: 'An optional override to be passed into the OCNE cluster creation request.',
                trim: true)
        string (name: 'WINDOWS_PREFERRED_CLUSTER',
                defaultValue: '',
                description: 'An optional override to be passed into the OCNE cluster creation request.',
                trim: true)
        string (name: 'CALICO_IMAGE_PATH',
                defaultValue: '',
                description: 'An optional override to be passed into the OCNE cluster creation request.',
                trim: true)
        string (name: 'CLUSTER_CIDR',
                defaultValue: '',
                description: 'An optional override to be passed into the OCNE cluster creation request.',
                trim: true)
        string (name: 'CONTROL_PLANE_MEMORY_GBS',
                defaultValue: '',
                description: 'An optional override to be passed into the OCNE cluster creation request.',
                trim: true)
        string (name: 'CONTROL_PLANE_OCPUS',
                defaultValue: '',
                description: 'An optional override to be passed into the OCNE cluster creation request.',
                trim: true)
        string (name: 'CONTROL_PLANE_SHAPE',
                defaultValue: '',
                description: 'An optional override to be passed into the OCNE cluster creation request.',
                trim: true)
        string (name: 'CONTROL_PLANE_VOLUME_GBS',
                defaultValue: '',
                description: 'An optional override to be passed into the OCNE cluster creation request.',
                trim: true)
        string (name: 'CORE_DNS_IMAGE_TAG',
                defaultValue: '',
                description: 'An optional override to be passed into the OCNE cluster creation request.',
                trim: true)
        string (name: 'ETCD_IMAGE_TAG',
                defaultValue: '',
                description: 'An optional override to be passed into the OCNE cluster creation request.',
                trim: true)
        string (name: 'IMAGE_DISPLAY_NAME',
                defaultValue: '',
                description: 'An optional override to be passed into the OCNE cluster creation request.',
                trim: true)
        string (name: 'IMAGE_ID',
                defaultValue: '',
                description: 'An optional override to be passed into the OCNE cluster creation request.',
                trim: true)
        booleanParam (name: 'INSTALL_CALICO',
                defaultValue: true,
                description: 'An optional override to be passed into the OCNE cluster creation request.')
        booleanParam (name: 'INSTALL_CCM',
                defaultValue: true,
                description: 'An optional override to be passed into the OCNE cluster creation request.')
        booleanParam (name: 'INSTALL_VERRAZZANO',
                defaultValue: false,
                description: 'An optional override to be passed into the OCNE cluster creation request.')
        string (name: 'KUBERNETES_VERSION',
                defaultValue: '',
                description: 'An optional override to be passed into the OCNE cluster creation request.',
                trim: true)
        string (name: 'NUM_CONTROL_PLANE_NODES',
                defaultValue: '',
                description: 'An optional override to be passed into the OCNE cluster creation request.',
                trim: true)
        string (name: 'OCNE_VERSION',
                defaultValue: '',
                description: 'An optional override to be passed into the OCNE cluster creation request.',
                trim: true)
        string (name: 'POD_CIDR',
                defaultValue: '',
                description: 'An optional override to be passed into the OCNE cluster creation request.',
                trim: true)
        string (name: 'PRIVATE_REGISTRY',
                defaultValue: '',
                description: 'An optional override to be passed into the OCNE cluster creation request.',
                trim: true)
        string (name: 'PROXY_ENDPOINT',
                defaultValue: '',
                description: 'An optional override to be passed into the OCNE cluster creation request.',
                trim: true)
        string (name: 'SKIP_OCNE_INSTALL',
                defaultValue: '',
                description: 'An optional override to be passed into the OCNE cluster creation request.',
                trim: true)
        string (name: 'TIGERA_IMAGE_TAG',
                defaultValue: '',
                description: 'An optional override to be passed into the OCNE cluster creation request.',
                trim: true)
        string (name: 'USE_NODE_PV_ENCRYPTION',
                defaultValue: '',
                description: 'An optional override to be passed into the OCNE cluster creation request.',
                trim: true)
        string (name: 'VERRAZZANO_RESOURCE',
                defaultValue: '',
                description: 'An optional override to be passed into the OCNE cluster creation request.',
                trim: true)
        string (name: 'VERRAZZANO_TAG',
                defaultValue: '',
                description: 'An optional override to be passed into the OCNE cluster creation request.',
                trim: true)
        string (name: 'VERRAZZANO_VERSION',
                defaultValue: '',
                description: 'An optional override to be passed into the OCNE cluster creation request.',
                trim: true)
        string (name: 'NODE_SHAPE',
                defaultValue: '',
                description: 'An optional override to be passed into the OCNE cluster creation request.',
                trim: true)
        string (name: 'NUM_WORKER_NODES',
                defaultValue: '',
                description: 'An optional override to be passed into the OCNE cluster creation request.',
                trim: true)
        string (name: 'APPLY_YAMLS',
                defaultValue: '',
                description: 'An optional override to be passed into the OCNE cluster creation request.',
                trim: true)
    }

    environment {
        DOCKER_CREDS = credentials('github-packages-credentials-rw')
        DOCKER_EMAIL = credentials('github-packages-email')
        DOCKER_REPO = 'ghcr.io'
        TEST_CONFIG_FILE = "${HOME}/testConfigOke.yaml"
        OCI_CLI_REGION = "${params.OKE_CLUSTER_REGION}"
        DISABLE_SPINNER=1
        VZ_ENVIRONMENT_NAME = "default"
        WEBLOGIC_PSW = credentials('weblogic-example-domain-password')
        DATABASE_PSW = credentials('todo-mysql-password')

        CLUSTER_NAME = 'byok8s-kind'
        OCR_CREDS = credentials('ocr-pull-and-push-account')
        NETRC_FILE = credentials('netrc')
        OCR_REPO = 'container-registry.oracle.com'
        GHCR_REPO = 'ghcr.io'
        VERRAZZANO_OPERATOR_IMAGE="${params.VERRAZZANO_OPERATOR_IMAGE}"
        INSTALL_PROFILE = "${params.INSTALL_PROFILE}"
        GITHUB_PKGS_CREDS = credentials('github-packages-credentials-rw')
        OCIR_CREDS = credentials('ocir-pull-and-push-account')
        IMAGE_PULL_SECRET = 'verrazzano-container-registry'
        OCIR_PHX_REPO = 'phx.ocir.io'
        POST_DUMP_FAILED = 'false'
        GOPATH = '/home/opc/go'
        GO_REPO_PATH = "${GOPATH}/src/github.com/verrazzano"

        TF_VAR_compartment_id = credentials('oci-tiburon-dev-compartment-ocid')
        TF_VAR_tenancy_id = credentials('oci-tenancy')
        TF_VAR_tenancy_name = credentials('oci-tenancy-name')
        TF_VAR_user_id = credentials('oci-user-ocid')
        TF_VAR_region = "${params.OKE_CLUSTER_REGION}"
        TF_VAR_kubernetes_version = "${params.OKE_CLUSTER_VERSION}"
        TF_VAR_nodepool_config = "${params.OKE_NODE_POOL}"
        TF_VAR_api_fingerprint = credentials('oci-api-key-fingerprint')
        TF_VAR_api_private_key_path = credentials('oci-api-key')
        TF_VAR_s3_bucket_access_key = credentials('oci-s3-bucket-access-key')
        TF_VAR_s3_bucket_secret_key = credentials('oci-s3-bucket-secret-key')

        OCI_CLI_TENANCY = credentials('oci-tenancy')
        OCI_CLI_USER = credentials('oci-user-ocid')
        OCI_CLI_FINGERPRINT = credentials('oci-api-key-fingerprint')
        OCI_CLI_KEY_FILE = credentials('oci-api-key')
        OCI_CLI_SUPPRESS_FILE_PERMISSIONS_WARNING = 'True'

        KUBECONFIG = "${WORKSPACE}/test_kubeconfig"
        VERRAZZANO_KUBECONFIG = "${KUBECONFIG}"

        TIMESTAMP = sh(returnStdout: true, script: "date +%Y%m%d%H%M%S").trim()
        SHORT_TIME_STAMP = sh(returnStdout: true, script: "date +%m%d%H%M%S").trim()

        POST_DUMP_FAILED_FILE = "${WORKSPACE}/post_dump_failed_file.tmp"

        INSTALL_CONFIG_FILE = "${WORKSPACE}/tests/e2e/config/scripts/${params.CRD_API_VERSION}/install-verrazzano-nipio.yaml"

        // Environment variables required to capture cluster snapshot and bug report on test failure
        DUMP_KUBECONFIG="${KUBECONFIG}"
        DUMP_COMMAND="${WORKSPACE}/tools/scripts/k8s-dump-cluster.sh"
        TEST_DUMP_ROOT="${WORKSPACE}/test-cluster-snapshots"
        TEST_SCRIPTS_DIR = "${GO_REPO_PATH}/verrazzano/tests/e2e/config/scripts"
        LOOPING_TEST_SCRIPTS_DIR = "${TEST_SCRIPTS_DIR}/looping-test"
        UNINSTALL_TEST_SCRIPTS_DIR = "${TEST_SCRIPTS_DIR}/uninstall-test"

        // Environment variable for Verrazzano CLI executable
        VZ_COMMAND="${GO_REPO_PATH}/vz"

        // used for console artifact capture on failure
        JENKINS_READ = credentials('jenkins-auditor')
        OCI_OS_NAMESPACE = credentials('oci-os-namespace')
        OCI_OS_ARTIFACT_BUCKET="build-failure-artifacts"
        VZ_CLI_TARGZ="vz-linux-amd64.tar.gz"

        // used to emit metrics
        PROMETHEUS_CREDENTIALS = credentials('prometheus-credentials')
        TEST_ENV = "OKE"
        TEST_ENV_LABEL = "magicdns_oke"

        // used to generate Ginkgo test reports
        TEST_REPORT = "test-report.xml"
        GINKGO_REPORT_ARGS = "--junit-report=${TEST_REPORT} --keep-separate-reports=true"
        TEST_REPORT_DIR = "${WORKSPACE}/tests/e2e"

        OPERATOR_YAML_FILE = "${WORKSPACE}/acceptance-test-operator.yaml"

        // For Ginkgo test
        OCNE_CLUSTER_NAME_SUFFIX = "${OCNEClusterNameSuffix}"
    }

    stages {
        stage('Clean workspace and checkout') {
            steps {
                sh """
                    echo "${NODE_LABELS}"
                """

                script {
                    EFFECTIVE_DUMP_K8S_CLUSTER_ON_SUCCESS = getEffectiveDumpOnSuccess()
                    if (params.GIT_COMMIT_TO_USE == "NONE") {
                        echo "Specific GIT commit was not specified, use current head"
                        def scmInfo = checkout scm
                        env.GIT_COMMIT = scmInfo.GIT_COMMIT
                        env.GIT_BRANCH = scmInfo.GIT_BRANCH
                    } else {
                        echo "SCM checkout of ${params.GIT_COMMIT_TO_USE}"
                        def scmInfo = checkout([
                            $class: 'GitSCM',
                            branches: [[name: params.GIT_COMMIT_TO_USE]],
                            doGenerateSubmoduleConfigurations: false,
                            extensions: [],
                            submoduleCfg: [],
                            userRemoteConfigs: [[url: env.SCM_VERRAZZANO_GIT_URL]]])
                        env.GIT_COMMIT = scmInfo.GIT_COMMIT
                        env.GIT_BRANCH = scmInfo.GIT_BRANCH
                        // If the commit we were handed is not what the SCM says we are using, fail
                        if (!env.GIT_COMMIT.equals(params.GIT_COMMIT_TO_USE)) {
                            echo "SCM didn't checkout the commit we expected. Expected: ${params.GIT_COMMIT_TO_USE}, Found: ${scmInfo.GIT_COMMIT}"
                            exit 1
                        }
                    }
                    echo "SCM checkout of ${env.GIT_BRANCH} at ${env.GIT_COMMIT}"
                }

                sh """
                    cp -f "${NETRC_FILE}" $HOME/.netrc
                    chmod 600 $HOME/.netrc
                """

                script {
                    try {
                    sh """
                        echo "${DOCKER_CREDS_PSW}" | docker login ${env.DOCKER_REPO} -u ${DOCKER_CREDS_USR} --password-stdin
                    """
                    } catch(error) {
                        echo "docker login failed, retrying after sleep"
                        retry(4) {
                            sleep(30)
                            sh """
                                echo "${DOCKER_CREDS_PSW}" | docker login ${env.DOCKER_REPO} -u ${DOCKER_CREDS_USR} --password-stdin
                            """
                        }
                    }
                }
                sh """
                    rm -rf ${GO_REPO_PATH}/verrazzano
                    mkdir -p ${GO_REPO_PATH}/verrazzano
                    tar cf - . | (cd ${GO_REPO_PATH}/verrazzano/ ; tar xf -)
                """

                script {
                    def props = readProperties file: '.verrazzano-development-version'
                    VERRAZZANO_DEV_VERSION = props['verrazzano-development-version']
                    TIMESTAMP = sh(returnStdout: true, script: "date +%Y%m%d%H%M%S").trim()
                    SHORT_COMMIT_HASH = sh(returnStdout: true, script: "git rev-parse --short=8 HEAD").trim()
                    DOCKER_IMAGE_TAG = "${VERRAZZANO_DEV_VERSION}-${TIMESTAMP}-${SHORT_COMMIT_HASH}"
                    // update the description with some meaningful info
                    setDisplayName()
                    currentBuild.description = params.KUBERNETES_CLUSTER_VERSION + " : " + SHORT_COMMIT_HASH + " : " + env.GIT_COMMIT + " : " + params.GIT_COMMIT_TO_USE

                    // derive the prefix for the OKE cluster
                    OKE_CLUSTER_PREFIX = sh(returnStdout: true, script: "${WORKSPACE}/ci/scripts/derive_oke_cluster_name.sh").trim()
                }
                script {
                    sh """
                        echo "Downloading VZ CLI from object storage"
                        oci --region us-phoenix-1 os object get --namespace ${OCI_OS_NAMESPACE} -bn ${OCI_OS_COMMIT_BUCKET} --name ephemeral/${env.BRANCH_NAME}/${SHORT_COMMIT_HASH}/${VZ_CLI_TARGZ} --file ${VZ_CLI_TARGZ}
                        tar xzf ${VZ_CLI_TARGZ} -C ${GO_REPO_PATH}
                        ${GO_REPO_PATH}/vz version
                    """
                }
            }
        }

        stage("Create OKE Cluster") {
            steps {
                sh "TF_VAR_label_prefix=${OKE_CLUSTER_PREFIX} TF_VAR_state_name=ocne-driver-${env.BUILD_NUMBER}-${env.BRANCH_NAME}/${env.TIMESTAMP} ${GO_REPO_PATH}/verrazzano/tests/e2e/config/scripts/create_oke_cluster.sh"
            }
        }

        stage('Install Verrazzano') {
            steps {
                sh """
                    # Create image pull secret for Verrazzano docker images
                    cd ${GO_REPO_PATH}/verrazzano
                    ./tests/e2e/config/scripts/create-image-pull-secret.sh "${IMAGE_PULL_SECRET}" "${DOCKER_REPO}" "${DOCKER_CREDS_USR}" "${DOCKER_CREDS_PSW}"
                    ./tests/e2e/config/scripts/create-image-pull-secret.sh github-packages "${DOCKER_REPO}" "${DOCKER_CREDS_USR}" "${DOCKER_CREDS_PSW}"
                    ./tests/e2e/config/scripts/create-image-pull-secret.sh ocr "${DOCKER_REPO}" "${DOCKER_CREDS_USR}" "${DOCKER_CREDS_PSW}"

                    echo "Download Platform Operator"
                    if [ "NONE" = "${VERRAZZANO_OPERATOR_IMAGE}" ]; then
                        echo "Using operator.yaml from object storage"
                        oci --region us-phoenix-1 os object get --namespace ${OCI_OS_NAMESPACE} -bn ${OCI_OS_COMMIT_BUCKET} --name ephemeral/${env.BRANCH_NAME}/${SHORT_COMMIT_HASH}/operator.yaml --file ${WORKSPACE}/downloaded-operator.yaml
                        cp ${WORKSPACE}/downloaded-operator.yaml ${WORKSPACE}/acceptance-test-operator.yaml
                    else
                        echo "Generating operator.yaml based on image name provided: ${VERRAZZANO_OPERATOR_IMAGE}"
                        env IMAGE_PULL_SECRETS=verrazzano-container-registry DOCKER_IMAGE=${VERRAZZANO_OPERATOR_IMAGE} ./tools/scripts/generate_operator_yaml.sh > ${WORKSPACE}/acceptance-test-operator.yaml
                    fi

                    echo "Create the verrazzano-install namespace"
                    kubectl create namespace verrazzano-install

                    # create secret in verrazzano-install ns
                    ./tests/e2e/config/scripts/create-image-pull-secret.sh "${IMAGE_PULL_SECRET}" "${DOCKER_REPO}" "${DOCKER_CREDS_USR}" "${DOCKER_CREDS_PSW}" "verrazzano-install"
                    ./tests/e2e/config/scripts/process_nipio_install_yaml.sh ${INSTALL_CONFIG_FILE}

                    echo "Installing Verrazzano on OKE"
                    ${VZ_COMMAND} install --filename ${INSTALL_CONFIG_FILE} --manifests ${WORKSPACE}/acceptance-test-operator.yaml --timeout 45m
                """
            }
            post {
                always {
                    archiveArtifacts artifacts: "acceptance-test-operator.yaml,downloaded-operator.yaml", allowEmptyArchive: true
                }
                success {
                    script {
                        if (EFFECTIVE_DUMP_K8S_CLUSTER_ON_SUCCESS == true) {
                            dumpK8sCluster('verrazzano-install-cluster-dump')
                        }
                    }
                }
                failure {
                    script {
                        dumpK8sCluster('verrazzano-install-failure-cluster-dump')
                        sh """
                            mkdir -p ${WORKSPACE}/verrazzano-platform-operator/scripts/install/build/logs
                            ${LOOPING_TEST_SCRIPTS_DIR}/dump_resources.sh > ${WORKSPACE}/verrazzano-platform-operator/scripts/install/build/logs/resources.log
                        """
                    }
                }
            }
        }

        stage("OCNE Cluster Driver Tests") {
            steps {
                script {
                    // Required environment variables for running the ocne-driver Ginkgo test suite
                    env.TF_VAR_label_prefix="${OKE_CLUSTER_PREFIX}"
                    setUpEnvVarsForOCNEClusterCreation()

                    runGinkgo('clusterapi/ocne-driver')
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: '**/coverage.html,**/logs/*,**/test-cluster-dumps/**', allowEmptyArchive: true
                }
                aborted {
                    script {
                        dumpK8sCluster('ocne-cluster-driver-cluster-dump')
                    }
                }
                failure {
                    script {
                        dumpK8sCluster('ocne-cluster-driver-cluster-dump')
                    }
                }
                success {
                    script {
                        if (EFFECTIVE_DUMP_K8S_CLUSTER_ON_SUCCESS == true) {
                            dumpK8sCluster('ocne-cluster-driver-cluster-dump')
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            sh """
                # Copy the generated test reports to WORKSPACE to archive them
                mkdir -p ${TEST_REPORT_DIR}
                cd ${GO_REPO_PATH}/verrazzano/tests/e2e
                find . -name "${TEST_REPORT}" | cpio -pdm ${TEST_REPORT_DIR}
            """
            archiveArtifacts artifacts: "**/oke_kubeconfig,**/coverage.html,**/logs/**,**/build/resources/**,**/verrazzano_images.txt,**/*full-cluster*/**,**/bug-report/**,**/${TEST_REPORT}", allowEmptyArchive: true
            junit testResults: "**/${TEST_REPORT}", allowEmptyResults: true
        }
        failure {
            script {
                archiveArtifacts artifacts: '**/oke_kubeconfig,**/coverage.html,**/logs/**,**/build/resources/**,**/verrazzano_images.txt,**/*full-cluster*/**,**/bug-report/**', allowEmptyArchive: true
            }
        }
        cleanup {
            sh "VERRAZZANO_KUBECONFIG=${env.KUBECONFIG} TF_VAR_label_prefix=${OKE_CLUSTER_PREFIX} TF_VAR_state_name=ocne-driver-${env.BUILD_NUMBER}-${env.BRANCH_NAME}/${env.TIMESTAMP} ${GO_REPO_PATH}/verrazzano/tests/e2e/config/scripts/delete_oke_cluster.sh || true"
            deleteDir()
        }
    }
}

def dumpK8sCluster(dumpDirectory) {
    sh """
        ${GO_REPO_PATH}/verrazzano/ci/scripts/capture_cluster_snapshot.sh ${dumpDirectory}
    """
}

def getEffectiveDumpOnSuccess() {
    def effectiveValue = params.DUMP_K8S_CLUSTER_ON_SUCCESS
    if (FORCE_DUMP_K8S_CLUSTER_ON_SUCCESS.equals("true") && (env.BRANCH_NAME.equals("master"))) {
        effectiveValue = true
        echo "Forcing dump on success based on global override setting"
    }
    return effectiveValue
}

def setDisplayName() {
    echo "Start setDisplayName"
    def causes = currentBuild.getBuildCauses()
    echo "causes: " + causes.toString()
    for (cause in causes) {
        def causeString = cause.toString()
        echo "current cause: " + causeString
        if (causeString.contains("UpstreamCause") && causeString.contains("Started by upstream project")) {
             echo "This job was caused by " + causeString
             if (causeString.contains("verrazzano-periodic-triggered-tests")) {
                 currentBuild.displayName = env.BUILD_NUMBER + " : PERIODIC"
             } else if (causeString.contains("verrazzano-flaky-tests")) {
                 currentBuild.displayName = env.BUILD_NUMBER + " : FLAKY"
             }
         }
    }
    echo "End setDisplayName"
}

def createImagePullSecrets() {
    sh """
        # Create image pull secrets for Verrazzano docker images
        cd ${WORKSPACE}
        ./tests/e2e/config/scripts/create-image-pull-secret.sh "${IMAGE_PULL_SECRET}" "${GHCR_REPO}" "${GITHUB_PKGS_CREDS_USR}" "${GITHUB_PKGS_CREDS_PSW}"
        ./tests/e2e/config/scripts/create-image-pull-secret.sh github-packages "${GHCR_REPO}" "${GITHUB_PKGS_CREDS_USR}" "${GITHUB_PKGS_CREDS_PSW}"
        ./tests/e2e/config/scripts/create-image-pull-secret.sh ocr "${OCR_REPO}" "${OCR_CREDS_USR}" "${OCR_CREDS_PSW}"
    """
}

// Run the OCNE Cluster Driver Ginkgo test suite, passing in some parameters
def runGinkgo(testSuitePath) {
    catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
        sh """
            echo Starting the OCNE cluster driver tests
            cd ${WORKSPACE}/tests/e2e
            ginkgo -p -v --timeout 2h --keep-going --no-color ${GINKGO_REPORT_ARGS} -tags="${params.TAGGED_TESTS}" --focus-file="${params.INCLUDED_TESTS}" --skip-file="${params.EXCLUDED_TESTS}" ${testSuitePath}/... -- --runAllTests=${params.RUN_ALL_TESTS}
        """
    }
}

def setUpEnvVarsForOCNEClusterCreation() {
    sh "echo Setting up inputs for the OCNE cluster driver tests"
    env.VCN_ID=sh(returnStdout: true, script: """ oci network vcn list --compartment-id ${env.TF_VAR_compartment_id} --display-name ${env.TF_VAR_label_prefix}-oke-vcn | jq -r '.data[0].id' """).trim()
    env.SUBNET_ID=sh(returnStdout: true, script: """ oci network subnet list --compartment-id ${env.TF_VAR_compartment_id} --vcn-id ${env.VCN_ID} --display-name ${env.TF_VAR_label_prefix}-workers | jq -r '.data[0].id' """).trim()

    // required environment variables for the Ginkgo test suite
    env.OCI_REGION="${env.TF_VAR_region}"
    env.OCI_VCN_ID="${env.VCN_ID}"
    env.OCI_USER_ID="${env.TF_VAR_user_id}"
    env.OCI_TENANCY_ID="${env.TF_VAR_tenancy_id}"
    env.OCI_CREDENTIALS_FINGERPRINT="${env.TF_VAR_api_fingerprint}"
    env.OCI_PRIVATE_KEY_PATH="${TF_VAR_api_private_key_path}"
    env.OCI_COMPARTMENT_ID="${env.TF_VAR_compartment_id}"
    env.WORKER_NODE_SUBNET="${env.SUBNET_ID}"
    env.CONTROL_PLANE_SUBNET="${env.SUBNET_ID}"
    env.LOAD_BALANCER_SUBNET="${env.SUBNET_ID}"

    // optional parameters
    env.DOCKER_ROOT_DIR="${params.DOCKER_ROOT_DIR}"
    env.ENABLE_CLUSTER_ALERTING="${params.ENABLE_CLUSTER_ALERTING}"
    env.ENABLE_CLUSTER_MONITORING="${params.ENABLE_CLUSTER_MONITORING}"
    env.ENABLE_NETWORK_POLICY="${params.ENABLE_NETWORK_POLICY}"
    env.WINDOWS_PREFERRED_CLUSTER="${params.WINDOWS_PREFERRED_CLUSTER}"
    env.CALICO_IMAGE_PATH="${params.CALICO_IMAGE_PATH}"
    env.CLUSTER_CIDR="${params.CLUSTER_CIDR}"
    env.CONTROL_PLANE_MEMORY_GBS="${params.CONTROL_PLANE_MEMORY_GBS}"
    env.CONTROL_PLANE_OCPUS="${params.CONTROL_PLANE_OCPUS}"
    env.CONTROL_PLANE_SHAPE="${params.CONTROL_PLANE_SHAPE}"
    env.CONTROL_PLANE_VOLUME_GBS="${params.CONTROL_PLANE_VOLUME_GBS}"
    env.CORE_DNS_IMAGE_TAG="${params.CORE_DNS_IMAGE_TAG}"
    env.ETCD_IMAGE_TAG="${params.ETCD_IMAGE_TAG}"
    env.IMAGE_DISPLAY_NAME="${params.IMAGE_DISPLAY_NAME}"
    env.IMAGE_ID="${params.IMAGE_ID}"
    env.INSTALL_CALICO="${params.INSTALL_CALICO}"
    env.INSTALL_CCM="${params.INSTALL_CCM}"
    env.INSTALL_VERRAZZANO="${params.INSTALL_VERRAZZANO}"
    env.KUBERNETES_VERSION="${params.KUBERNETES_VERSION}"
    env.NUM_CONTROL_PLANE_NODES="${params.NUM_CONTROL_PLANE_NODES}"
    env.OCNE_VERSION="${params.OCNE_VERSION}"
    env.POD_CIDR="${params.POD_CIDR}"
    env.PRIVATE_REGISTRY="${params.PRIVATE_REGISTRY}"
    env.PROXY_ENDPOINT="${params.PROXY_ENDPOINT}"
    env.SKIP_OCNE_INSTALL="${params.SKIP_OCNE_INSTALL}"
    env.TIGERA_IMAGE_TAG="${params.TIGERA_IMAGE_TAG}"
    env.USE_NODE_PV_ENCRYPTION="${params.USE_NODE_PV_ENCRYPTION}"
    env.VERRAZZANO_RESOURCE="${params.VERRAZZANO_RESOURCE}"
    env.VERRAZZANO_TAG="${params.VERRAZZANO_TAG}"
    env.VERRAZZANO_VERSION="${params.VERRAZZANO_VERSION}"
    env.NODE_SHAPE="${params.NODE_SHAPE}"
    env.NUM_WORKER_NODES="${params.NUM_WORKER_NODES}"
    env.APPLY_YAMLS="${params.APPLY_YAMLS}"
}

def downloadCLI() {
    script {
        sh "echo Downloading VZ CLI from object storage"
        sh """
            oci --region us-phoenix-1 os object  get --namespace ${OCI_OS_NAMESPACE} -bn ${OCI_OS_COMMIT_BUCKET} --name ephemeral/${env.BRANCH_NAME}/${SHORT_COMMIT_HASH}/${VZ_CLI_TARGZ} --file ${VZ_CLI_TARGZ}
            tar xzf ${VZ_CLI_TARGZ} -C ${GO_REPO_PATH}
            ${GO_REPO_PATH}/vz version
        """
    }
}

// Either download the specified release of the platform operator YAML, or create one
// using the specific operator image provided by the user.
def getVerrazzanoOperatorYaml() {
    script {
        sh """
            echo "Platform Operator Configuration"
            cd ${GO_REPO_PATH}/verrazzano
            if [ "NONE" == "${params.VERRAZZANO_OPERATOR_IMAGE}" ]; then
                echo "Downloading operator.yaml from branch ${env.BRANCH_NAME} for commit ${SHORT_COMMIT_HASH}"
                oci --region us-phoenix-1 os object get --namespace ${OCI_OS_NAMESPACE} -bn ${OCI_OS_COMMIT_BUCKET} --name ephemeral/${env.BRANCH_NAME}/${SHORT_COMMIT_HASH}/operator.yaml --file ${OPERATOR_YAML_FILE}
            else
                echo "Generating operator.yaml based on image name provided: ${params.VERRAZZANO_OPERATOR_IMAGE}"
                env IMAGE_PULL_SECRETS=verrazzano-container-registry DOCKER_IMAGE=${params.VERRAZZANO_OPERATOR_IMAGE} ./tools/scripts/generate_operator_yaml.sh > ${OPERATOR_YAML_FILE}
            fi
        """
    }
}

def performVerrazzanoDirectoryOperations() {
    script {
        sh """
            rm -rf ${GO_REPO_PATH}/verrazzano
            mkdir -p ${GO_REPO_PATH}/verrazzano
            tar cf - . | (cd ${GO_REPO_PATH}/verrazzano/ ; tar xf -)
        """
    }
}
