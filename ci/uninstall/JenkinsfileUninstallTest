// Copyright (c) 2022, 2023, Oracle and/or its affiliates.
// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.

def DOCKER_IMAGE_TAG
def agentLabel = env.JOB_NAME.contains('master') ? "phx-large" : "large"
EFFECTIVE_DUMP_K8S_CLUSTER_ON_SUCCESS = false

pipeline {
    options {
        timeout(time: 200, unit: 'MINUTES')
        skipDefaultCheckout true
        timestamps ()
    }

    agent {
        docker {
            image "${RUNNER_DOCKER_IMAGE}"
            args "${RUNNER_DOCKER_ARGS}"
            registryUrl "${RUNNER_DOCKER_REGISTRY_URL}"
            registryCredentialsId 'ocir-pull-and-push-account'
            label "${agentLabel}"
        }
    }

    parameters {
        choice (name: 'CHAOS_TEST_TYPE',
                description: 'Type of chaos to inflict',
                // 1st choice is the default value
                choices: [ "uninstall.interrupt.uninstall", "uninstall.reinstall.loop" ])

        string (name: 'INSTALL_LOOP_COUNT',
                description: 'Install loop count, valid for test type uninstall.reinstall.loop only',
                defaultValue: "1")

        choice (name: 'INSTALL_PROFILE',
                description: 'Verrazzano install profile name',
                // 1st choice is the default value
                choices: [ "prod", "dev", "managed-cluster" ])

        booleanParam (name: 'RUN_APPLICATION_TESTS',
                description: 'Whether to run the application tests for the final install loop',
                defaultValue: true)

        choice (name: 'WILDCARD_DNS_DOMAIN',
                description: 'This is the wildcard DNS domain',
                // 1st choice is the default value
                choices: [ "nip.io", "sslip.io" ])

        choice (name: 'CRD_API_VERSION',
                description: 'This is the API crd version.',
                // 1st choice is the default value
                choices: [ "v1beta1", "v1alpha1"])

        string (name: 'CONSOLE_REPO_BRANCH',
                defaultValue: '',
                description: 'The branch to check out after cloning the console repository.',
                trim: true)
        string (name: 'GIT_COMMIT_TO_USE',
                defaultValue: 'NONE',
                description: 'This is the full git commit hash from the source build to be used for all jobs',
                trim: true)
        string (name: 'VERRAZZANO_OPERATOR_IMAGE',
                defaultValue: 'NONE',
                description: 'Verrazzano platform operator image name (in ghcr.io repo).  If not specified, the operator.yaml from VZ repo will be leveraged to create VZ platform operator',
                trim: true)
        choice (name: 'KUBERNETES_CLUSTER_VERSION',
                description: 'Kubernetes Version for KinD Cluster',
                // 1st choice is the default value
                choices: [ "1.26", "1.25", "1.24" ])

        booleanParam (description: 'Whether to create kind cluster with Calico for AT testing (defaults to true)', name: 'CREATE_KIND_USE_CALICO', defaultValue: true)
        booleanParam (description: 'Whether to dump k8s cluster on success (off by default can be useful to capture for comparing to failed cluster)', name: 'DUMP_K8S_CLUSTER_ON_SUCCESS', defaultValue: false)

        string (name: 'TAGGED_TESTS',
                defaultValue: '',
                description: 'A comma separated list of build tags for tests that should be executed (e.g. unstable_test). Default:',
                trim: true)
        string (name: 'INCLUDED_TESTS',
                defaultValue: '.*',
                description: 'A regex matching any fully qualified test file that should be executed (e.g. examples/helidon/). Default: .*',
                trim: true)
        string (name: 'EXCLUDED_TESTS',
                defaultValue: '_excluded_test',
                description: 'A regex matching any fully qualified test file that should not be executed (e.g. multicluster/|_excluded_test). Default: _excluded_test',
                trim: true)
        booleanParam (description: 'Whether to capture full cluster snapshot on test failure', name: 'CAPTURE_FULL_CLUSTER', defaultValue: false)
    }

    environment {
        DOCKER_PLATFORM_CI_IMAGE_NAME = 'verrazzano-platform-operator-jenkins'
        DOCKER_PLATFORM_PUBLISH_IMAGE_NAME = 'verrazzano-platform-operator'
        GOPATH = '/home/opc/go'
        GO_REPO_PATH = "${GOPATH}/src/github.com/verrazzano"
        DOCKER_CREDS = credentials('github-packages-credentials-rw')
        DOCKER_EMAIL = credentials('github-packages-email')
        DOCKER_REPO = 'ghcr.io'
        DOCKER_NAMESPACE = 'verrazzano'
        NETRC_FILE = credentials('netrc')
        SERVICE_KEY = credentials('PAGERDUTY_SERVICE_KEY')

        // Environment variables required to capture cluster snapshot and bug report on test failure
        DUMP_KUBECONFIG="${KUBECONFIG}"
        DUMP_COMMAND="${GO_REPO_PATH}/verrazzano/tools/scripts/k8s-dump-cluster.sh"
        CAPTURE_FULL_CLUSTER="${params.CAPTURE_FULL_CLUSTER}"
        TEST_DUMP_ROOT="${WORKSPACE}/test-cluster-snapshots"

        // Environment variable for Verrazzano CLI executable
        VZ_COMMAND="${GO_REPO_PATH}/vz"

        CLUSTER_NAME = 'verrazzano'
        POST_DUMP_FAILED_FILE = "${WORKSPACE}/post_dump_failed_file.tmp"
        TESTS_EXECUTED_FILE = "${WORKSPACE}/tests_executed_file.tmp"
        KUBECONFIG = "${WORKSPACE}/test_kubeconfig"
        ADMIN_KUBECONFIG = "${KUBECONFIG}"
        VERRAZZANO_KUBECONFIG = "${KUBECONFIG}"
        OCR_CREDS = credentials('ocr-pull-and-push-account')
        OCR_REPO = 'container-registry.oracle.com'
        IMAGE_PULL_SECRET = 'verrazzano-container-registry'

        INSTALL_CONFIG_FILE_KIND_PERSISTENCE = "./tests/e2e/config/scripts/${params.CRD_API_VERSION}/install-verrazzano-kind-with-persistence.yaml"
        INSTALL_CONFIG_FILE_KIND_EPHEMERAL = "./tests/e2e/config/scripts/${params.CRD_API_VERSION}/install-verrazzano-kind-no-persistence.yaml"
        INSTALL_CONFIG_FILE_KIND = "./tests/e2e/config/scripts/${params.CRD_API_VERSION}/install-verrazzano-kind-no-persistence.yaml"

        VZ_ENVIRONMENT_NAME = "default"
        TEST_SCRIPTS_DIR = "${GO_REPO_PATH}/verrazzano/tests/e2e/config/scripts"
        LOOPING_TEST_SCRIPTS_DIR = "${TEST_SCRIPTS_DIR}/looping-test"

        // Location to store Platform Operator manifest
        TARGET_OPERATOR_FILE="${WORKSPACE}/acceptance-test-operator.yaml"
        // Location to store VZ install file, used to install/re-install VZ
        VZ_INSTALL_FILE="${WORKSPACE}/acceptance-test-config.yaml"

        WEBLOGIC_PSW = credentials('weblogic-example-domain-password') // Needed by ToDoList example test
        DATABASE_PSW = credentials('todo-mysql-password') // Needed by ToDoList example test

        OLD_PODS_FILE="${WORKSPACE}/verrazzano/platform-operator/scripts/install/build/logs/verrazzano-old-vpo-app-pods.out"
        NEW_PODS_FILE="${WORKSPACE}/verrazzano/platform-operator/scripts/install/build/logs/verrazzano-new-vpo-app-pods.out"
        NEW_PODS_FILE2="${WORKSPACE}/verrazzano/platform-operator/scripts/install/build/logs/verrazzano-new-vpo-app-pods-2.out"
        APP_NAMEPACES="'todo-list bobs-books hello-helidon springboot sockshop'"

        // used to emit metrics
        PROMETHEUS_CREDENTIALS = credentials('prometheus-credentials')
        TEST_ENV_LABEL = "kind"
        K8S_VERSION_LABEL = "${params.KUBERNETES_CLUSTER_VERSION}"
        TEST_ENV = "KIND"
        SEARCH_HTTP_ENDPOINT = credentials('search-gw-url')
        SEARCH_PASSWORD = "${PROMETHEUS_CREDENTIALS_PSW}"
        SEARCH_USERNAME = "${PROMETHEUS_CREDENTIALS_USR}"

        // used to generate Ginkgo test reports
        TEST_REPORT = "test-report.xml"
        GINKGO_REPORT_ARGS = "--junit-report=${TEST_REPORT} --keep-separate-reports=true"
        TEST_REPORT_DIR = "${WORKSPACE}/tests/e2e"
    }

    stages {
        stage('Clean workspace and checkout') {
            environment {
                OCI_CLI_AUTH="instance_principal"
                OCI_OS_NAMESPACE = credentials('oci-os-namespace')
                OCI_OS_COMMIT_BUCKET="verrazzano-builds-by-commit"
                OCI_OS_LOCATION="ephemeral/${env.BRANCH_NAME}/${SHORT_COMMIT_HASH}"
                VZ_CLI_TARGZ="vz-linux-amd64.tar.gz"
            }
            steps {
                sh """
                    echo "${NODE_LABELS}"
                """
                script {
                   EFFECTIVE_DUMP_K8S_CLUSTER_ON_SUCCESS = getEffectiveDumpOnSuccess()
                   if (params.GIT_COMMIT_TO_USE == "NONE") {
                        echo "Specific GIT commit was not specified, use current head"
                        def scmInfo = checkout scm
                        env.GIT_COMMIT = scmInfo.GIT_COMMIT
                        env.GIT_BRANCH = scmInfo.GIT_BRANCH
                    } else {
                        echo "SCM checkout of ${params.GIT_COMMIT_TO_USE}"
                        def scmInfo = checkout([
                            $class: 'GitSCM',
                            branches: [[name: params.GIT_COMMIT_TO_USE]],
                            doGenerateSubmoduleConfigurations: false,
                            extensions: [],
                            submoduleCfg: [],
                            userRemoteConfigs: [[url: env.SCM_VERRAZZANO_GIT_URL]]])
                        env.GIT_COMMIT = scmInfo.GIT_COMMIT
                        env.GIT_BRANCH = scmInfo.GIT_BRANCH
                        // If the commit we were handed is not what the SCM says we are using, fail
                        if (!env.GIT_COMMIT.equals(params.GIT_COMMIT_TO_USE)) {
                            echo "SCM didn't checkout the commit we expected. Expected: ${params.GIT_COMMIT_TO_USE}, Found: ${scmInfo.GIT_COMMIT}"
                            exit 1
                        }
                    }
                    echo "SCM checkout of ${env.GIT_BRANCH} at ${env.GIT_COMMIT}"
                }
                sh """
                    cp -f "${NETRC_FILE}" $HOME/.netrc
                    chmod 600 $HOME/.netrc
                """

                script {
                    try {
                        sh """
                            echo "${DOCKER_CREDS_PSW}" | docker login ${env.DOCKER_REPO} -u ${DOCKER_CREDS_USR} --password-stdin
                        """
                    } catch(error) {
                        echo "docker login failed, retrying after sleep"
                        retry(4) {
                            sleep(30)
                            sh """
                                echo "${DOCKER_CREDS_PSW}" | docker login ${env.DOCKER_REPO} -u ${DOCKER_CREDS_USR} --password-stdin
                            """
                        }
                    }
                }

                sh """
                    rm -rf ${GO_REPO_PATH}/verrazzano
                    mkdir -p ${GO_REPO_PATH}/verrazzano
                    tar cf - . | (cd ${GO_REPO_PATH}/verrazzano/ ; tar xf -)
                    cd ${GO_REPO_PATH}/verrazzano
                    git config --global credential.helper "!f() { echo username=\\$DOCKER_CREDS_USR; echo password=\\$DOCKER_CREDS_PSW; }; f"
                    git config --global user.name $DOCKER_CREDS_USR
                    git config --global user.email "${DOCKER_EMAIL}"
                    git checkout -b ${env.BRANCH_NAME}
                """

                script {
                    def props = readProperties file: '.verrazzano-development-version'
                    VERRAZZANO_DEV_VERSION = props['verrazzano-development-version']
                    TIMESTAMP = sh(returnStdout: true, script: "date +%Y%m%d%H%M%S").trim()
                    SHORT_COMMIT_HASH = sh(returnStdout: true, script: "git rev-parse --short=8 HEAD").trim()
                    DOCKER_IMAGE_TAG = "${VERRAZZANO_DEV_VERSION}-${TIMESTAMP}-${SHORT_COMMIT_HASH}"
                    // update the description with some meaningful info
                    setDisplayName()
                    currentBuild.description = SHORT_COMMIT_HASH + " : " + env.GIT_COMMIT + " : " + params.GIT_COMMIT_TO_USE
                }

                script {
                    sh """
                        echo "Downloading VZ CLI from object storage"
                        oci --region us-phoenix-1 os object get --namespace ${OCI_OS_NAMESPACE} -bn ${OCI_OS_COMMIT_BUCKET} --name ephemeral/${env.BRANCH_NAME}/${SHORT_COMMIT_HASH}/${VZ_CLI_TARGZ} --file ${VZ_CLI_TARGZ}
                        tar xzf ${VZ_CLI_TARGZ} -C ${GO_REPO_PATH}
                        ${VZ_COMMAND} version
                    """
                }
            }
        }

		stage ('Uninstall Tests') {
		    environment {
                KIND_KUBERNETES_CLUSTER_VERSION="${params.KUBERNETES_CLUSTER_VERSION}"
                OCI_CLI_AUTH="instance_principal"
                OCI_OS_NAMESPACE = credentials('oci-os-namespace')
                OCI_OS_COMMIT_BUCKET="verrazzano-builds-by-commit"
                OCI_OS_LOCATION="ephemeral/${env.BRANCH_NAME}/${SHORT_COMMIT_HASH}"
		    }
		    steps {
		        script {
		            int maxIterations = getMaxIterations()
                    for (int count = 1; count <= maxIterations; count++) {
                        if (count == 1) {
                            // Create cluster and install
                            runInitialInstall(count)
                        } else {
                            // Run just the install again
                            runInstallOnly("Install Verrazzano", count)
                        }
                        runVerifyTests("Run Test", count)
                        if (params.RUN_APPLICATION_TESTS && count == maxIterations && params.INSTALL_PROFILE != 'managed-cluster') {
                            runApplicationTests()
                        }
                        runUninstall(count)
                        if (params.CHAOS_TEST_TYPE == "uninstall.interrupt.uninstall") {
                            // Run re-install once and re-verify
                            runInstallOnly("Reinstall Verrazzano", count)
                            runVerifyTests("Rerun Test", count)
                        }
                    }
		        }
		    }
		}
    }
    post {
        always {
            runnerCleanup()
        }
        cleanup {
            deleteDir()
        }
    }
}

def getMaxIterations() {
    int maxIterations = 1
    if (params.CHAOS_TEST_TYPE == "uninstall.reinstall.loop") {
        maxIterations = params.INSTALL_LOOP_COUNT.toInteger()
        echo "Max loop count: $maxIterations"
    }
    return maxIterations
}

def runInitialInstall(iteration) {
    stage("Install Verrazzano #${iteration}") {
        env.CLUSTER_SNAPSHOT_DIR="${WORKSPACE}/verrazzano/build/resources-${iteration}/pre-install-resources"
        try {
            script {
                sh """
                    echo "CLUSTER_SNAPSHOT_DIR: ${CLUSTER_SNAPSHOT_DIR}"
                    echo "Branch: ${BRANCH_NAME}"
                    cd ${GO_REPO_PATH}/verrazzano
                    ci/scripts/prepare_jenkins_at_environment.sh ${params.CREATE_KIND_USE_CALICO} ${params.WILDCARD_DNS_DOMAIN}
                """
            }
        } finally {
            dumpPodsAndLogs("post-install-${iteration}")
            archiveArtifacts artifacts: "**/logs/**,${env.INSTALL_CONFIG_FILE_KIND}", allowEmptyArchive: true
        }
    }
}

def runUninstall(iteration) {
    stage("Uninstall Verrazzano #${iteration}") {
        try {
            vzUninstall(iteration)
            if (EFFECTIVE_DUMP_K8S_CLUSTER_ON_SUCCESS == true) {
                dumpK8sCluster("verrazzano-uninstall-cluster-snapshot-${iteration}")
            }
        } catch (err) {
            dumpK8sCluster("verrazzano-uninstall-failure-cluster-snapshot-${iteration}")
            throw err
        } finally {
            dumpPodsAndLogs("post-uninstall-${iteration}")
            listNamespacesAndPods('after Verrazzano uninstall')
            listHelmReleases('after Verrazzano uninstall')
        }
    }
    stage("Verify Uninstall #${iteration}") {
        try {
            sh """
                ${LOOPING_TEST_SCRIPTS_DIR}/dump_cluster.sh ${WORKSPACE}/verrazzano/build/resources-${iteration}/post-uninstall-resources false
                ${LOOPING_TEST_SCRIPTS_DIR}/verify_uninstall.sh ${WORKSPACE}/verrazzano/build/resources-${iteration}
            """
            parallel generateVerifyUninstallStages()
            if (EFFECTIVE_DUMP_K8S_CLUSTER_ON_SUCCESS == true) {
                dumpK8sCluster('verify-uninstall-${iteration}-cluster-snapshot')
            }
        } catch (err) {
            dumpK8sCluster('verify-uninstall-${iteration}-cluster-snapshot')
            throw err
        }
    }
}

def runInstallOnly(stagePrefix, iteration) {
    def dirPrefix=stagePrefix.replaceAll("\\s","-").toLowerCase()
    stage("${stagePrefix} #${iteration}") {
        def vpoLogsDir = "${WORKSPACE}/verrazzano-platform-operator/scripts/reinstall/build/logs/${iteration}"
        echo "Platform operator logs dir: ${vpoLogsDir}"
        try {
            sh """
                # sleep for a period to ensure async deletion of Verrazzano components from uninstall above has completed
                #sleep 90
                ${VZ_COMMAND} install --filename ${VZ_INSTALL_FILE} --manifests ${TARGET_OPERATOR_FILE}
            """
            if (EFFECTIVE_DUMP_K8S_CLUSTER_ON_SUCCESS == true) {
               dumpK8sCluster('verrazzano-${dirPrefix}-${iteration}-cluster-snapshot')
            }
        } catch (err) {
            dumpK8sCluster('verrazzano-${dirPrefix}-${iteration}-failure-cluster-snapshot')
            sh """
               mkdir -p ${vpoLogsDir}
               ${LOOPING_TEST_SCRIPTS_DIR}/dump_resources.sh > ${vpoLogsDir}/resources.log
            """
            throw err
        } finally {
            dumpPodsAndLogs("${dirPrefix}-${iteration}")
            listNamespacesAndPods('after reinstalling Verrazzano')
            listHelmReleases('after reinstalling Verrazzano')
        }
    }
}

def runVerifyTests(stageName, iteration) {
    stage("${stageName} #${iteration}") {
        try {
            parallel generateVerifyInfraStages()
            if (EFFECTIVE_DUMP_K8S_CLUSTER_ON_SUCCESS == true) {
                dumpK8sCluster('verrazzano-testrun-${iteration}-cluster-snapshot')
            }
        } catch (err) {
            dumpK8sCluster('verrazzano-test-failure-${iteration}-cluster-snapshot')
            throw err
        }
    }
}

def generateVerifyUninstallStages() {
    boolean mySQLOperatorEnabled = params.INSTALL_PROFILE != 'managed-cluster'
    boolean vmoEnabled = params.INSTALL_PROFILE != 'managed-cluster'
    uninstallTests = [
        "verifycrds": {
            runGinkgoWithPassThroughs('uninstall/verifycrds', mySQLOperatorEnabled, vmoEnabled)
        },
        "verifyrancher": {
            runGinkgo('uninstall/verifyrancher')
        },
    ]

    return uninstallTests
}

def generateVerifyInfraStages() {
    infraTests = [
        "verify-install": {
            runGinkgo('verify-install')
        },
        "verify-scripts": {
            runGinkgo('scripts', '', "${KUBECONFIG}")
        },
        "verify-infra": {
            runGinkgoRandomize('verify-infra')
        },
    ]
    if (params.INSTALL_PROFILE != 'managed-cluster') {
        infraTests = infraTests + [
            "system component metrics": {
                runGinkgoRandomize('metrics/syscomponents')
            },
            "console": {
                acceptanceTestsConsole()
            },
        ]
    }
    return infraTests
}

// vzUninstall - Start parallel uninstall and chaos stages
def vzUninstall(iteration) {
    stage("Uninstall #${iteration}") {
        script {
            def vpoLogsDir = "${WORKSPACE}/verrazzano-platform-operator/logs/${iteration}"
            echo "Platform operator uninstall logs dir: ${vpoLogsDir}"
            sh (script: "mkdir -p ${vpoLogsDir}")
            parallel getUninstallStages(vpoLogsDir)
        }
    }
}

def getUninstallStages(vpoLogsDir) {
    stages = [
         "uninstall-verrazzano": {
                uninstallVerrazzano(vpoLogsDir)
             },
    ]
    if (params.CHAOS_TEST_TYPE == "uninstall.interrupt.uninstall") {
        stages = stages + [
             "uninstall-chaos": {
                    kill_vpo_loop(vpoLogsDir)
                 },
        ]
    }
    return stages
}

def uninstallVerrazzano(vpoLogsDir) {
    script {
        echo "Platform operator uninstall logs dir: ${vpoLogsDir}"

        // Delete VZ in the background
        while (true) {
            echo "Deleting the Verrazzano resource..."
            result = sh(returnStatus: true, script: "${VZ_COMMAND} uninstall -y --timeout=60m")
            if (result == 0) {
                break
            }
            echo "vz uninstall result: ${result}"
            sh "sleep 5"
        }
    }
}

def kill_vpo_loop(vpoLogsDir) {
    script {
        echo "Stopping the VPO on loop in 15 to 60 second intervals"

        sh """
            # Initially sleep for 30 to 60 seconds
            SLEEP_SEC=\$[ \$RANDOM % 30 + 30 ]
            echo "Sleeping for \$SLEEP_SEC seconds"
            sleep \$SLEEP_SEC

            VZ_STATUS=\$(kubectl get vz my-verrazzano --ignore-not-found -o jsonpath={.status.conditions[-1].type})
            RESTARTS=1
            while [ ! -z \$VZ_STATUS ] && [ \$VZ_STATUS == "UninstallStarted" ] ; do
                NS_STATUS=\$(kubectl get ns verrazzano-install --ignore-not-found -o jsonpath={.status.phase})
                if [ ! -z \$NS_STATUS ]; then
                    mkdir -p ${WORKSPACE}/verrazzano-platform-operator/logs
                    kubectl -n verrazzano-install logs --tail -1 --selector=app=verrazzano-platform-operator >> ${vpoLogsDir}/verrazzano-platform-operator-before-vpo-killed-pod-\${RESTARTS}.log || echo "failed" > ${POST_DUMP_FAILED_FILE}
                    kubectl -n verrazzano-install delete pod -l app=verrazzano-platform-operator --ignore-not-found
                    kubectl -n verrazzano-install rollout status deployments/verrazzano-platform-operator --timeout=600s
                    echo "VPO pod successfully restarted"
                fi

                # Sleep a random interval between 15 and 60 seconds
                SLEEP_SEC=\$[ \$RANDOM % 45 + 15 ]
                echo "Sleeping for \$SLEEP_SEC seconds"
                sleep \$SLEEP_SEC

                # Update the Verrazzano status and update restart counter
                VZ_STATUS=\$(kubectl get vz my-verrazzano --ignore-not-found -o jsonpath={.status.conditions[-1].type})
                ((RESTARTS++))
            done
        """
    }
}

def runApplicationTests() {
    stage("Application Tests") {
        try {
            parallel getApplicationStages()
            if (EFFECTIVE_DUMP_K8S_CLUSTER_ON_SUCCESS == true) {
                dumpK8sCluster('verrazzano-application-test-failure-cluster-snapshot')
            }
        } catch (err) {
            dumpK8sCluster('verrazzano-application-test-failure-cluster-snapshot')
            throw err
        }
    }
}

def getApplicationStages() {
    return [
       "examples helidon": {
           runGinkgo('examples/helidon', 'examples-helidon')
       },
       "examples socks": {
           runGinkgo('examples/socks', 'examples-socks')
       },
       "examples springboot": {
           runGinkgo('examples/springboot', 'examples-springboot')
       },
       "examples todo": {
           runGinkgo('examples/todo', 'examples-todo')
       },
   ]
}

// Called in parallel Stage console of Stage Run Acceptance Tests
def acceptanceTestsConsole() {
    catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        try {
            sh "CONSOLE_REPO_BRANCH=${params.CONSOLE_REPO_BRANCH} ${GO_REPO_PATH}/verrazzano/ci/scripts/run_console_tests.sh"
        } catch (err) {
            saveConsoleScreenShots()
            error "${err}"
        }
    }
}

def saveConsoleScreenShots() {
    sh "${GO_REPO_PATH}/verrazzano/ci/scripts/save_console_test_artifacts.sh"
}

def runGinkgoRandomize(testSuitePath, dumpDir = '') {
    catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
        sh """
            if [ ! -z "${dumpDir}" ]; then
                export DUMP_DIRECTORY=${dumpDir}
            fi
            cd ${GO_REPO_PATH}/verrazzano/tests/e2e
            ginkgo -p --randomize-all -v --keep-going --no-color ${GINKGO_REPORT_ARGS} -tags="${params.TAGGED_TESTS}" --focus-file="${params.INCLUDED_TESTS}" --skip-file="${params.EXCLUDED_TESTS}" ${testSuitePath}/...
        """
    }
}

def runGinkgo(testSuitePath, dumpDir = '', kubeconfig = '') {
    catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
        sh """
            if [ ! -z "${dumpDir}" ]; then
                export DUMP_DIRECTORY=${dumpDir}
            fi
            if [ ! -z "${kubeConfig}" ]; then
                export KUBECONFIG="${kubeConfig}"
            fi
            cd ${GO_REPO_PATH}/verrazzano/tests/e2e
            ginkgo -v --keep-going --no-color ${GINKGO_REPORT_ARGS} -tags="${params.TAGGED_TESTS}" --focus-file="${params.INCLUDED_TESTS}" --skip-file="${params.EXCLUDED_TESTS}" ${testSuitePath}/...
        """
    }
}

def runGinkgoWithPassThroughs(testSuitePath, mySQLOperatorEnabled, vmoEnabled, dumpDir = '', kubeconfig = '') {
    catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
        sh """
            if [ ! -z "${dumpDir}" ]; then
                export DUMP_DIRECTORY=${dumpDir}
            fi
            if [ ! -z "${kubeConfig}" ]; then
                export KUBECONFIG="${kubeConfig}"
            fi
            cd ${GO_REPO_PATH}/verrazzano/tests/e2e
            ginkgo -v --keep-going --no-color ${GINKGO_REPORT_ARGS} -tags="${params.TAGGED_TESTS}" --focus-file="${params.INCLUDED_TESTS}" --skip-file="${params.EXCLUDED_TESTS}" ${testSuitePath}/... -- --mySQLOperatorEnabled=${mySQLOperatorEnabled} --vmoEnabled=${vmoEnabled}
        """
    }
}

def runnerCleanup() {
    script {
        if ( fileExists(env.TESTS_EXECUTED_FILE) ) {
            dumpPodsAndLogs("runnerCleanup")
        }
    }

    sh """
        # Copy the generated test reports to WORKSPACE to archive them
        mkdir -p ${TEST_REPORT_DIR}
        cd ${GO_REPO_PATH}/verrazzano/tests/e2e
        find . -name "${TEST_REPORT}" | cpio -pdm ${TEST_REPORT_DIR}
    """
    archiveArtifacts artifacts: "**/coverage.html,${WORKSPACE}/console/**,**/logs/**,**/verrazzano_images.txt,**/build/resources/**,**/*full-cluster*/**,**/bug-report/**,**/${TEST_REPORT}", allowEmptyArchive: true
    junit testResults: "**/${TEST_REPORT}", allowEmptyResults: true

    sh """
        cd ${GO_REPO_PATH}/verrazzano/platform-operator
        make delete-cluster
        if [ -f ${POST_DUMP_FAILED_FILE} ]; then
          echo "Failures seen during dumping of artifacts, treat post as failed"
          exit 1
        fi
    """
}

def dumpK8sCluster(dumpDirectory) {
    sh """
        ${GO_REPO_PATH}/verrazzano/ci/scripts/capture_cluster_snapshot.sh ${dumpDirectory}
    """
}

def dumpPodsAndLogs(stage) {
    def dumpPath="${WORKSPACE}/verrazzano/logs/${stage}"
    dumpVerrazzanoSystemPods(dumpPath)
    dumpCattleSystemPods(dumpPath)
    dumpNginxIngressControllerLogs(dumpPath)
    dumpVerrazzanoPlatformOperatorLogs(dumpPath)
    dumpVerrazzanoApplicationOperatorLogs(dumpPath)
    dumpOamKubernetesRuntimeLogs(dumpPath)
    dumpVerrazzanoApiLogs(dumpPath)
}

def dumpVerrazzanoSystemPods(dumpPath) {
    createPathIfNecessary(dumpPath)
    sh """
        cd ${GO_REPO_PATH}/verrazzano/platform-operator
        export DIAGNOSTIC_LOG="${dumpPath}/verrazzano-system-pods.log"
        ./scripts/install/k8s-dump-objects.sh -o pods -n verrazzano-system -m "verrazzano system pods" || echo "failed" > ${POST_DUMP_FAILED_FILE}
        export DIAGNOSTIC_LOG="${dumpPath}/verrazzano-system-certs.log"
        ./scripts/install/k8s-dump-objects.sh -o cert -n verrazzano-system -m "verrazzano system certs" || echo "failed" > ${POST_DUMP_FAILED_FILE}
        export DIAGNOSTIC_LOG="${dumpPath}/verrazzano-system-osd.log"
        ./scripts/install/k8s-dump-objects.sh -o pods -n verrazzano-system -r "vmi-system-osd-*" -m "verrazzano system opensearchdashboards log" -l -c osd || echo "failed" > ${POST_DUMP_FAILED_FILE}
        export DIAGNOSTIC_LOG="${dumpPath}/verrazzano-system-es-master.log"
        ./scripts/install/k8s-dump-objects.sh -o pods -n verrazzano-system -r "vmi-system-es-master-*" -m "verrazzano system opensearchdashboards log" -l -c es-master || echo "failed" > ${POST_DUMP_FAILED_FILE}
    """
}

def dumpCattleSystemPods(dumpPath) {
    createPathIfNecessary(dumpPath)
    sh """
        cd ${GO_REPO_PATH}/verrazzano/platform-operator
        export DIAGNOSTIC_LOG="${dumpPath}/cattle-system-pods.log"
        ./scripts/install/k8s-dump-objects.sh -o pods -n cattle-system -m "cattle system pods" || echo "failed" > ${POST_DUMP_FAILED_FILE}
        export DIAGNOSTIC_LOG="${dumpPath}/rancher.log"
        ./scripts/install/k8s-dump-objects.sh -o pods -n cattle-system -r "rancher-*" -m "Rancher logs" -l || echo "failed" > ${POST_DUMP_FAILED_FILE}
    """
}

def dumpNginxIngressControllerLogs(dumpPath) {
    sh """
        cd ${GO_REPO_PATH}/verrazzano/platform-operator
        export DIAGNOSTIC_LOG="${dumpPath}/nginx-ingress-controller.log"
        ./scripts/install/k8s-dump-objects.sh -o pods -n ingress-nginx -r "nginx-ingress-controller-*" -m "Nginx Ingress Controller" -c controller -l || echo "failed" > ${POST_DUMP_FAILED_FILE}
    """
}

def dumpVerrazzanoPlatformOperatorLogs(dumpPath) {
    createPathIfNecessary(dumpPath)
    sh """
        ## dump out verrazzano-platform-operator logs
        kubectl -n verrazzano-install logs --tail -1 --selector=app=verrazzano-platform-operator > ${dumpPath}/verrazzano-platform-operator-pod.log || echo "failed" > ${POST_DUMP_FAILED_FILE}
        kubectl -n verrazzano-install describe pod --selector=app=verrazzano-platform-operator > ${dumpPath}/verrazzano-platform-operator-pod.out || echo "failed" > ${POST_DUMP_FAILED_FILE}
        echo "------------------------------------------"
    """
}

def dumpVerrazzanoApplicationOperatorLogs(dumpPath) {
    createPathIfNecessary(dumpPath)
    sh """
        ## dump out verrazzano-application-operator logs
        kubectl -n verrazzano-system logs --selector=app=verrazzano-application-operator --tail -1 > ${dumpPath}/verrazzano-application-operator-pod.log || echo "failed" > ${POST_DUMP_FAILED_FILE}
        kubectl -n verrazzano-system describe pod --selector=app=verrazzano-application-operator > ${dumpPath}/verrazzano-application-operator-pod.out || echo "failed" > ${POST_DUMP_FAILED_FILE}
        echo "verrazzano-application-operator logs dumped to verrazzano-application-operator-pod.log"
        echo "verrazzano-application-operator pod description dumped to verrazzano-application-operator-pod.out"
        echo "------------------------------------------"
    """
}

def dumpOamKubernetesRuntimeLogs(dumpPath) {
    createPathIfNecessary(dumpPath)
    sh """
        ## dump out oam-kubernetes-runtime logs
        kubectl -n verrazzano-system logs --selector=app.kubernetes.io/instance=oam-kubernetes-runtime --tail -1 > ${dumpPath}/oam-kubernetes-runtime-pod.log || echo "failed" > ${POST_DUMP_FAILED_FILE}
        kubectl -n verrazzano-system describe pod --selector=app.kubernetes.io/instance=oam-kubernetes-runtime > ${dumpPath}/oam-kubernetes-runtime-pod.out || echo "failed" > ${POST_DUMP_FAILED_FILE}
        echo "oam-kubernetes-runtime logs dumped to oam-kubernetes-runtime-pod.log"
        echo "oam-kubernetes-runtime pod description dumped to oam-kubernetes-runtime-pod.out"
        echo "------------------------------------------"
    """
}

def dumpVerrazzanoApiLogs(dumpPath) {
    createPathIfNecessary(dumpPath)
    sh """
        cd ${GO_REPO_PATH}/verrazzano/platform-operator
        export DIAGNOSTIC_LOG="${dumpPath}/verrazzano-authproxy.log"
        ./scripts/install/k8s-dump-objects.sh -o pods -n verrazzano-system -r "verrazzano-authproxy-*" -m "verrazzano api" -c verrazzano-authproxy -l || echo "failed" > ${POST_DUMP_FAILED_FILE}
    """
}

def createPathIfNecessary(pathName) {
    sh """
        if [ ! -e ${pathName} ]; then
            echo "Creating ${pathName}"
            mkdir -p ${pathName}
        else
            echo "Dump path ${pathName} exists"
        fi
    """
}

def setDisplayName() {
    echo "Start setDisplayName"
    def causes = currentBuild.getBuildCauses()
    echo "causes: " + causes.toString()
    for (cause in causes) {
        def causeString = cause.toString()
        echo "current cause: " + causeString
        if (causeString.contains("UpstreamCause") && causeString.contains("Started by upstream project")) {
             echo "This job was caused by " + causeString
             if (causeString.contains("verrazzano-periodic-triggered-tests")) {
                 currentBuild.displayName = env.BUILD_NUMBER + " : PERIODIC"
             } else if (causeString.contains("verrazzano-flaky-tests")) {
                 currentBuild.displayName = env.BUILD_NUMBER + " : FLAKY"
             }
         }
    }
    echo "End setDisplayName"
}

def getEffectiveDumpOnSuccess() {
    def effectiveValue = params.DUMP_K8S_CLUSTER_ON_SUCCESS
    if (FORCE_DUMP_K8S_CLUSTER_ON_SUCCESS.equals("true") && (env.BRANCH_NAME.equals("master"))) {
        effectiveValue = true
        echo "Forcing dump on success based on global override setting"
    }
    return effectiveValue
}

def listHelmReleases(customMessage) {
    sh """
        echo "Listing the releases across all namespaces ${customMessage}."
        helm list -A
        echo "-----------------------------------------------------"
    """
}

def listNamespacesAndPods(customMessage) {
    sh """
        echo "Listing all the namespaces and pods the namespaces ${customMessage}."
        kubectl get namespaces
        kubectl get pods -A
        echo "-----------------------------------------------------"
    """
}
