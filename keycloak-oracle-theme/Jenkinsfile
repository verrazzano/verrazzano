// Copyright (c) 2020, Oracle and/or its affiliates.
// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.

def DOCKER_IMAGE_TAG

pipeline {
    options {
        skipDefaultCheckout()
    }

    agent {
       docker {
            image "${RUNNER_DOCKER_IMAGE}"
            args "${RUNNER_DOCKER_ARGS}"
            registryUrl "${RUNNER_DOCKER_REGISTRY_URL}"
            registryCredentialsId 'ocir-pull-and-push-account'
       }
    }

    environment {
        DOCKER_REPO = 'ghcr.io'
        DOCKER_NAMESPACE = 'verrazzano'
        DOCKER_CI_IMAGE_NAME = 'keycloak-oracle-theme-jenkins'
        DOCKER_PUBLISH_IMAGE_NAME = 'keycloak-oracle-theme'
        DOCKER_IMAGE_NAME = "${env.BRANCH_NAME == 'master' ? env.DOCKER_PUBLISH_IMAGE_NAME : env.DOCKER_CI_IMAGE_NAME}"
        DOCKER_IMAGE_FULL_NAME = "${env.DOCKER_REPO}/${env.DOCKER_NAMESPACE}/${DOCKER_IMAGE_NAME}"
        DOCKERFILE='keycloak-oracle-theme/Dockerfile'
        CREATE_LATEST_TAG = "${env.BRANCH_NAME == 'master' ? '1' : '0'}"
        DOCKER_CREDS = credentials('github-packages-credentials-rw')
        NETRC_FILE = credentials('netrc')
    }

    stages {
        stage('Clean workspace and checkout') {
            steps {
                script {
                    sh "rm -rf ${WORKSPACE}/verrazzano" //could be leftover from previous checkouts to subdirectory
                    checkout scm
                    echo "${WORKSPACE}"
                    sh """
                        echo "${DOCKER_CREDS_PSW}" | docker login ${env.DOCKER_REPO} -u ${DOCKER_CREDS_USR} --password-stdin
                    """
                    def props = readProperties file: '.verrazzano-development-version'
                    VERRAZZANO_DEV_VERSION = props['verrazzano-development-version']
                    TIMESTAMP = sh(returnStdout: true, script: "date +%Y%m%d%H%M%S").trim()
                    SHORT_COMMIT_HASH = sh(returnStdout: true, script: "git rev-parse --short HEAD").trim()
                    DOCKER_IMAGE_TAG = "${VERRAZZANO_DEV_VERSION}-${TIMESTAMP}-${SHORT_COMMIT_HASH}"
                    sh "echo Image tag is ${DOCKER_IMAGE_TAG}"
                }
            }
        }

        stage('Copyright Compliance Check') {
            when { not { buildingTag() } }
            steps {
                copyrightScan "${WORKSPACE}"
            }
        }

        stage('Build Docker Image') {
            when { not { buildingTag() } }
            steps {
                sh """
                    echo "Building image ${DOCKER_IMAGE_FULL_NAME}:${DOCKER_IMAGE_TAG}"
                    cd keycloak-oracle-theme
                    docker build --pull --no-cache \
                      -t ${DOCKER_IMAGE_FULL_NAME}:${DOCKER_IMAGE_TAG} \
                      -f ./Dockerfile \
                      .
                    docker push ${DOCKER_IMAGE_FULL_NAME}:${DOCKER_IMAGE_TAG}
                """
            }
        }

        stage('Scan Image') {
            when { not { buildingTag() } }
            steps {
                script {
                    clairScanTemp "${DOCKER_IMAGE_FULL_NAME}:${DOCKER_IMAGE_TAG}"
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: '**/scanning-report.json', allowEmptyArchive: true
                }
            }
        }

        stage('Publish Image') {
            when { buildingTag() }
            steps {
                sh """
                    docker pull ${DOCKER_IMAGE_FULL_NAME}:${DOCKER_IMAGE_TAG}
                    docker tag ${DOCKER_IMAGE_FULLNAME}:${DOCKER_IMAGE_TAG} ${DOCKER_IMAGE_FULLNAME}:${TAG_NAME}
                    docker push ${DOCKER_IMAGE_FULL_NAME}:${TAG_NAME}
                """
            }
        }
    }

    post {
        failure {
            mail to: "${env.BUILD_NOTIFICATION_TO_EMAIL}", from: 'noreply@oracle.com',
            subject: "Verrazzano: ${env.JOB_NAME} - Failed",
            body: "Job Failed - \"${env.JOB_NAME}\" build: ${env.BUILD_NUMBER}\n\nView the log at:\n ${env.BUILD_URL}\n\nBlue Ocean:\n${env.RUN_DISPLAY_URL}"
        }
    }
    
}
