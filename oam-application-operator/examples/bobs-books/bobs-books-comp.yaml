# Copyright (c) 2020, 2021, Oracle and/or its affiliates.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.

apiVersion: core.oam.dev/v1alpha2
kind: Component
metadata:
  name: robert-coh
  namespace: bobs-books
spec:
  workload:
    apiVersion: coherence.oracle.com/v1
    kind: CoherenceCluster
    metadata:
      name: roberts-coherence
      namespace: bobs-books
    spec:
      replicas: 2
      jvm:
        args:
          - "-Dcoherence.pof.config=books-pof-config.xml"
      image: container-registry.oracle.com/middleware/coherence:12.2.1.4.0
      imagePullPolicy: IfNotPresent
      imagePullSecrets:
        - name: ocr
      coherence:
        logLevel: 9
        cacheConfig: books-cache-config.xml
        metrics:
          enabled: true
          port: 9612
      ports:
        - name: extend
          port: 9000
      application:
        image: container-registry.oracle.com/verrazzano/example-roberts-coherence:0.1.10-3-7508985-127
        imagePullSecrets:
          - name: ocr
        env:
          - name: BACKEND_PORT
            value: "8001"
          - name: BACKEND_HOSTNAME
            value: bobs-bookstore-cluster-cluster-1.bobs-books.svc.cluster.local
---
apiVersion: core.oam.dev/v1alpha2
kind: Component
metadata:
  name: robert-helidon
  namespace: bobs-books
spec:
  workload:
    apiVersion: core.oam.dev/v1alpha2
    kind: ContainerizedWorkload
    metadata:
      name: robert-helidon
      namespace: bobs-books
      labels:
        app: robert-helidon
    spec:
      containers:
        - name: robert-helidon-stock-application
          image: "container-registry.oracle.com/verrazzano/example-roberts-helidon-stock-application:0.1.10-3-7508985-127"
          ports:
            - name: http
              containerPort: 8080
          env:
            - name: COH_CLUSTER
              value: roberts-coherence
            - name: COH_CACHE_CONFIG
              value: roberts-cache-config.xml
            - name: COH_POF_CONFIG
              value: roberts-pof-config.xml
---
apiVersion: core.oam.dev/v1alpha2
kind: Component
metadata:
  name: bobby-coh
  namespace: bobs-books
spec:
  workload:
    apiVersion: coherence.oracle.com/v1
    kind: CoherenceCluster
    metadata:
      name: bobbys-coherence
      namespace: bobs-books
    spec:
      replicas: 1
      jvm:
        args:
          - "-Dcoherence.pof.config=bobbys-pof-config.xml"
      image: container-registry.oracle.com/middleware/coherence:12.2.1.4.0
      imagePullPolicy: IfNotPresent
      imagePullSecrets:
        - name: ocr
        - name: github-packages
      coherence:
        logLevel: 9
        cacheConfig: bobbys-cache-config.xml
        metrics:
          enabled: true
          port: 9612
      ports:
      - name: extend
        port: 9000
      application:
        image: ghcr.io/verrazzano/example-bobbys-coherence:0.1.10-3-6e5f030-129
---
apiVersion: core.oam.dev/v1alpha2
kind: Component
metadata:
  name: bobby-helidon
  namespace: bobs-books
spec:
  workload:
    apiVersion: core.oam.dev/v1alpha2
    kind: ContainerizedWorkload
    metadata:
      name: bobbys-helidon-stock-application
      namespace: bobs-books
      labels:
        app: bobbys-helidon-stock-application
    spec:
      containers:
      - name: bobbys-helidon-stock-application
        image: "ghcr.io/verrazzano/example-bobbys-helidon-stock-application:0.1.10-3-6e5f030-129"
        imagePullSecret: github-packages
        ports:
          - containerPort: 8080
            name: http
        env:
          - name: BACKEND_PORT
            value: "8001"
          - name: BACKEND_HOSTNAME
            value: bobs-bookstore-cluster-cluster-1.bobs-books.svc.cluster.local
          - name: COH_CLUSTER
            value: bobbys-coherence
          - name: COH_CACHE_CONFIG
            value: bobbys-helidon-cache-config.xml
          - name: COH_POF_CONFIG
            value: bobbys-helidon-pof-config.xml
---
apiVersion: core.oam.dev/v1alpha2
kind: Component
metadata:
  name: bobby-wls
  namespace: bobs-books
spec:
  workload:
    apiVersion: weblogic.oracle/v8
    kind: Domain
    metadata:
      name: bobbys-front-end
      namespace: bobs-books
      labels:
        weblogic.resourceVersion: domain-v8
        weblogic.domainUID: bobbys-front-end
    spec:
      domainUID: bobbys-front-end
      domainHome: /u01/oracle/user_projects/domains/bobbys-front-end
      image: container-registry.oracle.com/verrazzano/example-bobbys-front-end:0.1.10-3-e5ae893-124
      imagePullSecrets:
        - name: ocr
      logHome: /scratch/logs/bobbys-front-end
      logHomeEnabled: true
      domainHomeSourceType: "FromModel"
      includeServerOutInPodLog: true
      replicas: 1
      webLogicCredentialsSecret:
        name: bobbys-front-end-weblogic-credentials
      clusters:
        - clusterName: cluster-1
      configuration:
        introspectorJobActiveDeadlineSeconds: 300
        model:
          runtimeEncryptionSecret: bobbys-front-end-runtime-encrypt-secret
      serverPod:
        env:
          - name: JAVA_OPTIONS
            value: "-Dweblogic.StdoutDebugEnabled=false"
          - name: USER_MEM_ARGS
            value: "-Djava.security.egd=file:/dev/./urandom"
          - name: HELIDON_HOSTNAME
            value: "bobbys-helidon-stock-application.bobs-books.svc.cluster.local"
          - name: HELIDON_PORT
            value: "8080"
          - name: WL_HOME
            value: /u01/oracle/wlserver
          - name: MW_HOME
            value: /u01/oracle
        volumeMounts:
          - mountPath: /scratch
            name: weblogic-domain-storage-volume
        volumes:
          - emptyDir: {}
            name: weblogic-domain-storage-volume
---
apiVersion: core.oam.dev/v1alpha2
kind: Component
metadata:
  name: bobs-mysql-configmap
  namespace: bobs-books
spec:
  workload:
    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: mysql-initdb-config
      namespace: bobs-books
    data:
      initdb.sql: |
        create table `orders` (
            `id` int not null auto_increment,
            `order_date` date,
            `name` char(40),
            `street` char(40),
            `city` char(40),
            `state` char(2),
            primary key(`id`)
        );
        create table `order_books` (
            `order_id` int,
            `book_id` int,
            `title` char(255),
            foreign key (`order_id`)
            references `orders`(`id`)
            on delete cascade
        );
        insert into `orders` (`id`, `order_date`, `name`, `street`, `city`, `state`)
        values (1, curdate(), "Bob Down", "12 Main Rd", "Mt Everest", "NJ");

        insert into `order_books` (`order_id`, `book_id`, `title`)
        values (1, 2, "Harry Potter");

        insert into `order_books` (`order_id`, `book_id`, `title`)
        values (1, 4, "Twilight");
---
apiVersion: core.oam.dev/v1alpha2
kind: Component
metadata:
  name: bobs-mysql-service
  namespace: bobs-books
spec:
  workload:
    apiVersion: v1
    kind: Service
    metadata:
      name: mysql
      namespace: bobs-books
    spec:
      ports:
        - port: 3306
      selector:
        app: mysql
      clusterIP: None
---
apiVersion: core.oam.dev/v1alpha2
kind: Component
metadata:
  name: bobs-mysql-deployment
  namespace: bobs-books
spec:
  workload:
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: mysql
      namespace: bobs-books
    spec:
      progressDeadlineSeconds: 600
      replicas: 1
      revisionHistoryLimit: 10
      selector:
        matchLabels:
          app: mysql
      strategy:
        type: Recreate
      template:
        metadata:
          creationTimestamp: null
          labels:
            app: mysql
        spec:
          containers:
            - env:
                - name: MYSQL_ROOT_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: mysql-credentials
                      key: password
                - name: MYSQL_USER
                  valueFrom:
                    secretKeyRef:
                      name: mysql-credentials
                      key: username
                - name: MYSQL_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: mysql-credentials
                      key: password
                - name: MYSQL_DATABASE
                  value: books
              image: "mysql:8.0.20"
              imagePullPolicy: IfNotPresent
              name: mysql
              ports:
                - containerPort: 3306
                  name: mysql
                  protocol: TCP
              resources: {}
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
              volumeMounts:
                - mountPath: /docker-entrypoint-initdb.d
                  name: mysql-initdb
          dnsPolicy: ClusterFirst
          imagePullSecrets:
            - name: ocr
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext: {}
          terminationGracePeriodSeconds: 30
          volumes:
            - configMap:
                defaultMode: 420
                name: mysql-initdb-config
              name: mysql-initdb
---
apiVersion: core.oam.dev/v1alpha2
kind: Component
metadata:
  name: bobs-orders-configmap
  namespace: bobs-books
spec:
  workload:
    apiVersion: v1
    kind: ConfigMap
    metadata:
      labels:
        weblogic.domainUID: bobs-bookstore
      name: bobs-bookstore-wdt-config-map
      namespace: bobs-books
    data:
      datasource.yaml: |
        resources:
          JDBCSystemResource:
            books:
              Target: 'cluster-1'
              JdbcResource:
                JDBCDataSourceParams:
                  JNDIName: [
                    jdbc/books
                  ]
                JDBCDriverParams:
                  DriverName: com.mysql.cj.jdbc.Driver
                  URL: '@@SECRET:mysql-credentials:url@@'
                  PasswordEncrypted: '@@SECRET:mysql-credentials:password@@'
                  Properties:
                    user:
                      Value: '@@SECRET:mysql-credentials:username@@'
                JDBCConnectionPoolParams:
                  ConnectionReserveTimeoutSeconds: 10
                  InitialCapacity: 0
                  MaxCapacity: 5
                  MinCapacity: 0
                  TestConnectionsOnReserve: true
                  TestTableName: SQL SELECT 1
---
apiVersion: core.oam.dev/v1alpha2
kind: Component
metadata:
  name: bobs-orders-wls
  namespace: bobs-books
spec:
  workload:
    apiVersion: weblogic.oracle/v8
    kind: Domain
    metadata:
      name: bobs-orders-wls
      namespace: bobs-books
      labels:
        weblogic.resourceVersion: domain-v8
        weblogic.domainUID: bobs-bookstore
    spec:
      domainUID: bobs-bookstore
      domainHome: /u01/oracle/user_projects/domains/bobs-bookstore
      domainHomeSourceType: FromModel
      image: "container-registry.oracle.com/verrazzano/example-bobs-books-order-manager:0.1.10-3-e5ae893-124"
      logHome: /scratch/logs/bobs-bookstore
      logHomeEnabled: true
      includeServerOutInPodLog: true
      replicas: 1
      webLogicCredentialsSecret:
        name: bobs-bookstore-weblogic-credentials
      imagePullSecrets:
        - name: ocr
      clusters:
        - clusterName: cluster-1
      configuration:
        introspectorJobActiveDeadlineSeconds: 300
        model:
          configMap: bobs-bookstore-wdt-config-map
          runtimeEncryptionSecret: bobs-bookstore-runtime-encrypt-secret
        secrets:
          - mysql-credentials
      serverPod:
        env:
          - name: JAVA_OPTIONS
            value: "-Dweblogic.StdoutDebugEnabled=false"
          - name: USER_MEM_ARGS
            value: "-Djava.security.egd=file:/dev/./urandom "
          - name: WL_HOME
            value: /u01/oracle/wlserver
          - name: MW_HOME
            value: /u01/oracle
        volumeMounts:
          - mountPath: /scratch
            name: weblogic-domain-storage-volume
        volumes:
          - emptyDir: {}
            name: weblogic-domain-storage-volume
