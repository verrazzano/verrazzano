// Code generated by MockGen. DO NOT EDIT.
// Source: kubernetes.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	versioned "github.com/verrazzano/verrazzano/platform-operator/clients/clusters/clientset/versioned"
	rest "k8s.io/client-go/rest"
)

// MockKubernetes is a mock of Kubernetes interface.
type MockKubernetes struct {
	ctrl     *gomock.Controller
	recorder *MockKubernetesMockRecorder
}

// MockKubernetesMockRecorder is the mock recorder for MockKubernetes.
type MockKubernetesMockRecorder struct {
	mock *MockKubernetes
}

// NewMockKubernetes creates a new mock instance.
func NewMockKubernetes(ctrl *gomock.Controller) *MockKubernetes {
	mock := &MockKubernetes{ctrl: ctrl}
	mock.recorder = &MockKubernetesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKubernetes) EXPECT() *MockKubernetesMockRecorder {
	return m.recorder
}

// GetKubeConfig mocks base method.
func (m *MockKubernetes) GetKubeConfig() *rest.Config {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKubeConfig")
	ret0, _ := ret[0].(*rest.Config)
	return ret0
}

// GetKubeConfig indicates an expected call of GetKubeConfig.
func (mr *MockKubernetesMockRecorder) GetKubeConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKubeConfig", reflect.TypeOf((*MockKubernetes)(nil).GetKubeConfig))
}

// NewClientSet mocks base method.
func (m *MockKubernetes) NewClientSet() (versioned.Interface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewClientSet")
	ret0, _ := ret[0].(versioned.Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewClientSet indicates an expected call of NewClientSet.
func (mr *MockKubernetesMockRecorder) NewClientSet() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewClientSet", reflect.TypeOf((*MockKubernetes)(nil).NewClientSet))
}
